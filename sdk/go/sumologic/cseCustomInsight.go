// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE Custom Insight.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseCustomInsight(ctx, "customInsight", &sumologic.CseCustomInsightArgs{
// 			Description: pulumi.String("Insight description"),
// 			Enabled:     pulumi.Bool(true),
// 			Ordered:     pulumi.Bool(true),
// 			RuleIds: pulumi.StringArray{
// 				pulumi.String("MATCH-S00001"),
// 				pulumi.String("THRESHOLD-U00005"),
// 			},
// 			Severity: pulumi.String("HIGH"),
// 			SignalNames: pulumi.StringArray{
// 				pulumi.String("Some Signal Name"),
// 				pulumi.String("Wildcard Signal Name *"),
// 			},
// 			Tags: pulumi.StringArray{
// 				pulumi.String("_mitreAttackTactic:TA0009"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `description` - (Required) The description of the generated Insights
// - `enabled` - (Required) Whether the Custom Insight should generate Insights
// - `ordered` - (Required) Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight
// - `name` - (Required) The name of the Custom Insight and the generated Insights
// - `ruleIds` - (Optional) The Rule IDs to match to generate an Insight (exactly one of ruleIds or signalNames must be specified)
// - `severity` - (Required) The severity of the generated Insights (HIGH, MEDIUM, or LOW)
// - `signalNames` - (Optional) The Signal names to match to generate an Insight (exactly one of ruleIds or signalNames must be specified)
// - `tags` - (Required) The tags of the generated Insights
//
// The following attributes are exported:
//
// - `id` - The internal ID of the chain rule.
//
// ## Import
//
// Custom Insights can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseCustomInsight:CseCustomInsight custom_insight id
// ```
type CseCustomInsight struct {
	pulumi.CustomResourceState

	Description pulumi.StringOutput      `pulumi:"description"`
	Enabled     pulumi.BoolOutput        `pulumi:"enabled"`
	Name        pulumi.StringOutput      `pulumi:"name"`
	Ordered     pulumi.BoolOutput        `pulumi:"ordered"`
	RuleIds     pulumi.StringArrayOutput `pulumi:"ruleIds"`
	Severity    pulumi.StringOutput      `pulumi:"severity"`
	SignalNames pulumi.StringArrayOutput `pulumi:"signalNames"`
	Tags        pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewCseCustomInsight registers a new resource with the given unique name, arguments, and options.
func NewCseCustomInsight(ctx *pulumi.Context,
	name string, args *CseCustomInsightArgs, opts ...pulumi.ResourceOption) (*CseCustomInsight, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Ordered == nil {
		return nil, errors.New("invalid value for required argument 'Ordered'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	var resource CseCustomInsight
	err := ctx.RegisterResource("sumologic:index/cseCustomInsight:CseCustomInsight", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseCustomInsight gets an existing CseCustomInsight resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseCustomInsight(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseCustomInsightState, opts ...pulumi.ResourceOption) (*CseCustomInsight, error) {
	var resource CseCustomInsight
	err := ctx.ReadResource("sumologic:index/cseCustomInsight:CseCustomInsight", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseCustomInsight resources.
type cseCustomInsightState struct {
	Description *string  `pulumi:"description"`
	Enabled     *bool    `pulumi:"enabled"`
	Name        *string  `pulumi:"name"`
	Ordered     *bool    `pulumi:"ordered"`
	RuleIds     []string `pulumi:"ruleIds"`
	Severity    *string  `pulumi:"severity"`
	SignalNames []string `pulumi:"signalNames"`
	Tags        []string `pulumi:"tags"`
}

type CseCustomInsightState struct {
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	Ordered     pulumi.BoolPtrInput
	RuleIds     pulumi.StringArrayInput
	Severity    pulumi.StringPtrInput
	SignalNames pulumi.StringArrayInput
	Tags        pulumi.StringArrayInput
}

func (CseCustomInsightState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseCustomInsightState)(nil)).Elem()
}

type cseCustomInsightArgs struct {
	Description string   `pulumi:"description"`
	Enabled     bool     `pulumi:"enabled"`
	Name        *string  `pulumi:"name"`
	Ordered     bool     `pulumi:"ordered"`
	RuleIds     []string `pulumi:"ruleIds"`
	Severity    string   `pulumi:"severity"`
	SignalNames []string `pulumi:"signalNames"`
	Tags        []string `pulumi:"tags"`
}

// The set of arguments for constructing a CseCustomInsight resource.
type CseCustomInsightArgs struct {
	Description pulumi.StringInput
	Enabled     pulumi.BoolInput
	Name        pulumi.StringPtrInput
	Ordered     pulumi.BoolInput
	RuleIds     pulumi.StringArrayInput
	Severity    pulumi.StringInput
	SignalNames pulumi.StringArrayInput
	Tags        pulumi.StringArrayInput
}

func (CseCustomInsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseCustomInsightArgs)(nil)).Elem()
}

type CseCustomInsightInput interface {
	pulumi.Input

	ToCseCustomInsightOutput() CseCustomInsightOutput
	ToCseCustomInsightOutputWithContext(ctx context.Context) CseCustomInsightOutput
}

func (*CseCustomInsight) ElementType() reflect.Type {
	return reflect.TypeOf((*CseCustomInsight)(nil))
}

func (i *CseCustomInsight) ToCseCustomInsightOutput() CseCustomInsightOutput {
	return i.ToCseCustomInsightOutputWithContext(context.Background())
}

func (i *CseCustomInsight) ToCseCustomInsightOutputWithContext(ctx context.Context) CseCustomInsightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseCustomInsightOutput)
}

func (i *CseCustomInsight) ToCseCustomInsightPtrOutput() CseCustomInsightPtrOutput {
	return i.ToCseCustomInsightPtrOutputWithContext(context.Background())
}

func (i *CseCustomInsight) ToCseCustomInsightPtrOutputWithContext(ctx context.Context) CseCustomInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseCustomInsightPtrOutput)
}

type CseCustomInsightPtrInput interface {
	pulumi.Input

	ToCseCustomInsightPtrOutput() CseCustomInsightPtrOutput
	ToCseCustomInsightPtrOutputWithContext(ctx context.Context) CseCustomInsightPtrOutput
}

type cseCustomInsightPtrType CseCustomInsightArgs

func (*cseCustomInsightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CseCustomInsight)(nil))
}

func (i *cseCustomInsightPtrType) ToCseCustomInsightPtrOutput() CseCustomInsightPtrOutput {
	return i.ToCseCustomInsightPtrOutputWithContext(context.Background())
}

func (i *cseCustomInsightPtrType) ToCseCustomInsightPtrOutputWithContext(ctx context.Context) CseCustomInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseCustomInsightPtrOutput)
}

// CseCustomInsightArrayInput is an input type that accepts CseCustomInsightArray and CseCustomInsightArrayOutput values.
// You can construct a concrete instance of `CseCustomInsightArrayInput` via:
//
//          CseCustomInsightArray{ CseCustomInsightArgs{...} }
type CseCustomInsightArrayInput interface {
	pulumi.Input

	ToCseCustomInsightArrayOutput() CseCustomInsightArrayOutput
	ToCseCustomInsightArrayOutputWithContext(context.Context) CseCustomInsightArrayOutput
}

type CseCustomInsightArray []CseCustomInsightInput

func (CseCustomInsightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseCustomInsight)(nil)).Elem()
}

func (i CseCustomInsightArray) ToCseCustomInsightArrayOutput() CseCustomInsightArrayOutput {
	return i.ToCseCustomInsightArrayOutputWithContext(context.Background())
}

func (i CseCustomInsightArray) ToCseCustomInsightArrayOutputWithContext(ctx context.Context) CseCustomInsightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseCustomInsightArrayOutput)
}

// CseCustomInsightMapInput is an input type that accepts CseCustomInsightMap and CseCustomInsightMapOutput values.
// You can construct a concrete instance of `CseCustomInsightMapInput` via:
//
//          CseCustomInsightMap{ "key": CseCustomInsightArgs{...} }
type CseCustomInsightMapInput interface {
	pulumi.Input

	ToCseCustomInsightMapOutput() CseCustomInsightMapOutput
	ToCseCustomInsightMapOutputWithContext(context.Context) CseCustomInsightMapOutput
}

type CseCustomInsightMap map[string]CseCustomInsightInput

func (CseCustomInsightMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseCustomInsight)(nil)).Elem()
}

func (i CseCustomInsightMap) ToCseCustomInsightMapOutput() CseCustomInsightMapOutput {
	return i.ToCseCustomInsightMapOutputWithContext(context.Background())
}

func (i CseCustomInsightMap) ToCseCustomInsightMapOutputWithContext(ctx context.Context) CseCustomInsightMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseCustomInsightMapOutput)
}

type CseCustomInsightOutput struct{ *pulumi.OutputState }

func (CseCustomInsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CseCustomInsight)(nil))
}

func (o CseCustomInsightOutput) ToCseCustomInsightOutput() CseCustomInsightOutput {
	return o
}

func (o CseCustomInsightOutput) ToCseCustomInsightOutputWithContext(ctx context.Context) CseCustomInsightOutput {
	return o
}

func (o CseCustomInsightOutput) ToCseCustomInsightPtrOutput() CseCustomInsightPtrOutput {
	return o.ToCseCustomInsightPtrOutputWithContext(context.Background())
}

func (o CseCustomInsightOutput) ToCseCustomInsightPtrOutputWithContext(ctx context.Context) CseCustomInsightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CseCustomInsight) *CseCustomInsight {
		return &v
	}).(CseCustomInsightPtrOutput)
}

type CseCustomInsightPtrOutput struct{ *pulumi.OutputState }

func (CseCustomInsightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseCustomInsight)(nil))
}

func (o CseCustomInsightPtrOutput) ToCseCustomInsightPtrOutput() CseCustomInsightPtrOutput {
	return o
}

func (o CseCustomInsightPtrOutput) ToCseCustomInsightPtrOutputWithContext(ctx context.Context) CseCustomInsightPtrOutput {
	return o
}

func (o CseCustomInsightPtrOutput) Elem() CseCustomInsightOutput {
	return o.ApplyT(func(v *CseCustomInsight) CseCustomInsight {
		if v != nil {
			return *v
		}
		var ret CseCustomInsight
		return ret
	}).(CseCustomInsightOutput)
}

type CseCustomInsightArrayOutput struct{ *pulumi.OutputState }

func (CseCustomInsightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CseCustomInsight)(nil))
}

func (o CseCustomInsightArrayOutput) ToCseCustomInsightArrayOutput() CseCustomInsightArrayOutput {
	return o
}

func (o CseCustomInsightArrayOutput) ToCseCustomInsightArrayOutputWithContext(ctx context.Context) CseCustomInsightArrayOutput {
	return o
}

func (o CseCustomInsightArrayOutput) Index(i pulumi.IntInput) CseCustomInsightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CseCustomInsight {
		return vs[0].([]CseCustomInsight)[vs[1].(int)]
	}).(CseCustomInsightOutput)
}

type CseCustomInsightMapOutput struct{ *pulumi.OutputState }

func (CseCustomInsightMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CseCustomInsight)(nil))
}

func (o CseCustomInsightMapOutput) ToCseCustomInsightMapOutput() CseCustomInsightMapOutput {
	return o
}

func (o CseCustomInsightMapOutput) ToCseCustomInsightMapOutputWithContext(ctx context.Context) CseCustomInsightMapOutput {
	return o
}

func (o CseCustomInsightMapOutput) MapIndex(k pulumi.StringInput) CseCustomInsightOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CseCustomInsight {
		return vs[0].(map[string]CseCustomInsight)[vs[1].(string)]
	}).(CseCustomInsightOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseCustomInsightInput)(nil)).Elem(), &CseCustomInsight{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseCustomInsightPtrInput)(nil)).Elem(), &CseCustomInsight{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseCustomInsightArrayInput)(nil)).Elem(), CseCustomInsightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseCustomInsightMapInput)(nil)).Elem(), CseCustomInsightMap{})
	pulumi.RegisterOutputType(CseCustomInsightOutput{})
	pulumi.RegisterOutputType(CseCustomInsightPtrOutput{})
	pulumi.RegisterOutputType(CseCustomInsightArrayOutput{})
	pulumi.RegisterOutputType(CseCustomInsightMapOutput{})
}
