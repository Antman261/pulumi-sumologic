// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE [Aggregation Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/09_Write_an_Aggregation_Rule).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseAggregationRule(ctx, "aggregationRule", &sumologic.CseAggregationRuleArgs{
// 			AggregationFunctions: CseAggregationRuleAggregationFunctionArray{
// 				&CseAggregationRuleAggregationFunctionArgs{
// 					Arguments: pulumi.StringArray{
// 						pulumi.String("metadata_deviceEventId"),
// 					},
// 					Function: pulumi.String("count_distinct"),
// 					Name:     pulumi.String("distinct_eventid_count"),
// 				},
// 			},
// 			DescriptionExpression: pulumi.String("Signal description"),
// 			Enabled:               pulumi.Bool(true),
// 			EntitySelectors: CseAggregationRuleEntitySelectorArray{
// 				&CseAggregationRuleEntitySelectorArgs{
// 					EntityType: pulumi.String("_ip"),
// 					Expression: pulumi.String("srcDevice_ip"),
// 				},
// 			},
// 			GroupByEntity: pulumi.Bool(true),
// 			GroupByFields: pulumi.StringArray{
// 				pulumi.String("dstDevice_hostname"),
// 			},
// 			IsPrototype:     pulumi.Bool(false),
// 			MatchExpression: pulumi.String("objectType = \"Network\""),
// 			NameExpression:  pulumi.String("Signal name"),
// 			SeverityMapping: &CseAggregationRuleSeverityMappingArgs{
// 				Default: pulumi.Int(5),
// 				Type:    pulumi.String("constant"),
// 			},
// 			SummaryExpression: pulumi.String("Signal summary"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("_mitreAttackTactic:TA0009"),
// 			},
// 			TriggerExpression: pulumi.String("distinct_eventid_count > 5"),
// 			WindowSize:        pulumi.String("T30M"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `aggregationFunctions` - (Required) One or more named aggregation functions
//   + `name` - (Required) The name to use to reference the result in the triggerExpression
//   + `function` - (Required) The function to aggregate with
//   + `arguments` - (Required) One or more expressions to pass as arguments to the function
// - `descriptionExpression` - (Required) The description of the generated Signals
// - `enabled` - (Required) Whether the rule should generate Signals
// - `entitySelectors` - (Required) The entities to generate Signals on
//   + `entityType` - (Required) The type of the entity to generate the Signal on.
//   + `expression` - (Required) The expression or field name to generate the Signal on.
// - `groupByEntity` - (Optional; defaults to true) Whether to group records by the specified entity fields
// - `groupByFields` - (Optional) A list of fields to group records by
// - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
// - `matchExpression` - (Required) The expression for which records to match on
// - `name` - (Required) The name of the Rule
// - `nameExpression` - (Required) The name of the generated Signals
// - `severityMapping` - (Required) The configuration of how the severity of the Signals should be mapped from the Records
//   + `type` - (Required) Whether to set a constant severity ("constant"), set the severity based on the direct value of a record field ("fieldValue"), or map a record field value to a severity ("fieldValueMapping").
//   + `default` - (Optional) The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
//   + `field` - (Optional) The field to use in the "fieldValue"/"fieldValueMapping" cases.
//   + `mapping` - (Optional) The map of record values to severities to use in the "fieldValueMapping" case
//     - `type` - (Required) Must be set to "eq" currently
//     - `from` - (Required) The record value to map from
//     - `to` - (Required) The severity value to map to
// - `summaryExpression` - (Optional) The summary of the generated Signals
// - `tags` - (Required) The tags of the generated Signals
// - `triggerExpression` - (Required) The expression to determine whether a Signal should be created based on the aggregation results
// - `windowSize` - (Required) How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
//
// The following attributes are exported:
//
// - `id` - The internal ID of the aggregation rule.
//
// ## Import
//
// Aggregation Rules can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseAggregationRule:CseAggregationRule aggregation_rule id
// ```
type CseAggregationRule struct {
	pulumi.CustomResourceState

	AggregationFunctions  CseAggregationRuleAggregationFunctionArrayOutput `pulumi:"aggregationFunctions"`
	DescriptionExpression pulumi.StringOutput                              `pulumi:"descriptionExpression"`
	Enabled               pulumi.BoolOutput                                `pulumi:"enabled"`
	EntitySelectors       CseAggregationRuleEntitySelectorArrayOutput      `pulumi:"entitySelectors"`
	GroupByEntity         pulumi.BoolPtrOutput                             `pulumi:"groupByEntity"`
	GroupByFields         pulumi.StringArrayOutput                         `pulumi:"groupByFields"`
	IsPrototype           pulumi.BoolPtrOutput                             `pulumi:"isPrototype"`
	MatchExpression       pulumi.StringOutput                              `pulumi:"matchExpression"`
	Name                  pulumi.StringOutput                              `pulumi:"name"`
	NameExpression        pulumi.StringOutput                              `pulumi:"nameExpression"`
	SeverityMapping       CseAggregationRuleSeverityMappingOutput          `pulumi:"severityMapping"`
	SummaryExpression     pulumi.StringPtrOutput                           `pulumi:"summaryExpression"`
	Tags                  pulumi.StringArrayOutput                         `pulumi:"tags"`
	TriggerExpression     pulumi.StringOutput                              `pulumi:"triggerExpression"`
	WindowSize            pulumi.StringOutput                              `pulumi:"windowSize"`
}

// NewCseAggregationRule registers a new resource with the given unique name, arguments, and options.
func NewCseAggregationRule(ctx *pulumi.Context,
	name string, args *CseAggregationRuleArgs, opts ...pulumi.ResourceOption) (*CseAggregationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AggregationFunctions == nil {
		return nil, errors.New("invalid value for required argument 'AggregationFunctions'")
	}
	if args.DescriptionExpression == nil {
		return nil, errors.New("invalid value for required argument 'DescriptionExpression'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EntitySelectors == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelectors'")
	}
	if args.MatchExpression == nil {
		return nil, errors.New("invalid value for required argument 'MatchExpression'")
	}
	if args.NameExpression == nil {
		return nil, errors.New("invalid value for required argument 'NameExpression'")
	}
	if args.SeverityMapping == nil {
		return nil, errors.New("invalid value for required argument 'SeverityMapping'")
	}
	if args.TriggerExpression == nil {
		return nil, errors.New("invalid value for required argument 'TriggerExpression'")
	}
	if args.WindowSize == nil {
		return nil, errors.New("invalid value for required argument 'WindowSize'")
	}
	var resource CseAggregationRule
	err := ctx.RegisterResource("sumologic:index/cseAggregationRule:CseAggregationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseAggregationRule gets an existing CseAggregationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseAggregationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseAggregationRuleState, opts ...pulumi.ResourceOption) (*CseAggregationRule, error) {
	var resource CseAggregationRule
	err := ctx.ReadResource("sumologic:index/cseAggregationRule:CseAggregationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseAggregationRule resources.
type cseAggregationRuleState struct {
	AggregationFunctions  []CseAggregationRuleAggregationFunction `pulumi:"aggregationFunctions"`
	DescriptionExpression *string                                 `pulumi:"descriptionExpression"`
	Enabled               *bool                                   `pulumi:"enabled"`
	EntitySelectors       []CseAggregationRuleEntitySelector      `pulumi:"entitySelectors"`
	GroupByEntity         *bool                                   `pulumi:"groupByEntity"`
	GroupByFields         []string                                `pulumi:"groupByFields"`
	IsPrototype           *bool                                   `pulumi:"isPrototype"`
	MatchExpression       *string                                 `pulumi:"matchExpression"`
	Name                  *string                                 `pulumi:"name"`
	NameExpression        *string                                 `pulumi:"nameExpression"`
	SeverityMapping       *CseAggregationRuleSeverityMapping      `pulumi:"severityMapping"`
	SummaryExpression     *string                                 `pulumi:"summaryExpression"`
	Tags                  []string                                `pulumi:"tags"`
	TriggerExpression     *string                                 `pulumi:"triggerExpression"`
	WindowSize            *string                                 `pulumi:"windowSize"`
}

type CseAggregationRuleState struct {
	AggregationFunctions  CseAggregationRuleAggregationFunctionArrayInput
	DescriptionExpression pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	EntitySelectors       CseAggregationRuleEntitySelectorArrayInput
	GroupByEntity         pulumi.BoolPtrInput
	GroupByFields         pulumi.StringArrayInput
	IsPrototype           pulumi.BoolPtrInput
	MatchExpression       pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	NameExpression        pulumi.StringPtrInput
	SeverityMapping       CseAggregationRuleSeverityMappingPtrInput
	SummaryExpression     pulumi.StringPtrInput
	Tags                  pulumi.StringArrayInput
	TriggerExpression     pulumi.StringPtrInput
	WindowSize            pulumi.StringPtrInput
}

func (CseAggregationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseAggregationRuleState)(nil)).Elem()
}

type cseAggregationRuleArgs struct {
	AggregationFunctions  []CseAggregationRuleAggregationFunction `pulumi:"aggregationFunctions"`
	DescriptionExpression string                                  `pulumi:"descriptionExpression"`
	Enabled               bool                                    `pulumi:"enabled"`
	EntitySelectors       []CseAggregationRuleEntitySelector      `pulumi:"entitySelectors"`
	GroupByEntity         *bool                                   `pulumi:"groupByEntity"`
	GroupByFields         []string                                `pulumi:"groupByFields"`
	IsPrototype           *bool                                   `pulumi:"isPrototype"`
	MatchExpression       string                                  `pulumi:"matchExpression"`
	Name                  *string                                 `pulumi:"name"`
	NameExpression        string                                  `pulumi:"nameExpression"`
	SeverityMapping       CseAggregationRuleSeverityMapping       `pulumi:"severityMapping"`
	SummaryExpression     *string                                 `pulumi:"summaryExpression"`
	Tags                  []string                                `pulumi:"tags"`
	TriggerExpression     string                                  `pulumi:"triggerExpression"`
	WindowSize            string                                  `pulumi:"windowSize"`
}

// The set of arguments for constructing a CseAggregationRule resource.
type CseAggregationRuleArgs struct {
	AggregationFunctions  CseAggregationRuleAggregationFunctionArrayInput
	DescriptionExpression pulumi.StringInput
	Enabled               pulumi.BoolInput
	EntitySelectors       CseAggregationRuleEntitySelectorArrayInput
	GroupByEntity         pulumi.BoolPtrInput
	GroupByFields         pulumi.StringArrayInput
	IsPrototype           pulumi.BoolPtrInput
	MatchExpression       pulumi.StringInput
	Name                  pulumi.StringPtrInput
	NameExpression        pulumi.StringInput
	SeverityMapping       CseAggregationRuleSeverityMappingInput
	SummaryExpression     pulumi.StringPtrInput
	Tags                  pulumi.StringArrayInput
	TriggerExpression     pulumi.StringInput
	WindowSize            pulumi.StringInput
}

func (CseAggregationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseAggregationRuleArgs)(nil)).Elem()
}

type CseAggregationRuleInput interface {
	pulumi.Input

	ToCseAggregationRuleOutput() CseAggregationRuleOutput
	ToCseAggregationRuleOutputWithContext(ctx context.Context) CseAggregationRuleOutput
}

func (*CseAggregationRule) ElementType() reflect.Type {
	return reflect.TypeOf((*CseAggregationRule)(nil))
}

func (i *CseAggregationRule) ToCseAggregationRuleOutput() CseAggregationRuleOutput {
	return i.ToCseAggregationRuleOutputWithContext(context.Background())
}

func (i *CseAggregationRule) ToCseAggregationRuleOutputWithContext(ctx context.Context) CseAggregationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAggregationRuleOutput)
}

func (i *CseAggregationRule) ToCseAggregationRulePtrOutput() CseAggregationRulePtrOutput {
	return i.ToCseAggregationRulePtrOutputWithContext(context.Background())
}

func (i *CseAggregationRule) ToCseAggregationRulePtrOutputWithContext(ctx context.Context) CseAggregationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAggregationRulePtrOutput)
}

type CseAggregationRulePtrInput interface {
	pulumi.Input

	ToCseAggregationRulePtrOutput() CseAggregationRulePtrOutput
	ToCseAggregationRulePtrOutputWithContext(ctx context.Context) CseAggregationRulePtrOutput
}

type cseAggregationRulePtrType CseAggregationRuleArgs

func (*cseAggregationRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CseAggregationRule)(nil))
}

func (i *cseAggregationRulePtrType) ToCseAggregationRulePtrOutput() CseAggregationRulePtrOutput {
	return i.ToCseAggregationRulePtrOutputWithContext(context.Background())
}

func (i *cseAggregationRulePtrType) ToCseAggregationRulePtrOutputWithContext(ctx context.Context) CseAggregationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAggregationRulePtrOutput)
}

// CseAggregationRuleArrayInput is an input type that accepts CseAggregationRuleArray and CseAggregationRuleArrayOutput values.
// You can construct a concrete instance of `CseAggregationRuleArrayInput` via:
//
//          CseAggregationRuleArray{ CseAggregationRuleArgs{...} }
type CseAggregationRuleArrayInput interface {
	pulumi.Input

	ToCseAggregationRuleArrayOutput() CseAggregationRuleArrayOutput
	ToCseAggregationRuleArrayOutputWithContext(context.Context) CseAggregationRuleArrayOutput
}

type CseAggregationRuleArray []CseAggregationRuleInput

func (CseAggregationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseAggregationRule)(nil)).Elem()
}

func (i CseAggregationRuleArray) ToCseAggregationRuleArrayOutput() CseAggregationRuleArrayOutput {
	return i.ToCseAggregationRuleArrayOutputWithContext(context.Background())
}

func (i CseAggregationRuleArray) ToCseAggregationRuleArrayOutputWithContext(ctx context.Context) CseAggregationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAggregationRuleArrayOutput)
}

// CseAggregationRuleMapInput is an input type that accepts CseAggregationRuleMap and CseAggregationRuleMapOutput values.
// You can construct a concrete instance of `CseAggregationRuleMapInput` via:
//
//          CseAggregationRuleMap{ "key": CseAggregationRuleArgs{...} }
type CseAggregationRuleMapInput interface {
	pulumi.Input

	ToCseAggregationRuleMapOutput() CseAggregationRuleMapOutput
	ToCseAggregationRuleMapOutputWithContext(context.Context) CseAggregationRuleMapOutput
}

type CseAggregationRuleMap map[string]CseAggregationRuleInput

func (CseAggregationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseAggregationRule)(nil)).Elem()
}

func (i CseAggregationRuleMap) ToCseAggregationRuleMapOutput() CseAggregationRuleMapOutput {
	return i.ToCseAggregationRuleMapOutputWithContext(context.Background())
}

func (i CseAggregationRuleMap) ToCseAggregationRuleMapOutputWithContext(ctx context.Context) CseAggregationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAggregationRuleMapOutput)
}

type CseAggregationRuleOutput struct{ *pulumi.OutputState }

func (CseAggregationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CseAggregationRule)(nil))
}

func (o CseAggregationRuleOutput) ToCseAggregationRuleOutput() CseAggregationRuleOutput {
	return o
}

func (o CseAggregationRuleOutput) ToCseAggregationRuleOutputWithContext(ctx context.Context) CseAggregationRuleOutput {
	return o
}

func (o CseAggregationRuleOutput) ToCseAggregationRulePtrOutput() CseAggregationRulePtrOutput {
	return o.ToCseAggregationRulePtrOutputWithContext(context.Background())
}

func (o CseAggregationRuleOutput) ToCseAggregationRulePtrOutputWithContext(ctx context.Context) CseAggregationRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CseAggregationRule) *CseAggregationRule {
		return &v
	}).(CseAggregationRulePtrOutput)
}

type CseAggregationRulePtrOutput struct{ *pulumi.OutputState }

func (CseAggregationRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseAggregationRule)(nil))
}

func (o CseAggregationRulePtrOutput) ToCseAggregationRulePtrOutput() CseAggregationRulePtrOutput {
	return o
}

func (o CseAggregationRulePtrOutput) ToCseAggregationRulePtrOutputWithContext(ctx context.Context) CseAggregationRulePtrOutput {
	return o
}

func (o CseAggregationRulePtrOutput) Elem() CseAggregationRuleOutput {
	return o.ApplyT(func(v *CseAggregationRule) CseAggregationRule {
		if v != nil {
			return *v
		}
		var ret CseAggregationRule
		return ret
	}).(CseAggregationRuleOutput)
}

type CseAggregationRuleArrayOutput struct{ *pulumi.OutputState }

func (CseAggregationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CseAggregationRule)(nil))
}

func (o CseAggregationRuleArrayOutput) ToCseAggregationRuleArrayOutput() CseAggregationRuleArrayOutput {
	return o
}

func (o CseAggregationRuleArrayOutput) ToCseAggregationRuleArrayOutputWithContext(ctx context.Context) CseAggregationRuleArrayOutput {
	return o
}

func (o CseAggregationRuleArrayOutput) Index(i pulumi.IntInput) CseAggregationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CseAggregationRule {
		return vs[0].([]CseAggregationRule)[vs[1].(int)]
	}).(CseAggregationRuleOutput)
}

type CseAggregationRuleMapOutput struct{ *pulumi.OutputState }

func (CseAggregationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CseAggregationRule)(nil))
}

func (o CseAggregationRuleMapOutput) ToCseAggregationRuleMapOutput() CseAggregationRuleMapOutput {
	return o
}

func (o CseAggregationRuleMapOutput) ToCseAggregationRuleMapOutputWithContext(ctx context.Context) CseAggregationRuleMapOutput {
	return o
}

func (o CseAggregationRuleMapOutput) MapIndex(k pulumi.StringInput) CseAggregationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CseAggregationRule {
		return vs[0].(map[string]CseAggregationRule)[vs[1].(string)]
	}).(CseAggregationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseAggregationRuleInput)(nil)).Elem(), &CseAggregationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseAggregationRulePtrInput)(nil)).Elem(), &CseAggregationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseAggregationRuleArrayInput)(nil)).Elem(), CseAggregationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseAggregationRuleMapInput)(nil)).Elem(), CseAggregationRuleMap{})
	pulumi.RegisterOutputType(CseAggregationRuleOutput{})
	pulumi.RegisterOutputType(CseAggregationRulePtrOutput{})
	pulumi.RegisterOutputType(CseAggregationRuleArrayOutput{})
	pulumi.RegisterOutputType(CseAggregationRuleMapOutput{})
}
