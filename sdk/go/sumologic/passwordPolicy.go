// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,
// please ensure that only a single instance of such resource is defined.
// The behavior for defining more than one password policy resources is undefined.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewPasswordPolicy(ctx, "examplePasswordPolicy", &sumologic.PasswordPolicyArgs{
// 			AccountLockoutDurationInMins:   pulumi.Int(30),
// 			AccountLockoutThreshold:        pulumi.Int(6),
// 			FailedLoginResetDurationInMins: pulumi.Int(10),
// 			MaxLength:                      pulumi.Int(128),
// 			MaxPasswordAgeInDays:           pulumi.Int(365),
// 			MinLength:                      pulumi.Int(8),
// 			MinUniquePasswords:             pulumi.Int(10),
// 			MustContainDigits:              pulumi.Bool(true),
// 			MustContainLowercase:           pulumi.Bool(true),
// 			MustContainSpecialChars:        pulumi.Bool(true),
// 			MustContainUppercase:           pulumi.Bool(true),
// 			RememberMfa:                    pulumi.Bool(true),
// 			RequireMfa:                     pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `minLength` - (Optional) The minimum length of the password. Defaults to 8.
// - `maxLength` - (Optional) The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
// - `mustContainLowercase` - (Optional) If the password must contain lower case characters. Defaults to true.
// - `mustContainUppercase` - (Optional) If the password must contain upper case characters. Defaults to true.
// - `mustContainDigits` - (Optional) If the password must contain digits. Defaults to true.
// - `mustContainSpecialChars` - (Optional) If the password must contain special characters. Defaults to true.
// - `maxPasswordAgeInDays` - (Optional) Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
// - `minUniquePasswords` - (Optional) The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
// - `accountLockoutThreshold` - (Optional) Number of failed login attempts allowed before account is locked-out. Defaults to 6.
// - `failedLoginResetDurationInMins` - (Optional) The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
// - `accountLockoutDurationInMins` - (Optional) The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
// - `requireMfa` - (Optional) If MFA should be required to log in. Defaults to false.
// - `rememberMfa` - (Optional) If MFA should be remembered on the browser. Defaults to true.
//
// [1]: https://help.sumologic.com/Manage/Security/Set-the-Password-Policy
type PasswordPolicy struct {
	pulumi.CustomResourceState

	AccountLockoutDurationInMins   pulumi.IntPtrOutput  `pulumi:"accountLockoutDurationInMins"`
	AccountLockoutThreshold        pulumi.IntPtrOutput  `pulumi:"accountLockoutThreshold"`
	FailedLoginResetDurationInMins pulumi.IntPtrOutput  `pulumi:"failedLoginResetDurationInMins"`
	MaxLength                      pulumi.IntPtrOutput  `pulumi:"maxLength"`
	MaxPasswordAgeInDays           pulumi.IntPtrOutput  `pulumi:"maxPasswordAgeInDays"`
	MinLength                      pulumi.IntPtrOutput  `pulumi:"minLength"`
	MinUniquePasswords             pulumi.IntPtrOutput  `pulumi:"minUniquePasswords"`
	MustContainDigits              pulumi.BoolPtrOutput `pulumi:"mustContainDigits"`
	MustContainLowercase           pulumi.BoolPtrOutput `pulumi:"mustContainLowercase"`
	MustContainSpecialChars        pulumi.BoolPtrOutput `pulumi:"mustContainSpecialChars"`
	MustContainUppercase           pulumi.BoolPtrOutput `pulumi:"mustContainUppercase"`
	RememberMfa                    pulumi.BoolPtrOutput `pulumi:"rememberMfa"`
	RequireMfa                     pulumi.BoolPtrOutput `pulumi:"requireMfa"`
}

// NewPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordPolicy(ctx *pulumi.Context,
	name string, args *PasswordPolicyArgs, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	if args == nil {
		args = &PasswordPolicyArgs{}
	}

	var resource PasswordPolicy
	err := ctx.RegisterResource("sumologic:index/passwordPolicy:PasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordPolicy gets an existing PasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordPolicyState, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	var resource PasswordPolicy
	err := ctx.ReadResource("sumologic:index/passwordPolicy:PasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordPolicy resources.
type passwordPolicyState struct {
	AccountLockoutDurationInMins   *int  `pulumi:"accountLockoutDurationInMins"`
	AccountLockoutThreshold        *int  `pulumi:"accountLockoutThreshold"`
	FailedLoginResetDurationInMins *int  `pulumi:"failedLoginResetDurationInMins"`
	MaxLength                      *int  `pulumi:"maxLength"`
	MaxPasswordAgeInDays           *int  `pulumi:"maxPasswordAgeInDays"`
	MinLength                      *int  `pulumi:"minLength"`
	MinUniquePasswords             *int  `pulumi:"minUniquePasswords"`
	MustContainDigits              *bool `pulumi:"mustContainDigits"`
	MustContainLowercase           *bool `pulumi:"mustContainLowercase"`
	MustContainSpecialChars        *bool `pulumi:"mustContainSpecialChars"`
	MustContainUppercase           *bool `pulumi:"mustContainUppercase"`
	RememberMfa                    *bool `pulumi:"rememberMfa"`
	RequireMfa                     *bool `pulumi:"requireMfa"`
}

type PasswordPolicyState struct {
	AccountLockoutDurationInMins   pulumi.IntPtrInput
	AccountLockoutThreshold        pulumi.IntPtrInput
	FailedLoginResetDurationInMins pulumi.IntPtrInput
	MaxLength                      pulumi.IntPtrInput
	MaxPasswordAgeInDays           pulumi.IntPtrInput
	MinLength                      pulumi.IntPtrInput
	MinUniquePasswords             pulumi.IntPtrInput
	MustContainDigits              pulumi.BoolPtrInput
	MustContainLowercase           pulumi.BoolPtrInput
	MustContainSpecialChars        pulumi.BoolPtrInput
	MustContainUppercase           pulumi.BoolPtrInput
	RememberMfa                    pulumi.BoolPtrInput
	RequireMfa                     pulumi.BoolPtrInput
}

func (PasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyState)(nil)).Elem()
}

type passwordPolicyArgs struct {
	AccountLockoutDurationInMins   *int  `pulumi:"accountLockoutDurationInMins"`
	AccountLockoutThreshold        *int  `pulumi:"accountLockoutThreshold"`
	FailedLoginResetDurationInMins *int  `pulumi:"failedLoginResetDurationInMins"`
	MaxLength                      *int  `pulumi:"maxLength"`
	MaxPasswordAgeInDays           *int  `pulumi:"maxPasswordAgeInDays"`
	MinLength                      *int  `pulumi:"minLength"`
	MinUniquePasswords             *int  `pulumi:"minUniquePasswords"`
	MustContainDigits              *bool `pulumi:"mustContainDigits"`
	MustContainLowercase           *bool `pulumi:"mustContainLowercase"`
	MustContainSpecialChars        *bool `pulumi:"mustContainSpecialChars"`
	MustContainUppercase           *bool `pulumi:"mustContainUppercase"`
	RememberMfa                    *bool `pulumi:"rememberMfa"`
	RequireMfa                     *bool `pulumi:"requireMfa"`
}

// The set of arguments for constructing a PasswordPolicy resource.
type PasswordPolicyArgs struct {
	AccountLockoutDurationInMins   pulumi.IntPtrInput
	AccountLockoutThreshold        pulumi.IntPtrInput
	FailedLoginResetDurationInMins pulumi.IntPtrInput
	MaxLength                      pulumi.IntPtrInput
	MaxPasswordAgeInDays           pulumi.IntPtrInput
	MinLength                      pulumi.IntPtrInput
	MinUniquePasswords             pulumi.IntPtrInput
	MustContainDigits              pulumi.BoolPtrInput
	MustContainLowercase           pulumi.BoolPtrInput
	MustContainSpecialChars        pulumi.BoolPtrInput
	MustContainUppercase           pulumi.BoolPtrInput
	RememberMfa                    pulumi.BoolPtrInput
	RequireMfa                     pulumi.BoolPtrInput
}

func (PasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyArgs)(nil)).Elem()
}

type PasswordPolicyInput interface {
	pulumi.Input

	ToPasswordPolicyOutput() PasswordPolicyOutput
	ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput
}

func (*PasswordPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordPolicy)(nil))
}

func (i *PasswordPolicy) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return i.ToPasswordPolicyOutputWithContext(context.Background())
}

func (i *PasswordPolicy) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyOutput)
}

func (i *PasswordPolicy) ToPasswordPolicyPtrOutput() PasswordPolicyPtrOutput {
	return i.ToPasswordPolicyPtrOutputWithContext(context.Background())
}

func (i *PasswordPolicy) ToPasswordPolicyPtrOutputWithContext(ctx context.Context) PasswordPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyPtrOutput)
}

type PasswordPolicyPtrInput interface {
	pulumi.Input

	ToPasswordPolicyPtrOutput() PasswordPolicyPtrOutput
	ToPasswordPolicyPtrOutputWithContext(ctx context.Context) PasswordPolicyPtrOutput
}

type passwordPolicyPtrType PasswordPolicyArgs

func (*passwordPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil))
}

func (i *passwordPolicyPtrType) ToPasswordPolicyPtrOutput() PasswordPolicyPtrOutput {
	return i.ToPasswordPolicyPtrOutputWithContext(context.Background())
}

func (i *passwordPolicyPtrType) ToPasswordPolicyPtrOutputWithContext(ctx context.Context) PasswordPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyPtrOutput)
}

// PasswordPolicyArrayInput is an input type that accepts PasswordPolicyArray and PasswordPolicyArrayOutput values.
// You can construct a concrete instance of `PasswordPolicyArrayInput` via:
//
//          PasswordPolicyArray{ PasswordPolicyArgs{...} }
type PasswordPolicyArrayInput interface {
	pulumi.Input

	ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput
	ToPasswordPolicyArrayOutputWithContext(context.Context) PasswordPolicyArrayOutput
}

type PasswordPolicyArray []PasswordPolicyInput

func (PasswordPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return i.ToPasswordPolicyArrayOutputWithContext(context.Background())
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyArrayOutput)
}

// PasswordPolicyMapInput is an input type that accepts PasswordPolicyMap and PasswordPolicyMapOutput values.
// You can construct a concrete instance of `PasswordPolicyMapInput` via:
//
//          PasswordPolicyMap{ "key": PasswordPolicyArgs{...} }
type PasswordPolicyMapInput interface {
	pulumi.Input

	ToPasswordPolicyMapOutput() PasswordPolicyMapOutput
	ToPasswordPolicyMapOutputWithContext(context.Context) PasswordPolicyMapOutput
}

type PasswordPolicyMap map[string]PasswordPolicyInput

func (PasswordPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return i.ToPasswordPolicyMapOutputWithContext(context.Background())
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyMapOutput)
}

type PasswordPolicyOutput struct{ *pulumi.OutputState }

func (PasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordPolicy)(nil))
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return o
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return o
}

func (o PasswordPolicyOutput) ToPasswordPolicyPtrOutput() PasswordPolicyPtrOutput {
	return o.ToPasswordPolicyPtrOutputWithContext(context.Background())
}

func (o PasswordPolicyOutput) ToPasswordPolicyPtrOutputWithContext(ctx context.Context) PasswordPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordPolicy) *PasswordPolicy {
		return &v
	}).(PasswordPolicyPtrOutput)
}

type PasswordPolicyPtrOutput struct{ *pulumi.OutputState }

func (PasswordPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil))
}

func (o PasswordPolicyPtrOutput) ToPasswordPolicyPtrOutput() PasswordPolicyPtrOutput {
	return o
}

func (o PasswordPolicyPtrOutput) ToPasswordPolicyPtrOutputWithContext(ctx context.Context) PasswordPolicyPtrOutput {
	return o
}

func (o PasswordPolicyPtrOutput) Elem() PasswordPolicyOutput {
	return o.ApplyT(func(v *PasswordPolicy) PasswordPolicy {
		if v != nil {
			return *v
		}
		var ret PasswordPolicy
		return ret
	}).(PasswordPolicyOutput)
}

type PasswordPolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PasswordPolicy)(nil))
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) Index(i pulumi.IntInput) PasswordPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PasswordPolicy {
		return vs[0].([]PasswordPolicy)[vs[1].(int)]
	}).(PasswordPolicyOutput)
}

type PasswordPolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PasswordPolicy)(nil))
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PasswordPolicy {
		return vs[0].(map[string]PasswordPolicy)[vs[1].(string)]
	}).(PasswordPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyInput)(nil)).Elem(), &PasswordPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyPtrInput)(nil)).Elem(), &PasswordPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyArrayInput)(nil)).Elem(), PasswordPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyMapInput)(nil)).Elem(), PasswordPolicyMap{})
	pulumi.RegisterOutputType(PasswordPolicyOutput{})
	pulumi.RegisterOutputType(PasswordPolicyPtrOutput{})
	pulumi.RegisterOutputType(PasswordPolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordPolicyMapOutput{})
}
