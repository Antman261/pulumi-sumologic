// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// CloudFront sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test 123/456
// ```
//
//  CloudFront sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source
type CloudfrontSource struct {
	pulumi.CustomResourceState

	Authentication             CloudfrontSourceAuthenticationOutput         `pulumi:"authentication"`
	AutomaticDateParsing       pulumi.BoolPtrOutput                         `pulumi:"automaticDateParsing"`
	Category                   pulumi.StringPtrOutput                       `pulumi:"category"`
	CollectorId                pulumi.IntOutput                             `pulumi:"collectorId"`
	ContentType                pulumi.StringOutput                          `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                       `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                          `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         CloudfrontSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                       `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                       `pulumi:"fields"`
	Filters                    CloudfrontSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                         `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                       `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                       `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                         `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	Path                       CloudfrontSourcePathOutput                   `pulumi:"path"`
	Paused                     pulumi.BoolOutput                            `pulumi:"paused"`
	ScanInterval               pulumi.IntOutput                             `pulumi:"scanInterval"`
	Timezone                   pulumi.StringPtrOutput                       `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewCloudfrontSource registers a new resource with the given unique name, arguments, and options.
func NewCloudfrontSource(ctx *pulumi.Context,
	name string, args *CloudfrontSourceArgs, opts ...pulumi.ResourceOption) (*CloudfrontSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource CloudfrontSource
	err := ctx.RegisterResource("sumologic:index/cloudfrontSource:CloudfrontSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudfrontSource gets an existing CloudfrontSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudfrontSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudfrontSourceState, opts ...pulumi.ResourceOption) (*CloudfrontSource, error) {
	var resource CloudfrontSource
	err := ctx.ReadResource("sumologic:index/cloudfrontSource:CloudfrontSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudfrontSource resources.
type cloudfrontSourceState struct {
	Authentication             *CloudfrontSourceAuthentication     `pulumi:"authentication"`
	AutomaticDateParsing       *bool                               `pulumi:"automaticDateParsing"`
	Category                   *string                             `pulumi:"category"`
	CollectorId                *int                                `pulumi:"collectorId"`
	ContentType                *string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []CloudfrontSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []CloudfrontSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	Path                       *CloudfrontSourcePath               `pulumi:"path"`
	Paused                     *bool                               `pulumi:"paused"`
	ScanInterval               *int                                `pulumi:"scanInterval"`
	Timezone                   *string                             `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type CloudfrontSourceState struct {
	Authentication             CloudfrontSourceAuthenticationPtrInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntPtrInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         CloudfrontSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    CloudfrontSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       CloudfrontSourcePathPtrInput
	Paused                     pulumi.BoolPtrInput
	ScanInterval               pulumi.IntPtrInput
	Timezone                   pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (CloudfrontSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudfrontSourceState)(nil)).Elem()
}

type cloudfrontSourceArgs struct {
	Authentication             CloudfrontSourceAuthentication      `pulumi:"authentication"`
	AutomaticDateParsing       *bool                               `pulumi:"automaticDateParsing"`
	Category                   *string                             `pulumi:"category"`
	CollectorId                int                                 `pulumi:"collectorId"`
	ContentType                string                              `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []CloudfrontSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []CloudfrontSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	Path                       CloudfrontSourcePath                `pulumi:"path"`
	Paused                     bool                                `pulumi:"paused"`
	ScanInterval               int                                 `pulumi:"scanInterval"`
	Timezone                   *string                             `pulumi:"timezone"`
	UseAutolineMatching        *bool                               `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a CloudfrontSource resource.
type CloudfrontSourceArgs struct {
	Authentication             CloudfrontSourceAuthenticationInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntInput
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         CloudfrontSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    CloudfrontSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       CloudfrontSourcePathInput
	Paused                     pulumi.BoolInput
	ScanInterval               pulumi.IntInput
	Timezone                   pulumi.StringPtrInput
	UseAutolineMatching        pulumi.BoolPtrInput
}

func (CloudfrontSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudfrontSourceArgs)(nil)).Elem()
}

type CloudfrontSourceInput interface {
	pulumi.Input

	ToCloudfrontSourceOutput() CloudfrontSourceOutput
	ToCloudfrontSourceOutputWithContext(ctx context.Context) CloudfrontSourceOutput
}

func (*CloudfrontSource) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudfrontSource)(nil))
}

func (i *CloudfrontSource) ToCloudfrontSourceOutput() CloudfrontSourceOutput {
	return i.ToCloudfrontSourceOutputWithContext(context.Background())
}

func (i *CloudfrontSource) ToCloudfrontSourceOutputWithContext(ctx context.Context) CloudfrontSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourceOutput)
}

func (i *CloudfrontSource) ToCloudfrontSourcePtrOutput() CloudfrontSourcePtrOutput {
	return i.ToCloudfrontSourcePtrOutputWithContext(context.Background())
}

func (i *CloudfrontSource) ToCloudfrontSourcePtrOutputWithContext(ctx context.Context) CloudfrontSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourcePtrOutput)
}

type CloudfrontSourcePtrInput interface {
	pulumi.Input

	ToCloudfrontSourcePtrOutput() CloudfrontSourcePtrOutput
	ToCloudfrontSourcePtrOutputWithContext(ctx context.Context) CloudfrontSourcePtrOutput
}

type cloudfrontSourcePtrType CloudfrontSourceArgs

func (*cloudfrontSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudfrontSource)(nil))
}

func (i *cloudfrontSourcePtrType) ToCloudfrontSourcePtrOutput() CloudfrontSourcePtrOutput {
	return i.ToCloudfrontSourcePtrOutputWithContext(context.Background())
}

func (i *cloudfrontSourcePtrType) ToCloudfrontSourcePtrOutputWithContext(ctx context.Context) CloudfrontSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourcePtrOutput)
}

// CloudfrontSourceArrayInput is an input type that accepts CloudfrontSourceArray and CloudfrontSourceArrayOutput values.
// You can construct a concrete instance of `CloudfrontSourceArrayInput` via:
//
//          CloudfrontSourceArray{ CloudfrontSourceArgs{...} }
type CloudfrontSourceArrayInput interface {
	pulumi.Input

	ToCloudfrontSourceArrayOutput() CloudfrontSourceArrayOutput
	ToCloudfrontSourceArrayOutputWithContext(context.Context) CloudfrontSourceArrayOutput
}

type CloudfrontSourceArray []CloudfrontSourceInput

func (CloudfrontSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CloudfrontSource)(nil))
}

func (i CloudfrontSourceArray) ToCloudfrontSourceArrayOutput() CloudfrontSourceArrayOutput {
	return i.ToCloudfrontSourceArrayOutputWithContext(context.Background())
}

func (i CloudfrontSourceArray) ToCloudfrontSourceArrayOutputWithContext(ctx context.Context) CloudfrontSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourceArrayOutput)
}

// CloudfrontSourceMapInput is an input type that accepts CloudfrontSourceMap and CloudfrontSourceMapOutput values.
// You can construct a concrete instance of `CloudfrontSourceMapInput` via:
//
//          CloudfrontSourceMap{ "key": CloudfrontSourceArgs{...} }
type CloudfrontSourceMapInput interface {
	pulumi.Input

	ToCloudfrontSourceMapOutput() CloudfrontSourceMapOutput
	ToCloudfrontSourceMapOutputWithContext(context.Context) CloudfrontSourceMapOutput
}

type CloudfrontSourceMap map[string]CloudfrontSourceInput

func (CloudfrontSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CloudfrontSource)(nil))
}

func (i CloudfrontSourceMap) ToCloudfrontSourceMapOutput() CloudfrontSourceMapOutput {
	return i.ToCloudfrontSourceMapOutputWithContext(context.Background())
}

func (i CloudfrontSourceMap) ToCloudfrontSourceMapOutputWithContext(ctx context.Context) CloudfrontSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourceMapOutput)
}

type CloudfrontSourceOutput struct {
	*pulumi.OutputState
}

func (CloudfrontSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudfrontSource)(nil))
}

func (o CloudfrontSourceOutput) ToCloudfrontSourceOutput() CloudfrontSourceOutput {
	return o
}

func (o CloudfrontSourceOutput) ToCloudfrontSourceOutputWithContext(ctx context.Context) CloudfrontSourceOutput {
	return o
}

func (o CloudfrontSourceOutput) ToCloudfrontSourcePtrOutput() CloudfrontSourcePtrOutput {
	return o.ToCloudfrontSourcePtrOutputWithContext(context.Background())
}

func (o CloudfrontSourceOutput) ToCloudfrontSourcePtrOutputWithContext(ctx context.Context) CloudfrontSourcePtrOutput {
	return o.ApplyT(func(v CloudfrontSource) *CloudfrontSource {
		return &v
	}).(CloudfrontSourcePtrOutput)
}

type CloudfrontSourcePtrOutput struct {
	*pulumi.OutputState
}

func (CloudfrontSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudfrontSource)(nil))
}

func (o CloudfrontSourcePtrOutput) ToCloudfrontSourcePtrOutput() CloudfrontSourcePtrOutput {
	return o
}

func (o CloudfrontSourcePtrOutput) ToCloudfrontSourcePtrOutputWithContext(ctx context.Context) CloudfrontSourcePtrOutput {
	return o
}

type CloudfrontSourceArrayOutput struct{ *pulumi.OutputState }

func (CloudfrontSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudfrontSource)(nil))
}

func (o CloudfrontSourceArrayOutput) ToCloudfrontSourceArrayOutput() CloudfrontSourceArrayOutput {
	return o
}

func (o CloudfrontSourceArrayOutput) ToCloudfrontSourceArrayOutputWithContext(ctx context.Context) CloudfrontSourceArrayOutput {
	return o
}

func (o CloudfrontSourceArrayOutput) Index(i pulumi.IntInput) CloudfrontSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudfrontSource {
		return vs[0].([]CloudfrontSource)[vs[1].(int)]
	}).(CloudfrontSourceOutput)
}

type CloudfrontSourceMapOutput struct{ *pulumi.OutputState }

func (CloudfrontSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CloudfrontSource)(nil))
}

func (o CloudfrontSourceMapOutput) ToCloudfrontSourceMapOutput() CloudfrontSourceMapOutput {
	return o
}

func (o CloudfrontSourceMapOutput) ToCloudfrontSourceMapOutputWithContext(ctx context.Context) CloudfrontSourceMapOutput {
	return o
}

func (o CloudfrontSourceMapOutput) MapIndex(k pulumi.StringInput) CloudfrontSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CloudfrontSource {
		return vs[0].(map[string]CloudfrontSource)[vs[1].(string)]
	}).(CloudfrontSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(CloudfrontSourceOutput{})
	pulumi.RegisterOutputType(CloudfrontSourcePtrOutput{})
	pulumi.RegisterOutputType(CloudfrontSourceArrayOutput{})
	pulumi.RegisterOutputType(CloudfrontSourceMapOutput{})
}
