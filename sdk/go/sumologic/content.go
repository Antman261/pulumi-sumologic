// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Content struct {
	pulumi.CustomResourceState

	Config   pulumi.StringOutput `pulumi:"config"`
	ParentId pulumi.StringOutput `pulumi:"parentId"`
}

// NewContent registers a new resource with the given unique name, arguments, and options.
func NewContent(ctx *pulumi.Context,
	name string, args *ContentArgs, opts ...pulumi.ResourceOption) (*Content, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	var resource Content
	err := ctx.RegisterResource("sumologic:index/content:Content", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContent gets an existing Content resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentState, opts ...pulumi.ResourceOption) (*Content, error) {
	var resource Content
	err := ctx.ReadResource("sumologic:index/content:Content", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Content resources.
type contentState struct {
	Config   *string `pulumi:"config"`
	ParentId *string `pulumi:"parentId"`
}

type ContentState struct {
	Config   pulumi.StringPtrInput
	ParentId pulumi.StringPtrInput
}

func (ContentState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentState)(nil)).Elem()
}

type contentArgs struct {
	Config   string `pulumi:"config"`
	ParentId string `pulumi:"parentId"`
}

// The set of arguments for constructing a Content resource.
type ContentArgs struct {
	Config   pulumi.StringInput
	ParentId pulumi.StringInput
}

func (ContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentArgs)(nil)).Elem()
}

type ContentInput interface {
	pulumi.Input

	ToContentOutput() ContentOutput
	ToContentOutputWithContext(ctx context.Context) ContentOutput
}

func (*Content) ElementType() reflect.Type {
	return reflect.TypeOf((*Content)(nil))
}

func (i *Content) ToContentOutput() ContentOutput {
	return i.ToContentOutputWithContext(context.Background())
}

func (i *Content) ToContentOutputWithContext(ctx context.Context) ContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentOutput)
}

func (i *Content) ToContentPtrOutput() ContentPtrOutput {
	return i.ToContentPtrOutputWithContext(context.Background())
}

func (i *Content) ToContentPtrOutputWithContext(ctx context.Context) ContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPtrOutput)
}

type ContentPtrInput interface {
	pulumi.Input

	ToContentPtrOutput() ContentPtrOutput
	ToContentPtrOutputWithContext(ctx context.Context) ContentPtrOutput
}

type contentPtrType ContentArgs

func (*contentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Content)(nil))
}

func (i *contentPtrType) ToContentPtrOutput() ContentPtrOutput {
	return i.ToContentPtrOutputWithContext(context.Background())
}

func (i *contentPtrType) ToContentPtrOutputWithContext(ctx context.Context) ContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPtrOutput)
}

// ContentArrayInput is an input type that accepts ContentArray and ContentArrayOutput values.
// You can construct a concrete instance of `ContentArrayInput` via:
//
//          ContentArray{ ContentArgs{...} }
type ContentArrayInput interface {
	pulumi.Input

	ToContentArrayOutput() ContentArrayOutput
	ToContentArrayOutputWithContext(context.Context) ContentArrayOutput
}

type ContentArray []ContentInput

func (ContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Content)(nil)).Elem()
}

func (i ContentArray) ToContentArrayOutput() ContentArrayOutput {
	return i.ToContentArrayOutputWithContext(context.Background())
}

func (i ContentArray) ToContentArrayOutputWithContext(ctx context.Context) ContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentArrayOutput)
}

// ContentMapInput is an input type that accepts ContentMap and ContentMapOutput values.
// You can construct a concrete instance of `ContentMapInput` via:
//
//          ContentMap{ "key": ContentArgs{...} }
type ContentMapInput interface {
	pulumi.Input

	ToContentMapOutput() ContentMapOutput
	ToContentMapOutputWithContext(context.Context) ContentMapOutput
}

type ContentMap map[string]ContentInput

func (ContentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Content)(nil)).Elem()
}

func (i ContentMap) ToContentMapOutput() ContentMapOutput {
	return i.ToContentMapOutputWithContext(context.Background())
}

func (i ContentMap) ToContentMapOutputWithContext(ctx context.Context) ContentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentMapOutput)
}

type ContentOutput struct{ *pulumi.OutputState }

func (ContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Content)(nil))
}

func (o ContentOutput) ToContentOutput() ContentOutput {
	return o
}

func (o ContentOutput) ToContentOutputWithContext(ctx context.Context) ContentOutput {
	return o
}

func (o ContentOutput) ToContentPtrOutput() ContentPtrOutput {
	return o.ToContentPtrOutputWithContext(context.Background())
}

func (o ContentOutput) ToContentPtrOutputWithContext(ctx context.Context) ContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Content) *Content {
		return &v
	}).(ContentPtrOutput)
}

type ContentPtrOutput struct{ *pulumi.OutputState }

func (ContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Content)(nil))
}

func (o ContentPtrOutput) ToContentPtrOutput() ContentPtrOutput {
	return o
}

func (o ContentPtrOutput) ToContentPtrOutputWithContext(ctx context.Context) ContentPtrOutput {
	return o
}

func (o ContentPtrOutput) Elem() ContentOutput {
	return o.ApplyT(func(v *Content) Content {
		if v != nil {
			return *v
		}
		var ret Content
		return ret
	}).(ContentOutput)
}

type ContentArrayOutput struct{ *pulumi.OutputState }

func (ContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Content)(nil))
}

func (o ContentArrayOutput) ToContentArrayOutput() ContentArrayOutput {
	return o
}

func (o ContentArrayOutput) ToContentArrayOutputWithContext(ctx context.Context) ContentArrayOutput {
	return o
}

func (o ContentArrayOutput) Index(i pulumi.IntInput) ContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Content {
		return vs[0].([]Content)[vs[1].(int)]
	}).(ContentOutput)
}

type ContentMapOutput struct{ *pulumi.OutputState }

func (ContentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Content)(nil))
}

func (o ContentMapOutput) ToContentMapOutput() ContentMapOutput {
	return o
}

func (o ContentMapOutput) ToContentMapOutputWithContext(ctx context.Context) ContentMapOutput {
	return o
}

func (o ContentMapOutput) MapIndex(k pulumi.StringInput) ContentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Content {
		return vs[0].(map[string]Content)[vs[1].(string)]
	}).(ContentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentInput)(nil)).Elem(), &Content{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPtrInput)(nil)).Elem(), &Content{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentArrayInput)(nil)).Elem(), ContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentMapInput)(nil)).Elem(), ContentMap{})
	pulumi.RegisterOutputType(ContentOutput{})
	pulumi.RegisterOutputType(ContentPtrOutput{})
	pulumi.RegisterOutputType(ContentArrayOutput{})
	pulumi.RegisterOutputType(ContentMapOutput{})
}
