// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE [Match Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/03_Write_a_Match_Rule).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseMatchRule(ctx, "matchRule", &sumologic.CseMatchRuleArgs{
// 			DescriptionExpression: pulumi.String("Signal description"),
// 			Enabled:               pulumi.Bool(true),
// 			EntitySelectors: CseMatchRuleEntitySelectorArray{
// 				&CseMatchRuleEntitySelectorArgs{
// 					EntityType: pulumi.String("_ip"),
// 					Expression: pulumi.String("srcDevice_ip"),
// 				},
// 			},
// 			Expression:     pulumi.String("objectType = \"Network\""),
// 			IsPrototype:    pulumi.Bool(false),
// 			NameExpression: pulumi.String("Signal name"),
// 			SeverityMapping: &CseMatchRuleSeverityMappingArgs{
// 				Default: pulumi.Int(5),
// 				Type:    pulumi.String("constant"),
// 			},
// 			SummaryExpression: pulumi.String("Signal summary"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("_mitreAttackTactic:TA0009"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `descriptionExpression` - (Required) The description of the generated Signals
// - `enabled` - (Required) Whether the rule should generate Signals
// - `entitySelectors` - (Required) The entities to generate Signals on
//   + `entityType` - (Required) The type of the entity to generate the Signal on.
//   + `expression` - (Required) The expression or field name to generate the Signal on.
// - `expression` - (Required) The expression for which records to match on
// - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
// - `name` - (Required) The name of the Rule
// - `nameExpression` - (Required) The name of the generated Signals
// - `severityMapping` - (Required) The configuration of how the severity of the Signals should be mapped from the Records
//   + `type` - (Required) Whether to set a constant severity ("constant"), set the severity based on the direct value of a record field ("fieldValue"), or map a record field value to a severity ("fieldValueMapping").
//   + `default` - (Optional) The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
//   + `field` - (Optional) The field to use in the "fieldValue"/"fieldValueMapping" cases.
//   + `mapping` - (Optional) The map of record values to severities to use in the "fieldValueMapping" case
//     - `type` - (Required) Must be set to "eq" currently
//     - `from` - (Required) The record value to map from
//     - `to` - (Required) The severity value to map to
// - `summaryExpression` - (Optional) The summary of the generated Signals
// - `tags` - (Required) The tags of the generated Signals
//
// The following attributes are exported:
//
// - `id` - The internal ID of the match rule.
//
// ## Import
//
// Match Rules can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseMatchRule:CseMatchRule match_rule id
// ```
type CseMatchRule struct {
	pulumi.CustomResourceState

	DescriptionExpression pulumi.StringOutput                   `pulumi:"descriptionExpression"`
	Enabled               pulumi.BoolOutput                     `pulumi:"enabled"`
	EntitySelectors       CseMatchRuleEntitySelectorArrayOutput `pulumi:"entitySelectors"`
	Expression            pulumi.StringOutput                   `pulumi:"expression"`
	IsPrototype           pulumi.BoolPtrOutput                  `pulumi:"isPrototype"`
	Name                  pulumi.StringOutput                   `pulumi:"name"`
	NameExpression        pulumi.StringOutput                   `pulumi:"nameExpression"`
	SeverityMapping       CseMatchRuleSeverityMappingOutput     `pulumi:"severityMapping"`
	SummaryExpression     pulumi.StringPtrOutput                `pulumi:"summaryExpression"`
	Tags                  pulumi.StringArrayOutput              `pulumi:"tags"`
}

// NewCseMatchRule registers a new resource with the given unique name, arguments, and options.
func NewCseMatchRule(ctx *pulumi.Context,
	name string, args *CseMatchRuleArgs, opts ...pulumi.ResourceOption) (*CseMatchRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DescriptionExpression == nil {
		return nil, errors.New("invalid value for required argument 'DescriptionExpression'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EntitySelectors == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelectors'")
	}
	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.NameExpression == nil {
		return nil, errors.New("invalid value for required argument 'NameExpression'")
	}
	if args.SeverityMapping == nil {
		return nil, errors.New("invalid value for required argument 'SeverityMapping'")
	}
	var resource CseMatchRule
	err := ctx.RegisterResource("sumologic:index/cseMatchRule:CseMatchRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseMatchRule gets an existing CseMatchRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseMatchRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseMatchRuleState, opts ...pulumi.ResourceOption) (*CseMatchRule, error) {
	var resource CseMatchRule
	err := ctx.ReadResource("sumologic:index/cseMatchRule:CseMatchRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseMatchRule resources.
type cseMatchRuleState struct {
	DescriptionExpression *string                      `pulumi:"descriptionExpression"`
	Enabled               *bool                        `pulumi:"enabled"`
	EntitySelectors       []CseMatchRuleEntitySelector `pulumi:"entitySelectors"`
	Expression            *string                      `pulumi:"expression"`
	IsPrototype           *bool                        `pulumi:"isPrototype"`
	Name                  *string                      `pulumi:"name"`
	NameExpression        *string                      `pulumi:"nameExpression"`
	SeverityMapping       *CseMatchRuleSeverityMapping `pulumi:"severityMapping"`
	SummaryExpression     *string                      `pulumi:"summaryExpression"`
	Tags                  []string                     `pulumi:"tags"`
}

type CseMatchRuleState struct {
	DescriptionExpression pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	EntitySelectors       CseMatchRuleEntitySelectorArrayInput
	Expression            pulumi.StringPtrInput
	IsPrototype           pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	NameExpression        pulumi.StringPtrInput
	SeverityMapping       CseMatchRuleSeverityMappingPtrInput
	SummaryExpression     pulumi.StringPtrInput
	Tags                  pulumi.StringArrayInput
}

func (CseMatchRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseMatchRuleState)(nil)).Elem()
}

type cseMatchRuleArgs struct {
	DescriptionExpression string                       `pulumi:"descriptionExpression"`
	Enabled               bool                         `pulumi:"enabled"`
	EntitySelectors       []CseMatchRuleEntitySelector `pulumi:"entitySelectors"`
	Expression            string                       `pulumi:"expression"`
	IsPrototype           *bool                        `pulumi:"isPrototype"`
	Name                  *string                      `pulumi:"name"`
	NameExpression        string                       `pulumi:"nameExpression"`
	SeverityMapping       CseMatchRuleSeverityMapping  `pulumi:"severityMapping"`
	SummaryExpression     *string                      `pulumi:"summaryExpression"`
	Tags                  []string                     `pulumi:"tags"`
}

// The set of arguments for constructing a CseMatchRule resource.
type CseMatchRuleArgs struct {
	DescriptionExpression pulumi.StringInput
	Enabled               pulumi.BoolInput
	EntitySelectors       CseMatchRuleEntitySelectorArrayInput
	Expression            pulumi.StringInput
	IsPrototype           pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	NameExpression        pulumi.StringInput
	SeverityMapping       CseMatchRuleSeverityMappingInput
	SummaryExpression     pulumi.StringPtrInput
	Tags                  pulumi.StringArrayInput
}

func (CseMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseMatchRuleArgs)(nil)).Elem()
}

type CseMatchRuleInput interface {
	pulumi.Input

	ToCseMatchRuleOutput() CseMatchRuleOutput
	ToCseMatchRuleOutputWithContext(ctx context.Context) CseMatchRuleOutput
}

func (*CseMatchRule) ElementType() reflect.Type {
	return reflect.TypeOf((*CseMatchRule)(nil))
}

func (i *CseMatchRule) ToCseMatchRuleOutput() CseMatchRuleOutput {
	return i.ToCseMatchRuleOutputWithContext(context.Background())
}

func (i *CseMatchRule) ToCseMatchRuleOutputWithContext(ctx context.Context) CseMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRuleOutput)
}

func (i *CseMatchRule) ToCseMatchRulePtrOutput() CseMatchRulePtrOutput {
	return i.ToCseMatchRulePtrOutputWithContext(context.Background())
}

func (i *CseMatchRule) ToCseMatchRulePtrOutputWithContext(ctx context.Context) CseMatchRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRulePtrOutput)
}

type CseMatchRulePtrInput interface {
	pulumi.Input

	ToCseMatchRulePtrOutput() CseMatchRulePtrOutput
	ToCseMatchRulePtrOutputWithContext(ctx context.Context) CseMatchRulePtrOutput
}

type cseMatchRulePtrType CseMatchRuleArgs

func (*cseMatchRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CseMatchRule)(nil))
}

func (i *cseMatchRulePtrType) ToCseMatchRulePtrOutput() CseMatchRulePtrOutput {
	return i.ToCseMatchRulePtrOutputWithContext(context.Background())
}

func (i *cseMatchRulePtrType) ToCseMatchRulePtrOutputWithContext(ctx context.Context) CseMatchRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRulePtrOutput)
}

// CseMatchRuleArrayInput is an input type that accepts CseMatchRuleArray and CseMatchRuleArrayOutput values.
// You can construct a concrete instance of `CseMatchRuleArrayInput` via:
//
//          CseMatchRuleArray{ CseMatchRuleArgs{...} }
type CseMatchRuleArrayInput interface {
	pulumi.Input

	ToCseMatchRuleArrayOutput() CseMatchRuleArrayOutput
	ToCseMatchRuleArrayOutputWithContext(context.Context) CseMatchRuleArrayOutput
}

type CseMatchRuleArray []CseMatchRuleInput

func (CseMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseMatchRule)(nil)).Elem()
}

func (i CseMatchRuleArray) ToCseMatchRuleArrayOutput() CseMatchRuleArrayOutput {
	return i.ToCseMatchRuleArrayOutputWithContext(context.Background())
}

func (i CseMatchRuleArray) ToCseMatchRuleArrayOutputWithContext(ctx context.Context) CseMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRuleArrayOutput)
}

// CseMatchRuleMapInput is an input type that accepts CseMatchRuleMap and CseMatchRuleMapOutput values.
// You can construct a concrete instance of `CseMatchRuleMapInput` via:
//
//          CseMatchRuleMap{ "key": CseMatchRuleArgs{...} }
type CseMatchRuleMapInput interface {
	pulumi.Input

	ToCseMatchRuleMapOutput() CseMatchRuleMapOutput
	ToCseMatchRuleMapOutputWithContext(context.Context) CseMatchRuleMapOutput
}

type CseMatchRuleMap map[string]CseMatchRuleInput

func (CseMatchRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseMatchRule)(nil)).Elem()
}

func (i CseMatchRuleMap) ToCseMatchRuleMapOutput() CseMatchRuleMapOutput {
	return i.ToCseMatchRuleMapOutputWithContext(context.Background())
}

func (i CseMatchRuleMap) ToCseMatchRuleMapOutputWithContext(ctx context.Context) CseMatchRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRuleMapOutput)
}

type CseMatchRuleOutput struct{ *pulumi.OutputState }

func (CseMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CseMatchRule)(nil))
}

func (o CseMatchRuleOutput) ToCseMatchRuleOutput() CseMatchRuleOutput {
	return o
}

func (o CseMatchRuleOutput) ToCseMatchRuleOutputWithContext(ctx context.Context) CseMatchRuleOutput {
	return o
}

func (o CseMatchRuleOutput) ToCseMatchRulePtrOutput() CseMatchRulePtrOutput {
	return o.ToCseMatchRulePtrOutputWithContext(context.Background())
}

func (o CseMatchRuleOutput) ToCseMatchRulePtrOutputWithContext(ctx context.Context) CseMatchRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CseMatchRule) *CseMatchRule {
		return &v
	}).(CseMatchRulePtrOutput)
}

type CseMatchRulePtrOutput struct{ *pulumi.OutputState }

func (CseMatchRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseMatchRule)(nil))
}

func (o CseMatchRulePtrOutput) ToCseMatchRulePtrOutput() CseMatchRulePtrOutput {
	return o
}

func (o CseMatchRulePtrOutput) ToCseMatchRulePtrOutputWithContext(ctx context.Context) CseMatchRulePtrOutput {
	return o
}

func (o CseMatchRulePtrOutput) Elem() CseMatchRuleOutput {
	return o.ApplyT(func(v *CseMatchRule) CseMatchRule {
		if v != nil {
			return *v
		}
		var ret CseMatchRule
		return ret
	}).(CseMatchRuleOutput)
}

type CseMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (CseMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CseMatchRule)(nil))
}

func (o CseMatchRuleArrayOutput) ToCseMatchRuleArrayOutput() CseMatchRuleArrayOutput {
	return o
}

func (o CseMatchRuleArrayOutput) ToCseMatchRuleArrayOutputWithContext(ctx context.Context) CseMatchRuleArrayOutput {
	return o
}

func (o CseMatchRuleArrayOutput) Index(i pulumi.IntInput) CseMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CseMatchRule {
		return vs[0].([]CseMatchRule)[vs[1].(int)]
	}).(CseMatchRuleOutput)
}

type CseMatchRuleMapOutput struct{ *pulumi.OutputState }

func (CseMatchRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CseMatchRule)(nil))
}

func (o CseMatchRuleMapOutput) ToCseMatchRuleMapOutput() CseMatchRuleMapOutput {
	return o
}

func (o CseMatchRuleMapOutput) ToCseMatchRuleMapOutputWithContext(ctx context.Context) CseMatchRuleMapOutput {
	return o
}

func (o CseMatchRuleMapOutput) MapIndex(k pulumi.StringInput) CseMatchRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CseMatchRule {
		return vs[0].(map[string]CseMatchRule)[vs[1].(string)]
	}).(CseMatchRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRuleInput)(nil)).Elem(), &CseMatchRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRulePtrInput)(nil)).Elem(), &CseMatchRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRuleArrayInput)(nil)).Elem(), CseMatchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRuleMapInput)(nil)).Elem(), CseMatchRuleMap{})
	pulumi.RegisterOutputType(CseMatchRuleOutput{})
	pulumi.RegisterOutputType(CseMatchRulePtrOutput{})
	pulumi.RegisterOutputType(CseMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(CseMatchRuleMapOutput{})
}
