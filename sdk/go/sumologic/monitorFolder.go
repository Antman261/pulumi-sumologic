// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the ability to create, read, delete, and update folders for [Monitors](https://help.sumologic.com/?cid=10020).
//
// ## Example Monitor Folder
//
// NOTE: Monitor folders are considered a different resource from Library content folders.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewMonitorFolder(ctx, "tfMonitorFolder1", &sumologic.MonitorFolderArgs{
// 			Description: pulumi.String("A folder for monitors managed by terraform."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Argument reference
//
// The following arguments are supported:
//
// - `type` - (Optional) The type of object model. Valid value:
//   - `MonitorsLibraryFolder`
// - `name` - (Required) The name of the monitor folder. The name must be alphanumeric.
// - `description` - (Required) The description of the monitor folder.
// - `parentId` - (Optional) The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
//
// Additional data provided in state:
//
// - `id` - (Computed) The identifier for this monitor folder.
//
// ## Import
//
// Monitor folders can be imported using the monitor folder identifier, such ashcl
//
// ```sh
//  $ pulumi import sumologic:index/monitorFolder:MonitorFolder tf_monitor_folder_1 0000000000ABC123
// ```
//
//  [1]https://help.sumologic.com/?cid=10020
type MonitorFolder struct {
	pulumi.CustomResourceState

	ContentType    pulumi.StringPtrOutput `pulumi:"contentType"`
	CreatedAt      pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy      pulumi.StringOutput    `pulumi:"createdBy"`
	Description    pulumi.StringOutput    `pulumi:"description"`
	IsLocked       pulumi.BoolPtrOutput   `pulumi:"isLocked"`
	IsMutable      pulumi.BoolOutput      `pulumi:"isMutable"`
	IsSystem       pulumi.BoolOutput      `pulumi:"isSystem"`
	ModifiedAt     pulumi.StringOutput    `pulumi:"modifiedAt"`
	ModifiedBy     pulumi.StringOutput    `pulumi:"modifiedBy"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	ParentId       pulumi.StringOutput    `pulumi:"parentId"`
	PostRequestMap pulumi.StringMapOutput `pulumi:"postRequestMap"`
	Type           pulumi.StringPtrOutput `pulumi:"type"`
	Version        pulumi.IntOutput       `pulumi:"version"`
}

// NewMonitorFolder registers a new resource with the given unique name, arguments, and options.
func NewMonitorFolder(ctx *pulumi.Context,
	name string, args *MonitorFolderArgs, opts ...pulumi.ResourceOption) (*MonitorFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource MonitorFolder
	err := ctx.RegisterResource("sumologic:index/monitorFolder:MonitorFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitorFolder gets an existing MonitorFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitorFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorFolderState, opts ...pulumi.ResourceOption) (*MonitorFolder, error) {
	var resource MonitorFolder
	err := ctx.ReadResource("sumologic:index/monitorFolder:MonitorFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitorFolder resources.
type monitorFolderState struct {
	ContentType    *string           `pulumi:"contentType"`
	CreatedAt      *string           `pulumi:"createdAt"`
	CreatedBy      *string           `pulumi:"createdBy"`
	Description    *string           `pulumi:"description"`
	IsLocked       *bool             `pulumi:"isLocked"`
	IsMutable      *bool             `pulumi:"isMutable"`
	IsSystem       *bool             `pulumi:"isSystem"`
	ModifiedAt     *string           `pulumi:"modifiedAt"`
	ModifiedBy     *string           `pulumi:"modifiedBy"`
	Name           *string           `pulumi:"name"`
	ParentId       *string           `pulumi:"parentId"`
	PostRequestMap map[string]string `pulumi:"postRequestMap"`
	Type           *string           `pulumi:"type"`
	Version        *int              `pulumi:"version"`
}

type MonitorFolderState struct {
	ContentType    pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	CreatedBy      pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	IsLocked       pulumi.BoolPtrInput
	IsMutable      pulumi.BoolPtrInput
	IsSystem       pulumi.BoolPtrInput
	ModifiedAt     pulumi.StringPtrInput
	ModifiedBy     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	ParentId       pulumi.StringPtrInput
	PostRequestMap pulumi.StringMapInput
	Type           pulumi.StringPtrInput
	Version        pulumi.IntPtrInput
}

func (MonitorFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorFolderState)(nil)).Elem()
}

type monitorFolderArgs struct {
	ContentType    *string           `pulumi:"contentType"`
	CreatedAt      *string           `pulumi:"createdAt"`
	CreatedBy      *string           `pulumi:"createdBy"`
	Description    string            `pulumi:"description"`
	IsLocked       *bool             `pulumi:"isLocked"`
	IsMutable      *bool             `pulumi:"isMutable"`
	IsSystem       *bool             `pulumi:"isSystem"`
	ModifiedAt     *string           `pulumi:"modifiedAt"`
	ModifiedBy     *string           `pulumi:"modifiedBy"`
	Name           *string           `pulumi:"name"`
	ParentId       *string           `pulumi:"parentId"`
	PostRequestMap map[string]string `pulumi:"postRequestMap"`
	Type           *string           `pulumi:"type"`
	Version        *int              `pulumi:"version"`
}

// The set of arguments for constructing a MonitorFolder resource.
type MonitorFolderArgs struct {
	ContentType    pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	CreatedBy      pulumi.StringPtrInput
	Description    pulumi.StringInput
	IsLocked       pulumi.BoolPtrInput
	IsMutable      pulumi.BoolPtrInput
	IsSystem       pulumi.BoolPtrInput
	ModifiedAt     pulumi.StringPtrInput
	ModifiedBy     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	ParentId       pulumi.StringPtrInput
	PostRequestMap pulumi.StringMapInput
	Type           pulumi.StringPtrInput
	Version        pulumi.IntPtrInput
}

func (MonitorFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorFolderArgs)(nil)).Elem()
}

type MonitorFolderInput interface {
	pulumi.Input

	ToMonitorFolderOutput() MonitorFolderOutput
	ToMonitorFolderOutputWithContext(ctx context.Context) MonitorFolderOutput
}

func (*MonitorFolder) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorFolder)(nil))
}

func (i *MonitorFolder) ToMonitorFolderOutput() MonitorFolderOutput {
	return i.ToMonitorFolderOutputWithContext(context.Background())
}

func (i *MonitorFolder) ToMonitorFolderOutputWithContext(ctx context.Context) MonitorFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderOutput)
}

func (i *MonitorFolder) ToMonitorFolderPtrOutput() MonitorFolderPtrOutput {
	return i.ToMonitorFolderPtrOutputWithContext(context.Background())
}

func (i *MonitorFolder) ToMonitorFolderPtrOutputWithContext(ctx context.Context) MonitorFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderPtrOutput)
}

type MonitorFolderPtrInput interface {
	pulumi.Input

	ToMonitorFolderPtrOutput() MonitorFolderPtrOutput
	ToMonitorFolderPtrOutputWithContext(ctx context.Context) MonitorFolderPtrOutput
}

type monitorFolderPtrType MonitorFolderArgs

func (*monitorFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorFolder)(nil))
}

func (i *monitorFolderPtrType) ToMonitorFolderPtrOutput() MonitorFolderPtrOutput {
	return i.ToMonitorFolderPtrOutputWithContext(context.Background())
}

func (i *monitorFolderPtrType) ToMonitorFolderPtrOutputWithContext(ctx context.Context) MonitorFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderPtrOutput)
}

// MonitorFolderArrayInput is an input type that accepts MonitorFolderArray and MonitorFolderArrayOutput values.
// You can construct a concrete instance of `MonitorFolderArrayInput` via:
//
//          MonitorFolderArray{ MonitorFolderArgs{...} }
type MonitorFolderArrayInput interface {
	pulumi.Input

	ToMonitorFolderArrayOutput() MonitorFolderArrayOutput
	ToMonitorFolderArrayOutputWithContext(context.Context) MonitorFolderArrayOutput
}

type MonitorFolderArray []MonitorFolderInput

func (MonitorFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MonitorFolder)(nil))
}

func (i MonitorFolderArray) ToMonitorFolderArrayOutput() MonitorFolderArrayOutput {
	return i.ToMonitorFolderArrayOutputWithContext(context.Background())
}

func (i MonitorFolderArray) ToMonitorFolderArrayOutputWithContext(ctx context.Context) MonitorFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderArrayOutput)
}

// MonitorFolderMapInput is an input type that accepts MonitorFolderMap and MonitorFolderMapOutput values.
// You can construct a concrete instance of `MonitorFolderMapInput` via:
//
//          MonitorFolderMap{ "key": MonitorFolderArgs{...} }
type MonitorFolderMapInput interface {
	pulumi.Input

	ToMonitorFolderMapOutput() MonitorFolderMapOutput
	ToMonitorFolderMapOutputWithContext(context.Context) MonitorFolderMapOutput
}

type MonitorFolderMap map[string]MonitorFolderInput

func (MonitorFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MonitorFolder)(nil))
}

func (i MonitorFolderMap) ToMonitorFolderMapOutput() MonitorFolderMapOutput {
	return i.ToMonitorFolderMapOutputWithContext(context.Background())
}

func (i MonitorFolderMap) ToMonitorFolderMapOutputWithContext(ctx context.Context) MonitorFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderMapOutput)
}

type MonitorFolderOutput struct {
	*pulumi.OutputState
}

func (MonitorFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorFolder)(nil))
}

func (o MonitorFolderOutput) ToMonitorFolderOutput() MonitorFolderOutput {
	return o
}

func (o MonitorFolderOutput) ToMonitorFolderOutputWithContext(ctx context.Context) MonitorFolderOutput {
	return o
}

func (o MonitorFolderOutput) ToMonitorFolderPtrOutput() MonitorFolderPtrOutput {
	return o.ToMonitorFolderPtrOutputWithContext(context.Background())
}

func (o MonitorFolderOutput) ToMonitorFolderPtrOutputWithContext(ctx context.Context) MonitorFolderPtrOutput {
	return o.ApplyT(func(v MonitorFolder) *MonitorFolder {
		return &v
	}).(MonitorFolderPtrOutput)
}

type MonitorFolderPtrOutput struct {
	*pulumi.OutputState
}

func (MonitorFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorFolder)(nil))
}

func (o MonitorFolderPtrOutput) ToMonitorFolderPtrOutput() MonitorFolderPtrOutput {
	return o
}

func (o MonitorFolderPtrOutput) ToMonitorFolderPtrOutputWithContext(ctx context.Context) MonitorFolderPtrOutput {
	return o
}

type MonitorFolderArrayOutput struct{ *pulumi.OutputState }

func (MonitorFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorFolder)(nil))
}

func (o MonitorFolderArrayOutput) ToMonitorFolderArrayOutput() MonitorFolderArrayOutput {
	return o
}

func (o MonitorFolderArrayOutput) ToMonitorFolderArrayOutputWithContext(ctx context.Context) MonitorFolderArrayOutput {
	return o
}

func (o MonitorFolderArrayOutput) Index(i pulumi.IntInput) MonitorFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorFolder {
		return vs[0].([]MonitorFolder)[vs[1].(int)]
	}).(MonitorFolderOutput)
}

type MonitorFolderMapOutput struct{ *pulumi.OutputState }

func (MonitorFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MonitorFolder)(nil))
}

func (o MonitorFolderMapOutput) ToMonitorFolderMapOutput() MonitorFolderMapOutput {
	return o
}

func (o MonitorFolderMapOutput) ToMonitorFolderMapOutputWithContext(ctx context.Context) MonitorFolderMapOutput {
	return o
}

func (o MonitorFolderMapOutput) MapIndex(k pulumi.StringInput) MonitorFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MonitorFolder {
		return vs[0].(map[string]MonitorFolder)[vs[1].(string)]
	}).(MonitorFolderOutput)
}

func init() {
	pulumi.RegisterOutputType(MonitorFolderOutput{})
	pulumi.RegisterOutputType(MonitorFolderPtrOutput{})
	pulumi.RegisterOutputType(MonitorFolderArrayOutput{})
	pulumi.RegisterOutputType(MonitorFolderMapOutput{})
}
