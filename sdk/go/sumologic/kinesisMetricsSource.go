// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic Kinesis Metrics source. This source is used to ingest data from Cloudwatch Metrics Stream via Kinesis Firehose from AWS.
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_ := []map[string]interface{}{
// 			map[string]interface{}{
// 				"namespace": "All",
// 				"tags": []string{
// 					"k3=v3",
// 				},
// 				"type": "TagFilters",
// 			},
// 			map[string]interface{}{
// 				"namespace": "AWS/Route53",
// 				"tags": []string{
// 					"k1=v1",
// 				},
// 				"type": "TagFilters",
// 			},
// 			map[string]interface{}{
// 				"namespace": "AWS/S3",
// 				"tags": []string{
// 					"k2=v2",
// 				},
// 				"type": "TagFilters",
// 			},
// 		}
// 		collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewKinesisMetricsSource(ctx, "kinesisMetricsAccessKey", &sumologic.KinesisMetricsSourceArgs{
// 			Authentication: &KinesisMetricsSourceAuthenticationArgs{
// 				AccessKey: pulumi.String("someKey"),
// 				SecretKey: pulumi.String("******"),
// 				Type:      pulumi.String("S3BucketAuthentication"),
// 			},
// 			Category:    pulumi.String("prod/kinesis/metrics"),
// 			CollectorId: collector.ID(),
// 			ContentType: pulumi.String("KinesisMetric"),
// 			Description: pulumi.String("Description for Kinesis Metrics Source"),
// 			Path: &KinesisMetricsSourcePathArgs{
// 				TagFilters: KinesisMetricsSourcePathTagFilterArray{
// 					&KinesisMetricsSourcePathTagFilterArgs{
// 						Namespace: pulumi.String("All"),
// 						Tags: pulumi.StringArray{
// 							pulumi.String("k3=v3"),
// 						},
// 						Type: pulumi.String("TagFilters"),
// 					},
// 					&KinesisMetricsSourcePathTagFilterArgs{
// 						Namespace: pulumi.String("AWS/Route53"),
// 						Tags: pulumi.StringArray{
// 							pulumi.String("k1=v1"),
// 						},
// 						Type: pulumi.String("TagFilters"),
// 					},
// 				},
// 				Type: pulumi.String("KinesisMetricPath"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewKinesisMetricsSource(ctx, "kinesisMetricsRoleArn", &sumologic.KinesisMetricsSourceArgs{
// 			Authentication: &KinesisMetricsSourceAuthenticationArgs{
// 				RoleArn: pulumi.String("arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI"),
// 				Type:    pulumi.String("AWSRoleBasedAuthentication"),
// 			},
// 			Category:    pulumi.String("prod/kinesis/metrics"),
// 			CollectorId: collector.ID(),
// 			ContentType: pulumi.String("KinesisMetric"),
// 			Description: pulumi.String("Description for Kinesis Metrics Source"),
// 			Path: &KinesisMetricsSourcePathArgs{
// 				TagFilters: KinesisMetricsSourcePathTagFilterArray{
// 					&KinesisMetricsSourcePathTagFilterArgs{
// 						Namespace: pulumi.String("All"),
// 						Tags: pulumi.StringArray{
// 							pulumi.String("k3=v3"),
// 						},
// 						Type: pulumi.String("TagFilters"),
// 					},
// 					&KinesisMetricsSourcePathTagFilterArgs{
// 						Namespace: pulumi.String("AWS/Route53"),
// 						Tags: pulumi.StringArray{
// 							pulumi.String("k1=v1"),
// 						},
// 						Type: pulumi.String("TagFilters"),
// 					},
// 				},
// 				Type: pulumi.String("KinesisMetricPath"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// In addition to the common properties, the following arguments are supported:
//
//  - `contentType` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
//  - `authentication` - (Required) Authentication details for connecting to the S3 bucket.
//      + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`
//      + `accessKey` - (Required) Your AWS access key if using type `S3BucketAuthentication`
//      + `secretKey` - (Required) Your AWS secret key if using type `S3BucketAuthentication`
//      + `roleArn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`
//  - `path` - (Required) The location to scan for new data.
//      + `type` - (Required) Must be `KinesisMetricPath`
//      + `tagFilters` - (Optional) Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
//           + `type` - This value has to be set to `TagFilters`
//           + `namespace` - Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
//           + `tags` - List of key-value pairs of tag filters. Eg: `["k3=v3"]`
//
// ## Import
//
// Kinesis Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test 123/456
// ```
//
//  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
type KinesisMetricsSource struct {
	pulumi.CustomResourceState

	Authentication             KinesisMetricsSourceAuthenticationOutput         `pulumi:"authentication"`
	AutomaticDateParsing       pulumi.BoolPtrOutput                             `pulumi:"automaticDateParsing"`
	Category                   pulumi.StringPtrOutput                           `pulumi:"category"`
	CollectorId                pulumi.IntOutput                                 `pulumi:"collectorId"`
	ContentType                pulumi.StringOutput                              `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                           `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                              `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         KinesisMetricsSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                           `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                           `pulumi:"fields"`
	Filters                    KinesisMetricsSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                             `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                           `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                           `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          pulumi.BoolPtrOutput                             `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                             `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                              `pulumi:"name"`
	Path                       KinesisMetricsSourcePathOutput                   `pulumi:"path"`
	Timezone                   pulumi.StringPtrOutput                           `pulumi:"timezone"`
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewKinesisMetricsSource registers a new resource with the given unique name, arguments, and options.
func NewKinesisMetricsSource(ctx *pulumi.Context,
	name string, args *KinesisMetricsSourceArgs, opts ...pulumi.ResourceOption) (*KinesisMetricsSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	var resource KinesisMetricsSource
	err := ctx.RegisterResource("sumologic:index/kinesisMetricsSource:KinesisMetricsSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKinesisMetricsSource gets an existing KinesisMetricsSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKinesisMetricsSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KinesisMetricsSourceState, opts ...pulumi.ResourceOption) (*KinesisMetricsSource, error) {
	var resource KinesisMetricsSource
	err := ctx.ReadResource("sumologic:index/kinesisMetricsSource:KinesisMetricsSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KinesisMetricsSource resources.
type kinesisMetricsSourceState struct {
	Authentication             *KinesisMetricsSourceAuthentication     `pulumi:"authentication"`
	AutomaticDateParsing       *bool                                   `pulumi:"automaticDateParsing"`
	Category                   *string                                 `pulumi:"category"`
	CollectorId                *int                                    `pulumi:"collectorId"`
	ContentType                *string                                 `pulumi:"contentType"`
	CutoffRelativeTime         *string                                 `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                    `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KinesisMetricsSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                                 `pulumi:"description"`
	Fields                     map[string]string                       `pulumi:"fields"`
	Filters                    []KinesisMetricsSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                                   `pulumi:"forceTimezone"`
	HostName                   *string                                 `pulumi:"hostName"`
	ManualPrefixRegexp         *string                                 `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                                   `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                                   `pulumi:"multilineProcessingEnabled"`
	Name                       *string                                 `pulumi:"name"`
	Path                       *KinesisMetricsSourcePath               `pulumi:"path"`
	Timezone                   *string                                 `pulumi:"timezone"`
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type KinesisMetricsSourceState struct {
	Authentication             KinesisMetricsSourceAuthenticationPtrInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntPtrInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KinesisMetricsSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KinesisMetricsSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       KinesisMetricsSourcePathPtrInput
	Timezone                   pulumi.StringPtrInput
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KinesisMetricsSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisMetricsSourceState)(nil)).Elem()
}

type kinesisMetricsSourceArgs struct {
	Authentication             KinesisMetricsSourceAuthentication      `pulumi:"authentication"`
	AutomaticDateParsing       *bool                                   `pulumi:"automaticDateParsing"`
	Category                   *string                                 `pulumi:"category"`
	CollectorId                int                                     `pulumi:"collectorId"`
	ContentType                string                                  `pulumi:"contentType"`
	CutoffRelativeTime         *string                                 `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                    `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KinesisMetricsSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                                 `pulumi:"description"`
	Fields                     map[string]string                       `pulumi:"fields"`
	Filters                    []KinesisMetricsSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                                   `pulumi:"forceTimezone"`
	HostName                   *string                                 `pulumi:"hostName"`
	ManualPrefixRegexp         *string                                 `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                                   `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                                   `pulumi:"multilineProcessingEnabled"`
	Name                       *string                                 `pulumi:"name"`
	Path                       KinesisMetricsSourcePath                `pulumi:"path"`
	Timezone                   *string                                 `pulumi:"timezone"`
	UseAutolineMatching        *bool                                   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a KinesisMetricsSource resource.
type KinesisMetricsSourceArgs struct {
	Authentication             KinesisMetricsSourceAuthenticationInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntInput
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KinesisMetricsSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KinesisMetricsSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       KinesisMetricsSourcePathInput
	Timezone                   pulumi.StringPtrInput
	UseAutolineMatching        pulumi.BoolPtrInput
}

func (KinesisMetricsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisMetricsSourceArgs)(nil)).Elem()
}

type KinesisMetricsSourceInput interface {
	pulumi.Input

	ToKinesisMetricsSourceOutput() KinesisMetricsSourceOutput
	ToKinesisMetricsSourceOutputWithContext(ctx context.Context) KinesisMetricsSourceOutput
}

func (*KinesisMetricsSource) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSource)(nil))
}

func (i *KinesisMetricsSource) ToKinesisMetricsSourceOutput() KinesisMetricsSourceOutput {
	return i.ToKinesisMetricsSourceOutputWithContext(context.Background())
}

func (i *KinesisMetricsSource) ToKinesisMetricsSourceOutputWithContext(ctx context.Context) KinesisMetricsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceOutput)
}

func (i *KinesisMetricsSource) ToKinesisMetricsSourcePtrOutput() KinesisMetricsSourcePtrOutput {
	return i.ToKinesisMetricsSourcePtrOutputWithContext(context.Background())
}

func (i *KinesisMetricsSource) ToKinesisMetricsSourcePtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePtrOutput)
}

type KinesisMetricsSourcePtrInput interface {
	pulumi.Input

	ToKinesisMetricsSourcePtrOutput() KinesisMetricsSourcePtrOutput
	ToKinesisMetricsSourcePtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePtrOutput
}

type kinesisMetricsSourcePtrType KinesisMetricsSourceArgs

func (*kinesisMetricsSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSource)(nil))
}

func (i *kinesisMetricsSourcePtrType) ToKinesisMetricsSourcePtrOutput() KinesisMetricsSourcePtrOutput {
	return i.ToKinesisMetricsSourcePtrOutputWithContext(context.Background())
}

func (i *kinesisMetricsSourcePtrType) ToKinesisMetricsSourcePtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePtrOutput)
}

// KinesisMetricsSourceArrayInput is an input type that accepts KinesisMetricsSourceArray and KinesisMetricsSourceArrayOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceArrayInput` via:
//
//          KinesisMetricsSourceArray{ KinesisMetricsSourceArgs{...} }
type KinesisMetricsSourceArrayInput interface {
	pulumi.Input

	ToKinesisMetricsSourceArrayOutput() KinesisMetricsSourceArrayOutput
	ToKinesisMetricsSourceArrayOutputWithContext(context.Context) KinesisMetricsSourceArrayOutput
}

type KinesisMetricsSourceArray []KinesisMetricsSourceInput

func (KinesisMetricsSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisMetricsSource)(nil)).Elem()
}

func (i KinesisMetricsSourceArray) ToKinesisMetricsSourceArrayOutput() KinesisMetricsSourceArrayOutput {
	return i.ToKinesisMetricsSourceArrayOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceArray) ToKinesisMetricsSourceArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceArrayOutput)
}

// KinesisMetricsSourceMapInput is an input type that accepts KinesisMetricsSourceMap and KinesisMetricsSourceMapOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceMapInput` via:
//
//          KinesisMetricsSourceMap{ "key": KinesisMetricsSourceArgs{...} }
type KinesisMetricsSourceMapInput interface {
	pulumi.Input

	ToKinesisMetricsSourceMapOutput() KinesisMetricsSourceMapOutput
	ToKinesisMetricsSourceMapOutputWithContext(context.Context) KinesisMetricsSourceMapOutput
}

type KinesisMetricsSourceMap map[string]KinesisMetricsSourceInput

func (KinesisMetricsSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisMetricsSource)(nil)).Elem()
}

func (i KinesisMetricsSourceMap) ToKinesisMetricsSourceMapOutput() KinesisMetricsSourceMapOutput {
	return i.ToKinesisMetricsSourceMapOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceMap) ToKinesisMetricsSourceMapOutputWithContext(ctx context.Context) KinesisMetricsSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceMapOutput)
}

type KinesisMetricsSourceOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSource)(nil))
}

func (o KinesisMetricsSourceOutput) ToKinesisMetricsSourceOutput() KinesisMetricsSourceOutput {
	return o
}

func (o KinesisMetricsSourceOutput) ToKinesisMetricsSourceOutputWithContext(ctx context.Context) KinesisMetricsSourceOutput {
	return o
}

func (o KinesisMetricsSourceOutput) ToKinesisMetricsSourcePtrOutput() KinesisMetricsSourcePtrOutput {
	return o.ToKinesisMetricsSourcePtrOutputWithContext(context.Background())
}

func (o KinesisMetricsSourceOutput) ToKinesisMetricsSourcePtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KinesisMetricsSource) *KinesisMetricsSource {
		return &v
	}).(KinesisMetricsSourcePtrOutput)
}

type KinesisMetricsSourcePtrOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSource)(nil))
}

func (o KinesisMetricsSourcePtrOutput) ToKinesisMetricsSourcePtrOutput() KinesisMetricsSourcePtrOutput {
	return o
}

func (o KinesisMetricsSourcePtrOutput) ToKinesisMetricsSourcePtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePtrOutput {
	return o
}

func (o KinesisMetricsSourcePtrOutput) Elem() KinesisMetricsSourceOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) KinesisMetricsSource {
		if v != nil {
			return *v
		}
		var ret KinesisMetricsSource
		return ret
	}).(KinesisMetricsSourceOutput)
}

type KinesisMetricsSourceArrayOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSource)(nil))
}

func (o KinesisMetricsSourceArrayOutput) ToKinesisMetricsSourceArrayOutput() KinesisMetricsSourceArrayOutput {
	return o
}

func (o KinesisMetricsSourceArrayOutput) ToKinesisMetricsSourceArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceArrayOutput {
	return o
}

func (o KinesisMetricsSourceArrayOutput) Index(i pulumi.IntInput) KinesisMetricsSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KinesisMetricsSource {
		return vs[0].([]KinesisMetricsSource)[vs[1].(int)]
	}).(KinesisMetricsSourceOutput)
}

type KinesisMetricsSourceMapOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KinesisMetricsSource)(nil))
}

func (o KinesisMetricsSourceMapOutput) ToKinesisMetricsSourceMapOutput() KinesisMetricsSourceMapOutput {
	return o
}

func (o KinesisMetricsSourceMapOutput) ToKinesisMetricsSourceMapOutputWithContext(ctx context.Context) KinesisMetricsSourceMapOutput {
	return o
}

func (o KinesisMetricsSourceMapOutput) MapIndex(k pulumi.StringInput) KinesisMetricsSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KinesisMetricsSource {
		return vs[0].(map[string]KinesisMetricsSource)[vs[1].(string)]
	}).(KinesisMetricsSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceInput)(nil)).Elem(), &KinesisMetricsSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourcePtrInput)(nil)).Elem(), &KinesisMetricsSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceArrayInput)(nil)).Elem(), KinesisMetricsSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceMapInput)(nil)).Elem(), KinesisMetricsSourceMap{})
	pulumi.RegisterOutputType(KinesisMetricsSourceOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourcePtrOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceArrayOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceMapOutput{})
}
