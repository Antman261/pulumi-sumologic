// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContentPermission struct {
	pulumi.CustomResourceState

	ContentId           pulumi.StringOutput                    `pulumi:"contentId"`
	NotificationMessage pulumi.StringPtrOutput                 `pulumi:"notificationMessage"`
	NotifyRecipient     pulumi.BoolOutput                      `pulumi:"notifyRecipient"`
	Permissions         ContentPermissionPermissionArrayOutput `pulumi:"permissions"`
}

// NewContentPermission registers a new resource with the given unique name, arguments, and options.
func NewContentPermission(ctx *pulumi.Context,
	name string, args *ContentPermissionArgs, opts ...pulumi.ResourceOption) (*ContentPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentId == nil {
		return nil, errors.New("invalid value for required argument 'ContentId'")
	}
	if args.NotifyRecipient == nil {
		return nil, errors.New("invalid value for required argument 'NotifyRecipient'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	var resource ContentPermission
	err := ctx.RegisterResource("sumologic:index/contentPermission:ContentPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentPermission gets an existing ContentPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentPermissionState, opts ...pulumi.ResourceOption) (*ContentPermission, error) {
	var resource ContentPermission
	err := ctx.ReadResource("sumologic:index/contentPermission:ContentPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentPermission resources.
type contentPermissionState struct {
	ContentId           *string                       `pulumi:"contentId"`
	NotificationMessage *string                       `pulumi:"notificationMessage"`
	NotifyRecipient     *bool                         `pulumi:"notifyRecipient"`
	Permissions         []ContentPermissionPermission `pulumi:"permissions"`
}

type ContentPermissionState struct {
	ContentId           pulumi.StringPtrInput
	NotificationMessage pulumi.StringPtrInput
	NotifyRecipient     pulumi.BoolPtrInput
	Permissions         ContentPermissionPermissionArrayInput
}

func (ContentPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentPermissionState)(nil)).Elem()
}

type contentPermissionArgs struct {
	ContentId           string                        `pulumi:"contentId"`
	NotificationMessage *string                       `pulumi:"notificationMessage"`
	NotifyRecipient     bool                          `pulumi:"notifyRecipient"`
	Permissions         []ContentPermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a ContentPermission resource.
type ContentPermissionArgs struct {
	ContentId           pulumi.StringInput
	NotificationMessage pulumi.StringPtrInput
	NotifyRecipient     pulumi.BoolInput
	Permissions         ContentPermissionPermissionArrayInput
}

func (ContentPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentPermissionArgs)(nil)).Elem()
}

type ContentPermissionInput interface {
	pulumi.Input

	ToContentPermissionOutput() ContentPermissionOutput
	ToContentPermissionOutputWithContext(ctx context.Context) ContentPermissionOutput
}

func (*ContentPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentPermission)(nil)).Elem()
}

func (i *ContentPermission) ToContentPermissionOutput() ContentPermissionOutput {
	return i.ToContentPermissionOutputWithContext(context.Background())
}

func (i *ContentPermission) ToContentPermissionOutputWithContext(ctx context.Context) ContentPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPermissionOutput)
}

// ContentPermissionArrayInput is an input type that accepts ContentPermissionArray and ContentPermissionArrayOutput values.
// You can construct a concrete instance of `ContentPermissionArrayInput` via:
//
//          ContentPermissionArray{ ContentPermissionArgs{...} }
type ContentPermissionArrayInput interface {
	pulumi.Input

	ToContentPermissionArrayOutput() ContentPermissionArrayOutput
	ToContentPermissionArrayOutputWithContext(context.Context) ContentPermissionArrayOutput
}

type ContentPermissionArray []ContentPermissionInput

func (ContentPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentPermission)(nil)).Elem()
}

func (i ContentPermissionArray) ToContentPermissionArrayOutput() ContentPermissionArrayOutput {
	return i.ToContentPermissionArrayOutputWithContext(context.Background())
}

func (i ContentPermissionArray) ToContentPermissionArrayOutputWithContext(ctx context.Context) ContentPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPermissionArrayOutput)
}

// ContentPermissionMapInput is an input type that accepts ContentPermissionMap and ContentPermissionMapOutput values.
// You can construct a concrete instance of `ContentPermissionMapInput` via:
//
//          ContentPermissionMap{ "key": ContentPermissionArgs{...} }
type ContentPermissionMapInput interface {
	pulumi.Input

	ToContentPermissionMapOutput() ContentPermissionMapOutput
	ToContentPermissionMapOutputWithContext(context.Context) ContentPermissionMapOutput
}

type ContentPermissionMap map[string]ContentPermissionInput

func (ContentPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentPermission)(nil)).Elem()
}

func (i ContentPermissionMap) ToContentPermissionMapOutput() ContentPermissionMapOutput {
	return i.ToContentPermissionMapOutputWithContext(context.Background())
}

func (i ContentPermissionMap) ToContentPermissionMapOutputWithContext(ctx context.Context) ContentPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPermissionMapOutput)
}

type ContentPermissionOutput struct{ *pulumi.OutputState }

func (ContentPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentPermission)(nil)).Elem()
}

func (o ContentPermissionOutput) ToContentPermissionOutput() ContentPermissionOutput {
	return o
}

func (o ContentPermissionOutput) ToContentPermissionOutputWithContext(ctx context.Context) ContentPermissionOutput {
	return o
}

type ContentPermissionArrayOutput struct{ *pulumi.OutputState }

func (ContentPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentPermission)(nil)).Elem()
}

func (o ContentPermissionArrayOutput) ToContentPermissionArrayOutput() ContentPermissionArrayOutput {
	return o
}

func (o ContentPermissionArrayOutput) ToContentPermissionArrayOutputWithContext(ctx context.Context) ContentPermissionArrayOutput {
	return o
}

func (o ContentPermissionArrayOutput) Index(i pulumi.IntInput) ContentPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContentPermission {
		return vs[0].([]*ContentPermission)[vs[1].(int)]
	}).(ContentPermissionOutput)
}

type ContentPermissionMapOutput struct{ *pulumi.OutputState }

func (ContentPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentPermission)(nil)).Elem()
}

func (o ContentPermissionMapOutput) ToContentPermissionMapOutput() ContentPermissionMapOutput {
	return o
}

func (o ContentPermissionMapOutput) ToContentPermissionMapOutputWithContext(ctx context.Context) ContentPermissionMapOutput {
	return o
}

func (o ContentPermissionMapOutput) MapIndex(k pulumi.StringInput) ContentPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContentPermission {
		return vs[0].(map[string]*ContentPermission)[vs[1].(string)]
	}).(ContentPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPermissionInput)(nil)).Elem(), &ContentPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPermissionArrayInput)(nil)).Elem(), ContentPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPermissionMapInput)(nil)).Elem(), ContentPermissionMap{})
	pulumi.RegisterOutputType(ContentPermissionOutput{})
	pulumi.RegisterOutputType(ContentPermissionArrayOutput{})
	pulumi.RegisterOutputType(ContentPermissionMapOutput{})
}
