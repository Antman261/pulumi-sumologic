// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE [Threshold Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/05_Write_a_Threshold_Rule).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseThresholdRule(ctx, "thresholdRule", &sumologic.CseThresholdRuleArgs{
// 			CountDistinct: pulumi.Bool(true),
// 			CountField:    pulumi.String("dstDevice_hostname"),
// 			Description:   pulumi.String("Signal description"),
// 			Enabled:       pulumi.Bool(true),
// 			EntitySelectors: sumologic.CseThresholdRuleEntitySelectorArray{
// 				&sumologic.CseThresholdRuleEntitySelectorArgs{
// 					EntityType: pulumi.String("_ip"),
// 					Expression: pulumi.String("srcDevice_ip"),
// 				},
// 			},
// 			Expression: pulumi.String("objectType = \"Network\""),
// 			GroupByFields: pulumi.StringArray{
// 				pulumi.String("dstDevice_hostname"),
// 			},
// 			IsPrototype:       pulumi.Bool(false),
// 			Limit:             pulumi.Int(1000),
// 			Severity:          pulumi.Int(5),
// 			SummaryExpression: pulumi.String("Signal summary"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("_mitreAttackTactic:TA0009"),
// 			},
// 			WindowSize: pulumi.String("T30M"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `countDistinct` - (Optional; defaults to false) Whether to count distinct values of a field, as opposed to just counting the number of records
// - `countField` - (Optional) The field to count if `countDistinct` is set to true
// - `description` - (Required) The description of the generated Signals
// - `enabled` - (Required) Whether the rule should generate Signals
// - `entitySelectors` - (Required) The entities to generate Signals on
//   + `entityType` - (Required) The type of the entity to generate the Signal on.
//   + `expression` - (Required) The expression or field name to generate the Signal on.
// - `expression` - (Required) The expression for which records to match on
// - `groupByFields` - (Optional) A list of fields to group records by
// - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
// - `limit` - (Required) A Signal will be fired when this many records/distinct field values are matched
// - `name` - (Required) The name of the Rule and the generated Signals
// - `severity` - (Required) The severity of the generated Signals
// - `summaryExpression` - (Optional) The summary of the generated Signals
// - `tags` - (Required) The tags of the generated Signals
// - `windowSize` - (Required) How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
//
// The following attributes are exported:
//
// - `id` - The internal ID of the threshold rule.
//
// ## Import
//
// Threshold Rules can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseThresholdRule:CseThresholdRule threshold_rule id
// ```
type CseThresholdRule struct {
	pulumi.CustomResourceState

	CountDistinct     pulumi.BoolPtrOutput                      `pulumi:"countDistinct"`
	CountField        pulumi.StringPtrOutput                    `pulumi:"countField"`
	Description       pulumi.StringOutput                       `pulumi:"description"`
	Enabled           pulumi.BoolOutput                         `pulumi:"enabled"`
	EntitySelectors   CseThresholdRuleEntitySelectorArrayOutput `pulumi:"entitySelectors"`
	Expression        pulumi.StringOutput                       `pulumi:"expression"`
	GroupByFields     pulumi.StringArrayOutput                  `pulumi:"groupByFields"`
	IsPrototype       pulumi.BoolPtrOutput                      `pulumi:"isPrototype"`
	Limit             pulumi.IntOutput                          `pulumi:"limit"`
	Name              pulumi.StringOutput                       `pulumi:"name"`
	Severity          pulumi.IntOutput                          `pulumi:"severity"`
	SummaryExpression pulumi.StringPtrOutput                    `pulumi:"summaryExpression"`
	Tags              pulumi.StringArrayOutput                  `pulumi:"tags"`
	WindowSize        pulumi.StringOutput                       `pulumi:"windowSize"`
}

// NewCseThresholdRule registers a new resource with the given unique name, arguments, and options.
func NewCseThresholdRule(ctx *pulumi.Context,
	name string, args *CseThresholdRuleArgs, opts ...pulumi.ResourceOption) (*CseThresholdRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EntitySelectors == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelectors'")
	}
	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.Limit == nil {
		return nil, errors.New("invalid value for required argument 'Limit'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	if args.WindowSize == nil {
		return nil, errors.New("invalid value for required argument 'WindowSize'")
	}
	var resource CseThresholdRule
	err := ctx.RegisterResource("sumologic:index/cseThresholdRule:CseThresholdRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseThresholdRule gets an existing CseThresholdRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseThresholdRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseThresholdRuleState, opts ...pulumi.ResourceOption) (*CseThresholdRule, error) {
	var resource CseThresholdRule
	err := ctx.ReadResource("sumologic:index/cseThresholdRule:CseThresholdRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseThresholdRule resources.
type cseThresholdRuleState struct {
	CountDistinct     *bool                            `pulumi:"countDistinct"`
	CountField        *string                          `pulumi:"countField"`
	Description       *string                          `pulumi:"description"`
	Enabled           *bool                            `pulumi:"enabled"`
	EntitySelectors   []CseThresholdRuleEntitySelector `pulumi:"entitySelectors"`
	Expression        *string                          `pulumi:"expression"`
	GroupByFields     []string                         `pulumi:"groupByFields"`
	IsPrototype       *bool                            `pulumi:"isPrototype"`
	Limit             *int                             `pulumi:"limit"`
	Name              *string                          `pulumi:"name"`
	Severity          *int                             `pulumi:"severity"`
	SummaryExpression *string                          `pulumi:"summaryExpression"`
	Tags              []string                         `pulumi:"tags"`
	WindowSize        *string                          `pulumi:"windowSize"`
}

type CseThresholdRuleState struct {
	CountDistinct     pulumi.BoolPtrInput
	CountField        pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Enabled           pulumi.BoolPtrInput
	EntitySelectors   CseThresholdRuleEntitySelectorArrayInput
	Expression        pulumi.StringPtrInput
	GroupByFields     pulumi.StringArrayInput
	IsPrototype       pulumi.BoolPtrInput
	Limit             pulumi.IntPtrInput
	Name              pulumi.StringPtrInput
	Severity          pulumi.IntPtrInput
	SummaryExpression pulumi.StringPtrInput
	Tags              pulumi.StringArrayInput
	WindowSize        pulumi.StringPtrInput
}

func (CseThresholdRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseThresholdRuleState)(nil)).Elem()
}

type cseThresholdRuleArgs struct {
	CountDistinct     *bool                            `pulumi:"countDistinct"`
	CountField        *string                          `pulumi:"countField"`
	Description       string                           `pulumi:"description"`
	Enabled           bool                             `pulumi:"enabled"`
	EntitySelectors   []CseThresholdRuleEntitySelector `pulumi:"entitySelectors"`
	Expression        string                           `pulumi:"expression"`
	GroupByFields     []string                         `pulumi:"groupByFields"`
	IsPrototype       *bool                            `pulumi:"isPrototype"`
	Limit             int                              `pulumi:"limit"`
	Name              *string                          `pulumi:"name"`
	Severity          int                              `pulumi:"severity"`
	SummaryExpression *string                          `pulumi:"summaryExpression"`
	Tags              []string                         `pulumi:"tags"`
	WindowSize        string                           `pulumi:"windowSize"`
}

// The set of arguments for constructing a CseThresholdRule resource.
type CseThresholdRuleArgs struct {
	CountDistinct     pulumi.BoolPtrInput
	CountField        pulumi.StringPtrInput
	Description       pulumi.StringInput
	Enabled           pulumi.BoolInput
	EntitySelectors   CseThresholdRuleEntitySelectorArrayInput
	Expression        pulumi.StringInput
	GroupByFields     pulumi.StringArrayInput
	IsPrototype       pulumi.BoolPtrInput
	Limit             pulumi.IntInput
	Name              pulumi.StringPtrInput
	Severity          pulumi.IntInput
	SummaryExpression pulumi.StringPtrInput
	Tags              pulumi.StringArrayInput
	WindowSize        pulumi.StringInput
}

func (CseThresholdRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseThresholdRuleArgs)(nil)).Elem()
}

type CseThresholdRuleInput interface {
	pulumi.Input

	ToCseThresholdRuleOutput() CseThresholdRuleOutput
	ToCseThresholdRuleOutputWithContext(ctx context.Context) CseThresholdRuleOutput
}

func (*CseThresholdRule) ElementType() reflect.Type {
	return reflect.TypeOf((*CseThresholdRule)(nil))
}

func (i *CseThresholdRule) ToCseThresholdRuleOutput() CseThresholdRuleOutput {
	return i.ToCseThresholdRuleOutputWithContext(context.Background())
}

func (i *CseThresholdRule) ToCseThresholdRuleOutputWithContext(ctx context.Context) CseThresholdRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseThresholdRuleOutput)
}

func (i *CseThresholdRule) ToCseThresholdRulePtrOutput() CseThresholdRulePtrOutput {
	return i.ToCseThresholdRulePtrOutputWithContext(context.Background())
}

func (i *CseThresholdRule) ToCseThresholdRulePtrOutputWithContext(ctx context.Context) CseThresholdRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseThresholdRulePtrOutput)
}

type CseThresholdRulePtrInput interface {
	pulumi.Input

	ToCseThresholdRulePtrOutput() CseThresholdRulePtrOutput
	ToCseThresholdRulePtrOutputWithContext(ctx context.Context) CseThresholdRulePtrOutput
}

type cseThresholdRulePtrType CseThresholdRuleArgs

func (*cseThresholdRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CseThresholdRule)(nil))
}

func (i *cseThresholdRulePtrType) ToCseThresholdRulePtrOutput() CseThresholdRulePtrOutput {
	return i.ToCseThresholdRulePtrOutputWithContext(context.Background())
}

func (i *cseThresholdRulePtrType) ToCseThresholdRulePtrOutputWithContext(ctx context.Context) CseThresholdRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseThresholdRulePtrOutput)
}

// CseThresholdRuleArrayInput is an input type that accepts CseThresholdRuleArray and CseThresholdRuleArrayOutput values.
// You can construct a concrete instance of `CseThresholdRuleArrayInput` via:
//
//          CseThresholdRuleArray{ CseThresholdRuleArgs{...} }
type CseThresholdRuleArrayInput interface {
	pulumi.Input

	ToCseThresholdRuleArrayOutput() CseThresholdRuleArrayOutput
	ToCseThresholdRuleArrayOutputWithContext(context.Context) CseThresholdRuleArrayOutput
}

type CseThresholdRuleArray []CseThresholdRuleInput

func (CseThresholdRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CseThresholdRule)(nil))
}

func (i CseThresholdRuleArray) ToCseThresholdRuleArrayOutput() CseThresholdRuleArrayOutput {
	return i.ToCseThresholdRuleArrayOutputWithContext(context.Background())
}

func (i CseThresholdRuleArray) ToCseThresholdRuleArrayOutputWithContext(ctx context.Context) CseThresholdRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseThresholdRuleArrayOutput)
}

// CseThresholdRuleMapInput is an input type that accepts CseThresholdRuleMap and CseThresholdRuleMapOutput values.
// You can construct a concrete instance of `CseThresholdRuleMapInput` via:
//
//          CseThresholdRuleMap{ "key": CseThresholdRuleArgs{...} }
type CseThresholdRuleMapInput interface {
	pulumi.Input

	ToCseThresholdRuleMapOutput() CseThresholdRuleMapOutput
	ToCseThresholdRuleMapOutputWithContext(context.Context) CseThresholdRuleMapOutput
}

type CseThresholdRuleMap map[string]CseThresholdRuleInput

func (CseThresholdRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CseThresholdRule)(nil))
}

func (i CseThresholdRuleMap) ToCseThresholdRuleMapOutput() CseThresholdRuleMapOutput {
	return i.ToCseThresholdRuleMapOutputWithContext(context.Background())
}

func (i CseThresholdRuleMap) ToCseThresholdRuleMapOutputWithContext(ctx context.Context) CseThresholdRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseThresholdRuleMapOutput)
}

type CseThresholdRuleOutput struct {
	*pulumi.OutputState
}

func (CseThresholdRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CseThresholdRule)(nil))
}

func (o CseThresholdRuleOutput) ToCseThresholdRuleOutput() CseThresholdRuleOutput {
	return o
}

func (o CseThresholdRuleOutput) ToCseThresholdRuleOutputWithContext(ctx context.Context) CseThresholdRuleOutput {
	return o
}

func (o CseThresholdRuleOutput) ToCseThresholdRulePtrOutput() CseThresholdRulePtrOutput {
	return o.ToCseThresholdRulePtrOutputWithContext(context.Background())
}

func (o CseThresholdRuleOutput) ToCseThresholdRulePtrOutputWithContext(ctx context.Context) CseThresholdRulePtrOutput {
	return o.ApplyT(func(v CseThresholdRule) *CseThresholdRule {
		return &v
	}).(CseThresholdRulePtrOutput)
}

type CseThresholdRulePtrOutput struct {
	*pulumi.OutputState
}

func (CseThresholdRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseThresholdRule)(nil))
}

func (o CseThresholdRulePtrOutput) ToCseThresholdRulePtrOutput() CseThresholdRulePtrOutput {
	return o
}

func (o CseThresholdRulePtrOutput) ToCseThresholdRulePtrOutputWithContext(ctx context.Context) CseThresholdRulePtrOutput {
	return o
}

type CseThresholdRuleArrayOutput struct{ *pulumi.OutputState }

func (CseThresholdRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CseThresholdRule)(nil))
}

func (o CseThresholdRuleArrayOutput) ToCseThresholdRuleArrayOutput() CseThresholdRuleArrayOutput {
	return o
}

func (o CseThresholdRuleArrayOutput) ToCseThresholdRuleArrayOutputWithContext(ctx context.Context) CseThresholdRuleArrayOutput {
	return o
}

func (o CseThresholdRuleArrayOutput) Index(i pulumi.IntInput) CseThresholdRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CseThresholdRule {
		return vs[0].([]CseThresholdRule)[vs[1].(int)]
	}).(CseThresholdRuleOutput)
}

type CseThresholdRuleMapOutput struct{ *pulumi.OutputState }

func (CseThresholdRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CseThresholdRule)(nil))
}

func (o CseThresholdRuleMapOutput) ToCseThresholdRuleMapOutput() CseThresholdRuleMapOutput {
	return o
}

func (o CseThresholdRuleMapOutput) ToCseThresholdRuleMapOutputWithContext(ctx context.Context) CseThresholdRuleMapOutput {
	return o
}

func (o CseThresholdRuleMapOutput) MapIndex(k pulumi.StringInput) CseThresholdRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CseThresholdRule {
		return vs[0].(map[string]CseThresholdRule)[vs[1].(string)]
	}).(CseThresholdRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(CseThresholdRuleOutput{})
	pulumi.RegisterOutputType(CseThresholdRulePtrOutput{})
	pulumi.RegisterOutputType(CseThresholdRuleArrayOutput{})
	pulumi.RegisterOutputType(CseThresholdRuleMapOutput{})
}
