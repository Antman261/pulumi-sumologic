// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sets the Sumologic Policies. Since each policy is global for the entire organization, please ensure that only a single
// instance of this resource is defined. The behavior for defining more than one policies resource is undefined.
//
// The following policies are supported:
// - [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index)
// - [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards)
// - [Maximum Web Session Timeout Policy](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout)
// - [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index)
// - [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org)
// - [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewPolicies(ctx, "examplePolicies", &sumologic.PoliciesArgs{
// 			Audit:                              pulumi.Bool(false),
// 			DataAccessLevel:                    pulumi.Bool(false),
// 			MaxUserSessionTimeout:              pulumi.String("7d"),
// 			SearchAudit:                        pulumi.Bool(false),
// 			ShareDashboardsOutsideOrganization: pulumi.Bool(false),
// 			UserConcurrentSessionsLimit: &sumologic.PoliciesUserConcurrentSessionsLimitArgs{
// 				Enabled:               pulumi.Bool(false),
// 				MaxConcurrentSessions: pulumi.Int(100),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `audit` - (Required) Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
// - `dataAccessLevel` - (Required) Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
// - `maxUserSessionTimeout` - (Required) The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
// - `searchAudit` - (Required) Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
// - `shareDashboardsOutsideOrganization` - (Required) Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
// - `userConcurrentSessionsLimit` - (Block List, Max: 1, Required) The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See userConcurrentSessionsLimit schema for details.
//
// ### Schema for `userConcurrentSessionsLimit`
// - `enabled` - (Required) Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
// - `maxConcurrentSessions` - (Optional) Maximum number of concurrent sessions a user may have. Defaults to `100`.
//
// ## Import
//
// Policies can be imported using the id `org-policies`. hcl
//
// ```sh
//  $ pulumi import sumologic:index/policies:Policies example_policies org-policies
// ```
//
//  [1]https://help.sumologic.com/Manage/Security/Audit-Index [2]https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards [3]https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout [4]https://help.sumologic.com/Manage/Security/Search_Audit_Index [5]https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org [6]https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions
type Policies struct {
	pulumi.CustomResourceState

	Audit                              pulumi.BoolOutput                         `pulumi:"audit"`
	DataAccessLevel                    pulumi.BoolOutput                         `pulumi:"dataAccessLevel"`
	MaxUserSessionTimeout              pulumi.StringOutput                       `pulumi:"maxUserSessionTimeout"`
	SearchAudit                        pulumi.BoolOutput                         `pulumi:"searchAudit"`
	ShareDashboardsOutsideOrganization pulumi.BoolOutput                         `pulumi:"shareDashboardsOutsideOrganization"`
	UserConcurrentSessionsLimit        PoliciesUserConcurrentSessionsLimitOutput `pulumi:"userConcurrentSessionsLimit"`
}

// NewPolicies registers a new resource with the given unique name, arguments, and options.
func NewPolicies(ctx *pulumi.Context,
	name string, args *PoliciesArgs, opts ...pulumi.ResourceOption) (*Policies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Audit == nil {
		return nil, errors.New("invalid value for required argument 'Audit'")
	}
	if args.DataAccessLevel == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessLevel'")
	}
	if args.MaxUserSessionTimeout == nil {
		return nil, errors.New("invalid value for required argument 'MaxUserSessionTimeout'")
	}
	if args.SearchAudit == nil {
		return nil, errors.New("invalid value for required argument 'SearchAudit'")
	}
	if args.ShareDashboardsOutsideOrganization == nil {
		return nil, errors.New("invalid value for required argument 'ShareDashboardsOutsideOrganization'")
	}
	if args.UserConcurrentSessionsLimit == nil {
		return nil, errors.New("invalid value for required argument 'UserConcurrentSessionsLimit'")
	}
	var resource Policies
	err := ctx.RegisterResource("sumologic:index/policies:Policies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicies gets an existing Policies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoliciesState, opts ...pulumi.ResourceOption) (*Policies, error) {
	var resource Policies
	err := ctx.ReadResource("sumologic:index/policies:Policies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policies resources.
type policiesState struct {
	Audit                              *bool                                `pulumi:"audit"`
	DataAccessLevel                    *bool                                `pulumi:"dataAccessLevel"`
	MaxUserSessionTimeout              *string                              `pulumi:"maxUserSessionTimeout"`
	SearchAudit                        *bool                                `pulumi:"searchAudit"`
	ShareDashboardsOutsideOrganization *bool                                `pulumi:"shareDashboardsOutsideOrganization"`
	UserConcurrentSessionsLimit        *PoliciesUserConcurrentSessionsLimit `pulumi:"userConcurrentSessionsLimit"`
}

type PoliciesState struct {
	Audit                              pulumi.BoolPtrInput
	DataAccessLevel                    pulumi.BoolPtrInput
	MaxUserSessionTimeout              pulumi.StringPtrInput
	SearchAudit                        pulumi.BoolPtrInput
	ShareDashboardsOutsideOrganization pulumi.BoolPtrInput
	UserConcurrentSessionsLimit        PoliciesUserConcurrentSessionsLimitPtrInput
}

func (PoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*policiesState)(nil)).Elem()
}

type policiesArgs struct {
	Audit                              bool                                `pulumi:"audit"`
	DataAccessLevel                    bool                                `pulumi:"dataAccessLevel"`
	MaxUserSessionTimeout              string                              `pulumi:"maxUserSessionTimeout"`
	SearchAudit                        bool                                `pulumi:"searchAudit"`
	ShareDashboardsOutsideOrganization bool                                `pulumi:"shareDashboardsOutsideOrganization"`
	UserConcurrentSessionsLimit        PoliciesUserConcurrentSessionsLimit `pulumi:"userConcurrentSessionsLimit"`
}

// The set of arguments for constructing a Policies resource.
type PoliciesArgs struct {
	Audit                              pulumi.BoolInput
	DataAccessLevel                    pulumi.BoolInput
	MaxUserSessionTimeout              pulumi.StringInput
	SearchAudit                        pulumi.BoolInput
	ShareDashboardsOutsideOrganization pulumi.BoolInput
	UserConcurrentSessionsLimit        PoliciesUserConcurrentSessionsLimitInput
}

func (PoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policiesArgs)(nil)).Elem()
}

type PoliciesInput interface {
	pulumi.Input

	ToPoliciesOutput() PoliciesOutput
	ToPoliciesOutputWithContext(ctx context.Context) PoliciesOutput
}

func (*Policies) ElementType() reflect.Type {
	return reflect.TypeOf((*Policies)(nil))
}

func (i *Policies) ToPoliciesOutput() PoliciesOutput {
	return i.ToPoliciesOutputWithContext(context.Background())
}

func (i *Policies) ToPoliciesOutputWithContext(ctx context.Context) PoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesOutput)
}

func (i *Policies) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return i.ToPoliciesPtrOutputWithContext(context.Background())
}

func (i *Policies) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesPtrOutput)
}

type PoliciesPtrInput interface {
	pulumi.Input

	ToPoliciesPtrOutput() PoliciesPtrOutput
	ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput
}

type policiesPtrType PoliciesArgs

func (*policiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policies)(nil))
}

func (i *policiesPtrType) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return i.ToPoliciesPtrOutputWithContext(context.Background())
}

func (i *policiesPtrType) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesPtrOutput)
}

// PoliciesArrayInput is an input type that accepts PoliciesArray and PoliciesArrayOutput values.
// You can construct a concrete instance of `PoliciesArrayInput` via:
//
//          PoliciesArray{ PoliciesArgs{...} }
type PoliciesArrayInput interface {
	pulumi.Input

	ToPoliciesArrayOutput() PoliciesArrayOutput
	ToPoliciesArrayOutputWithContext(context.Context) PoliciesArrayOutput
}

type PoliciesArray []PoliciesInput

func (PoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Policies)(nil))
}

func (i PoliciesArray) ToPoliciesArrayOutput() PoliciesArrayOutput {
	return i.ToPoliciesArrayOutputWithContext(context.Background())
}

func (i PoliciesArray) ToPoliciesArrayOutputWithContext(ctx context.Context) PoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesArrayOutput)
}

// PoliciesMapInput is an input type that accepts PoliciesMap and PoliciesMapOutput values.
// You can construct a concrete instance of `PoliciesMapInput` via:
//
//          PoliciesMap{ "key": PoliciesArgs{...} }
type PoliciesMapInput interface {
	pulumi.Input

	ToPoliciesMapOutput() PoliciesMapOutput
	ToPoliciesMapOutputWithContext(context.Context) PoliciesMapOutput
}

type PoliciesMap map[string]PoliciesInput

func (PoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Policies)(nil))
}

func (i PoliciesMap) ToPoliciesMapOutput() PoliciesMapOutput {
	return i.ToPoliciesMapOutputWithContext(context.Background())
}

func (i PoliciesMap) ToPoliciesMapOutputWithContext(ctx context.Context) PoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesMapOutput)
}

type PoliciesOutput struct {
	*pulumi.OutputState
}

func (PoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policies)(nil))
}

func (o PoliciesOutput) ToPoliciesOutput() PoliciesOutput {
	return o
}

func (o PoliciesOutput) ToPoliciesOutputWithContext(ctx context.Context) PoliciesOutput {
	return o
}

func (o PoliciesOutput) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return o.ToPoliciesPtrOutputWithContext(context.Background())
}

func (o PoliciesOutput) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return o.ApplyT(func(v Policies) *Policies {
		return &v
	}).(PoliciesPtrOutput)
}

type PoliciesPtrOutput struct {
	*pulumi.OutputState
}

func (PoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policies)(nil))
}

func (o PoliciesPtrOutput) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return o
}

func (o PoliciesPtrOutput) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return o
}

type PoliciesArrayOutput struct{ *pulumi.OutputState }

func (PoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Policies)(nil))
}

func (o PoliciesArrayOutput) ToPoliciesArrayOutput() PoliciesArrayOutput {
	return o
}

func (o PoliciesArrayOutput) ToPoliciesArrayOutputWithContext(ctx context.Context) PoliciesArrayOutput {
	return o
}

func (o PoliciesArrayOutput) Index(i pulumi.IntInput) PoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Policies {
		return vs[0].([]Policies)[vs[1].(int)]
	}).(PoliciesOutput)
}

type PoliciesMapOutput struct{ *pulumi.OutputState }

func (PoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Policies)(nil))
}

func (o PoliciesMapOutput) ToPoliciesMapOutput() PoliciesMapOutput {
	return o
}

func (o PoliciesMapOutput) ToPoliciesMapOutputWithContext(ctx context.Context) PoliciesMapOutput {
	return o
}

func (o PoliciesMapOutput) MapIndex(k pulumi.StringInput) PoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Policies {
		return vs[0].(map[string]Policies)[vs[1].(string)]
	}).(PoliciesOutput)
}

func init() {
	pulumi.RegisterOutputType(PoliciesOutput{})
	pulumi.RegisterOutputType(PoliciesPtrOutput{})
	pulumi.RegisterOutputType(PoliciesArrayOutput{})
	pulumi.RegisterOutputType(PoliciesMapOutput{})
}
