// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Dashboard (New)][1].
//
// ## Argument reference
//
// The following arguments are supported:
//
// - `title` - (Required) Title of the dashboard.
// - `description` - (Optional) Description of the dashboard.
// - `folderId` - (Optional) The identifier of the folder to save the dashboard in. By default it is saved in your
//   personal folder.
// - `refreshInterval` - (Optional) Interval of time (in seconds) to automatically refresh the dashboard.
// - `theme` - (Optional) Theme of the dashboard.
// - `topologyLabelMap` - (Block List, Max: 1, Optional) Topology labels for the dashboard. See
//   topology label map schema
//   for details.
// - `timeRange` - (Block List, Max: 1, Required) Time range of the dashboard. See time range schema
//   for details.
// - `panel` - (Block List, Optional) A list of panels in the dashboard. See panel schema for details.
// - `layout` - (Block List, Max: 1, Optional) Layout of the dashboard. See layout schema for details.
// - `variable` - (Block List, Optional) A list of variables for the dashboard. See variable schema
//   for details.
//
// ## Attributes reference
//
// In addition to all arguments above, the following attributes are exported:
//
// - `id` - The ID of the dashboard.
//
// ### Schema for `topologyLabelMap`
// - `data` - (Block List, Required) A list of blocks containing label and it's values.
//   - - `label` - (Required) The name of the topology label.
//   - - `values` - (Required) The values for the topology label.
//
// ### Schema for `timeRange`
// - `completeLiteralTimeRange` - (Block List, Max: 1, Optional) Literal time range. See
//   completeLiteralTimeRange schema for details.
// - `beginBoundedTimeRange` - (Block List, Max: 1, Optional) Bounded time range. See
//   beginBoundedTimeRange schema schema for details.
//   schema for details.
//
// ### Schema for `completeLiteralTimeRange`
// - `rangeName` - (Required) Name of complete literal time range. One of `today`, `yesterday`, `previousWeek`, `previousMonth`.
//
// ### Schema for `beginBoundedTimeRange`
// - `from` - (Block List, Max: 1, Required) Start boundary of bounded time range. See
//   timeRangeBoundary schema for details.
// - `to` - (Block List, Max: 1, Optional) End boundary of bounded time range. See
//   timeRangeBoundary schema for details.
//
// ### Schema for `timeRangeBoundary`
// - `epochTimeRange` - (Block List, Optional) Time since the epoch.
//     - `epochMillis` - (Required) Time as a number of milliseconds since the epoch.
//
// - `iso8601TimeRange` - (Block List, Optional) Time in ISO 8601 format.
//     - `iso8601Time` - (Required) Time as a string in ISO 8601 format.
//
// - `relativeTimeRange` - (Block List, Optional) Time in relative format.
//     - `relativeTime` - (Required) Relative time as a string consisting of following elements:
//       1. `-` (optional): minus sign indicates time in the past,
//       2. `<number>`: number of time units,
//       3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
//
//       Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
// `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
//
// - `literalTimeRange` - (Block List, Optional) Time in literal format.
//     - `rangeName` - (Required) One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
//
// ### Schema for `panel`
// - `textPanel` - (Block List, Max: 1, Optional) A text panel. See textPanel schema for details.
// - `sumoSearchPanel` - (Block List, Max: 1, Optional) A search panel. See sumoSearchPanel schema
//   for details.
//
// ### Schema for `textPanel`
// - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
//   of the panel in the dashboard.
// - `title` - (Optional) Title of the panel.
// - `visualSettings` - (Optional) Visual settings of the panel.
// - `keepVisualSettingsConsistentWithParent` - (Optional) Keeps the visual settings, like series colors, consistent
//   with the settings of the parent panel.
// - `text` - (Required) Text to display in the panel.
//
// ### Schema for `sumoSearchPanel`
// - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
//   of the panel in the dashboard.
// - `title` - (Optional) Title of the panel.
// - `visualSettings` - (Optional) Visual settings of the panel.
// - `keepVisualSettingsConsistentWithParent` - (Optional) Keeps the visual settings, like series colors, consistent
//   with the settings of the parent panel.
// - `query` - (Block List, Required) A list of queries for the panel. Can be log or metric query. See
//   query schema for details.
// - `description` - (Optional) Description of the panel.
// - `timeRange` - (Block List, Max: 1, Optional) Time range of the panel. See timeRange schema
//   for details.
// - `coloringRule` - (Block List, Optional) Coloring rules for the panel. See coloringRule schema
//   for details.
// - `linkedDashboard` - (Block List, Optional) A list of linked dashboards. See
//   linkedDashboard schema for details.
//
// ### Schema for `query`
// - `queryString` - (Required) The metrics or logs query.
// - `queryType` - (Required) The type of the query. One of `Metrics` or `Logs`.
// - `queryKey` - (Required) The key for metric or log query. Used as an identifier for queries.
// - `metricQueryMode` - (Optional) _Should only be specified for metric query_. The mode of the metric query.
//   One of `Basic` or `Advanced`.
// - `metricQueryData` - (Optional) _Should only be specified for metric query_. Data format for the metric query. See
//   metricQueryData schema for details.
//
// ### Schema for `metricQueryData`
// - `metric` - (Required) The metric of the query.
// - `aggregationType` - (Optional) The type of aggregation. One of `Count`, `Minimum`, `Maximum`, `Sum`, `Average`, `None`.
// - `groupBy` - The field to group the results by.
// - `filter` - (Block List, Required) A list of filters for the metrics query.
//     - `key` - (Required) The key of the metrics filter.
//     - `value` - (Required) The value of the metrics filter.
//     - `negation` - (Optional) Whether or not the metrics filter is negated.
// - `operator` - (Block List, Optional) A list of operator data for the metrics query.
//
// ### Schema for `operator`
// - `operatorName` - (Required) The name of the metrics operator.
// - `parameter` - (Block List, Required) A list of operator parameters for the operator data.
//     - `key` - (Required) The key of the operator parameter.
//     - `value` - (Required) The value of the operator parameter.
//
// ### Schema for `coloringRule`
// - `scope` - (Required) Regex string to match queries to apply coloring to.
// - `singleSeriesAggregateFunction` - (Required) Function to aggregate one series into one single value.
// - `multipleSeriesAggregateFunction` - (Required) Function to aggregate the aggregate values of multiple time series
//   into one single value.
// - `colorThreshold` - (Block List, Optional) A list of color threshold object.
//     - `color` - (Required) Color for the threshold.
//     - `min` - (Optional) Absolute inclusive threshold to color by.
//     - `max` - (Optional) Absolute exclusive threshold to color by.
//
// ### Schema for `linkedDashboard`
// - `id` - (Required) Identifier of the linked dashboard.
// - `relativePath` - (Optional) Relative path of the linked dashboard to the dashboard of the linking panel.
// - `includeTimeRange` - (Optional) Include time range from the current dashboard to the linked dashboard. _Defaults to true_.
// - `includeVariables` - (Optional) Include variables from the current dashboard to the linked dashboard. _Defaults to true_.
//
// ### Schema for `layout`
// - `grid` - (Block List, Max: 1, Optional) Panel layout for the dashboard.
//
// ### Schema for `grid`
// - `layoutStructure` - (Block List, Required) Layout structure for the panels in the dashboard.
//     - `key` - (Required) The identifier of the panel that this structure applies to. It's same as `panel.key`.
//     - `structure` - (Required) The structure of the panel.
//
// ### Schema for `variable`
// - `name` - (Required) Name of the variable. The variable name is case-insensitive.
// - `displayName` - (Optional) Display name of the variable shown in the UI. If this field is empty, the name field will be used.
// - `defaultValue` - (Optional) Default value of the variable.
// - `sourceDefinition` - (Required) Source definition for variable values. See
//   sourceDefinition schema for details.
// - `allowMultiSelect` - (Optional) Allow multiple selections in the values dropdown.
// - `includeAllOption` - (Optional) Include an "All" option at the top of the variable's values dropdown. _Defaults to true._
// - `hideFromUi` - (Optional) Hide the variable in the dashboard UI.
//
// ### Schema for `sourceDefinition`
// - `logQueryVariableSourceDefinition` - (Optional) Variable values from a log query.
//     - `query` - (Required) A log query.
//     - `field` - (Required) A field in log query to populate the variable values
// - `metadataVariableSourceDefinition` - (Optional) Variable values from a metric query.
//     - `filter` - (Required) Filter to search the catalog.
//     - `key` - (Required) Return the values for this given key.
// - `csvVariableSourceDefinition` - (Optional) Variable values in csv format.
//     - `values` - (Required) A comma separated values for the variable.
//
// ## Import
//
// Dashboard can be imported using the dashboard id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/dashboard:Dashboard example-dashboard q0IKwAK5t2qRI4sgiANwnS87k5S4twN2sCpTuZFSsz6ZmbENPsG7PnpqZygc
// ```
//
//  [1]https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New)
type Dashboard struct {
	pulumi.CustomResourceState

	ColoringRules    DashboardColoringRuleArrayOutput   `pulumi:"coloringRules"`
	Description      pulumi.StringPtrOutput             `pulumi:"description"`
	FolderId         pulumi.StringPtrOutput             `pulumi:"folderId"`
	Layout           DashboardLayoutPtrOutput           `pulumi:"layout"`
	Panels           DashboardPanelArrayOutput          `pulumi:"panels"`
	RefreshInterval  pulumi.IntPtrOutput                `pulumi:"refreshInterval"`
	Theme            pulumi.StringPtrOutput             `pulumi:"theme"`
	TimeRange        DashboardTimeRangeOutput           `pulumi:"timeRange"`
	Title            pulumi.StringOutput                `pulumi:"title"`
	TopologyLabelMap DashboardTopologyLabelMapPtrOutput `pulumi:"topologyLabelMap"`
	Variables        DashboardVariableArrayOutput       `pulumi:"variables"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TimeRange == nil {
		return nil, errors.New("invalid value for required argument 'TimeRange'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	var resource Dashboard
	err := ctx.RegisterResource("sumologic:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("sumologic:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	ColoringRules    []DashboardColoringRule    `pulumi:"coloringRules"`
	Description      *string                    `pulumi:"description"`
	FolderId         *string                    `pulumi:"folderId"`
	Layout           *DashboardLayout           `pulumi:"layout"`
	Panels           []DashboardPanel           `pulumi:"panels"`
	RefreshInterval  *int                       `pulumi:"refreshInterval"`
	Theme            *string                    `pulumi:"theme"`
	TimeRange        *DashboardTimeRange        `pulumi:"timeRange"`
	Title            *string                    `pulumi:"title"`
	TopologyLabelMap *DashboardTopologyLabelMap `pulumi:"topologyLabelMap"`
	Variables        []DashboardVariable        `pulumi:"variables"`
}

type DashboardState struct {
	ColoringRules    DashboardColoringRuleArrayInput
	Description      pulumi.StringPtrInput
	FolderId         pulumi.StringPtrInput
	Layout           DashboardLayoutPtrInput
	Panels           DashboardPanelArrayInput
	RefreshInterval  pulumi.IntPtrInput
	Theme            pulumi.StringPtrInput
	TimeRange        DashboardTimeRangePtrInput
	Title            pulumi.StringPtrInput
	TopologyLabelMap DashboardTopologyLabelMapPtrInput
	Variables        DashboardVariableArrayInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	ColoringRules    []DashboardColoringRule    `pulumi:"coloringRules"`
	Description      *string                    `pulumi:"description"`
	FolderId         *string                    `pulumi:"folderId"`
	Layout           *DashboardLayout           `pulumi:"layout"`
	Panels           []DashboardPanel           `pulumi:"panels"`
	RefreshInterval  *int                       `pulumi:"refreshInterval"`
	Theme            *string                    `pulumi:"theme"`
	TimeRange        DashboardTimeRange         `pulumi:"timeRange"`
	Title            string                     `pulumi:"title"`
	TopologyLabelMap *DashboardTopologyLabelMap `pulumi:"topologyLabelMap"`
	Variables        []DashboardVariable        `pulumi:"variables"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	ColoringRules    DashboardColoringRuleArrayInput
	Description      pulumi.StringPtrInput
	FolderId         pulumi.StringPtrInput
	Layout           DashboardLayoutPtrInput
	Panels           DashboardPanelArrayInput
	RefreshInterval  pulumi.IntPtrInput
	Theme            pulumi.StringPtrInput
	TimeRange        DashboardTimeRangeInput
	Title            pulumi.StringInput
	TopologyLabelMap DashboardTopologyLabelMapPtrInput
	Variables        DashboardVariableArrayInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil))
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

func (i *Dashboard) ToDashboardPtrOutput() DashboardPtrOutput {
	return i.ToDashboardPtrOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardPtrOutputWithContext(ctx context.Context) DashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPtrOutput)
}

type DashboardPtrInput interface {
	pulumi.Input

	ToDashboardPtrOutput() DashboardPtrOutput
	ToDashboardPtrOutputWithContext(ctx context.Context) DashboardPtrOutput
}

type dashboardPtrType DashboardArgs

func (*dashboardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil))
}

func (i *dashboardPtrType) ToDashboardPtrOutput() DashboardPtrOutput {
	return i.ToDashboardPtrOutputWithContext(context.Background())
}

func (i *dashboardPtrType) ToDashboardPtrOutputWithContext(ctx context.Context) DashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPtrOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//          DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Dashboard)(nil))
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//          DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Dashboard)(nil))
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct {
	*pulumi.OutputState
}

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil))
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardPtrOutput() DashboardPtrOutput {
	return o.ToDashboardPtrOutputWithContext(context.Background())
}

func (o DashboardOutput) ToDashboardPtrOutputWithContext(ctx context.Context) DashboardPtrOutput {
	return o.ApplyT(func(v Dashboard) *Dashboard {
		return &v
	}).(DashboardPtrOutput)
}

type DashboardPtrOutput struct {
	*pulumi.OutputState
}

func (DashboardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil))
}

func (o DashboardPtrOutput) ToDashboardPtrOutput() DashboardPtrOutput {
	return o
}

func (o DashboardPtrOutput) ToDashboardPtrOutputWithContext(ctx context.Context) DashboardPtrOutput {
	return o
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dashboard)(nil))
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dashboard {
		return vs[0].([]Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Dashboard)(nil))
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Dashboard {
		return vs[0].(map[string]Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardPtrOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
