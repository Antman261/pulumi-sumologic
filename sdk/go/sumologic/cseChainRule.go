// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE [Chain Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/07_Write_a_Chain_Rule).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseChainRule(ctx, "chainRule", &sumologic.CseChainRuleArgs{
// 			Description: pulumi.String("Signal description"),
// 			Enabled:     pulumi.Bool(true),
// 			EntitySelectors: sumologic.CseChainRuleEntitySelectorArray{
// 				&sumologic.CseChainRuleEntitySelectorArgs{
// 					EntityType: pulumi.String("_username"),
// 					Expression: pulumi.String("user_username"),
// 				},
// 			},
// 			ExpressionsAndLimits: sumologic.CseChainRuleExpressionsAndLimitArray{
// 				&sumologic.CseChainRuleExpressionsAndLimitArgs{
// 					Expression: pulumi.String("success = false"),
// 					Limit:      pulumi.Int(5),
// 				},
// 				&sumologic.CseChainRuleExpressionsAndLimitArgs{
// 					Expression: pulumi.String("success = true"),
// 					Limit:      pulumi.Int(1),
// 				},
// 			},
// 			GroupByFields:     []interface{}{},
// 			IsPrototype:       pulumi.Bool(false),
// 			Ordered:           pulumi.Bool(true),
// 			Severity:          pulumi.Int(5),
// 			SummaryExpression: pulumi.String("Signal summary"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("_mitreAttackTactic:TA0009"),
// 			},
// 			WindowSize: pulumi.String("T30M"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `description` - (Required) The description of the generated Signals
// - `enabled` - (Required) Whether the rule should generate Signals
// - `entitySelectors` - (Required) The entities to generate Signals on
//   + `entityType` - (Required) The type of the entity to generate the Signal on.
//   + `expression` - (Required) The expression or field name to generate the Signal on.
// - `expressionsAndLimits` - (Required) The list of expressions and associated limits to make up the conditions of the chain rule
//   + `expression` - (Required) The expression for which records to match on
//   + `limit` - (Required) How many times this expression must match for the Signal to fire
// - `groupByFields` - (Optional) A list of fields to group records by
// - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
// - `ordered` - (Optional; defaults to false) Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule
// - `name` - (Required) The name of the Rule and the generated SignalS
// - `severity` - (Required) The severity of the generated Signals
// - `summaryExpression` - (Optional) The summary of the generated Signals
// - `tags` - (Required) The tags of the generated Signals
// - `windowSize` - (Required) How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
//
// The following attributes are exported:
//
// - `id` - The internal ID of the chain rule.
//
// ## Import
//
// Chain Rules can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseChainRule:CseChainRule chain_rule id
// ```
type CseChainRule struct {
	pulumi.CustomResourceState

	Description          pulumi.StringOutput                        `pulumi:"description"`
	Enabled              pulumi.BoolOutput                          `pulumi:"enabled"`
	EntitySelectors      CseChainRuleEntitySelectorArrayOutput      `pulumi:"entitySelectors"`
	ExpressionsAndLimits CseChainRuleExpressionsAndLimitArrayOutput `pulumi:"expressionsAndLimits"`
	GroupByFields        pulumi.StringArrayOutput                   `pulumi:"groupByFields"`
	IsPrototype          pulumi.BoolPtrOutput                       `pulumi:"isPrototype"`
	Name                 pulumi.StringOutput                        `pulumi:"name"`
	Ordered              pulumi.BoolPtrOutput                       `pulumi:"ordered"`
	Severity             pulumi.IntOutput                           `pulumi:"severity"`
	SummaryExpression    pulumi.StringPtrOutput                     `pulumi:"summaryExpression"`
	Tags                 pulumi.StringArrayOutput                   `pulumi:"tags"`
	WindowSize           pulumi.StringOutput                        `pulumi:"windowSize"`
}

// NewCseChainRule registers a new resource with the given unique name, arguments, and options.
func NewCseChainRule(ctx *pulumi.Context,
	name string, args *CseChainRuleArgs, opts ...pulumi.ResourceOption) (*CseChainRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EntitySelectors == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelectors'")
	}
	if args.ExpressionsAndLimits == nil {
		return nil, errors.New("invalid value for required argument 'ExpressionsAndLimits'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	if args.WindowSize == nil {
		return nil, errors.New("invalid value for required argument 'WindowSize'")
	}
	var resource CseChainRule
	err := ctx.RegisterResource("sumologic:index/cseChainRule:CseChainRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseChainRule gets an existing CseChainRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseChainRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseChainRuleState, opts ...pulumi.ResourceOption) (*CseChainRule, error) {
	var resource CseChainRule
	err := ctx.ReadResource("sumologic:index/cseChainRule:CseChainRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseChainRule resources.
type cseChainRuleState struct {
	Description          *string                           `pulumi:"description"`
	Enabled              *bool                             `pulumi:"enabled"`
	EntitySelectors      []CseChainRuleEntitySelector      `pulumi:"entitySelectors"`
	ExpressionsAndLimits []CseChainRuleExpressionsAndLimit `pulumi:"expressionsAndLimits"`
	GroupByFields        []string                          `pulumi:"groupByFields"`
	IsPrototype          *bool                             `pulumi:"isPrototype"`
	Name                 *string                           `pulumi:"name"`
	Ordered              *bool                             `pulumi:"ordered"`
	Severity             *int                              `pulumi:"severity"`
	SummaryExpression    *string                           `pulumi:"summaryExpression"`
	Tags                 []string                          `pulumi:"tags"`
	WindowSize           *string                           `pulumi:"windowSize"`
}

type CseChainRuleState struct {
	Description          pulumi.StringPtrInput
	Enabled              pulumi.BoolPtrInput
	EntitySelectors      CseChainRuleEntitySelectorArrayInput
	ExpressionsAndLimits CseChainRuleExpressionsAndLimitArrayInput
	GroupByFields        pulumi.StringArrayInput
	IsPrototype          pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	Ordered              pulumi.BoolPtrInput
	Severity             pulumi.IntPtrInput
	SummaryExpression    pulumi.StringPtrInput
	Tags                 pulumi.StringArrayInput
	WindowSize           pulumi.StringPtrInput
}

func (CseChainRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseChainRuleState)(nil)).Elem()
}

type cseChainRuleArgs struct {
	Description          string                            `pulumi:"description"`
	Enabled              bool                              `pulumi:"enabled"`
	EntitySelectors      []CseChainRuleEntitySelector      `pulumi:"entitySelectors"`
	ExpressionsAndLimits []CseChainRuleExpressionsAndLimit `pulumi:"expressionsAndLimits"`
	GroupByFields        []string                          `pulumi:"groupByFields"`
	IsPrototype          *bool                             `pulumi:"isPrototype"`
	Name                 *string                           `pulumi:"name"`
	Ordered              *bool                             `pulumi:"ordered"`
	Severity             int                               `pulumi:"severity"`
	SummaryExpression    *string                           `pulumi:"summaryExpression"`
	Tags                 []string                          `pulumi:"tags"`
	WindowSize           string                            `pulumi:"windowSize"`
}

// The set of arguments for constructing a CseChainRule resource.
type CseChainRuleArgs struct {
	Description          pulumi.StringInput
	Enabled              pulumi.BoolInput
	EntitySelectors      CseChainRuleEntitySelectorArrayInput
	ExpressionsAndLimits CseChainRuleExpressionsAndLimitArrayInput
	GroupByFields        pulumi.StringArrayInput
	IsPrototype          pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	Ordered              pulumi.BoolPtrInput
	Severity             pulumi.IntInput
	SummaryExpression    pulumi.StringPtrInput
	Tags                 pulumi.StringArrayInput
	WindowSize           pulumi.StringInput
}

func (CseChainRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseChainRuleArgs)(nil)).Elem()
}

type CseChainRuleInput interface {
	pulumi.Input

	ToCseChainRuleOutput() CseChainRuleOutput
	ToCseChainRuleOutputWithContext(ctx context.Context) CseChainRuleOutput
}

func (*CseChainRule) ElementType() reflect.Type {
	return reflect.TypeOf((*CseChainRule)(nil))
}

func (i *CseChainRule) ToCseChainRuleOutput() CseChainRuleOutput {
	return i.ToCseChainRuleOutputWithContext(context.Background())
}

func (i *CseChainRule) ToCseChainRuleOutputWithContext(ctx context.Context) CseChainRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseChainRuleOutput)
}

func (i *CseChainRule) ToCseChainRulePtrOutput() CseChainRulePtrOutput {
	return i.ToCseChainRulePtrOutputWithContext(context.Background())
}

func (i *CseChainRule) ToCseChainRulePtrOutputWithContext(ctx context.Context) CseChainRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseChainRulePtrOutput)
}

type CseChainRulePtrInput interface {
	pulumi.Input

	ToCseChainRulePtrOutput() CseChainRulePtrOutput
	ToCseChainRulePtrOutputWithContext(ctx context.Context) CseChainRulePtrOutput
}

type cseChainRulePtrType CseChainRuleArgs

func (*cseChainRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CseChainRule)(nil))
}

func (i *cseChainRulePtrType) ToCseChainRulePtrOutput() CseChainRulePtrOutput {
	return i.ToCseChainRulePtrOutputWithContext(context.Background())
}

func (i *cseChainRulePtrType) ToCseChainRulePtrOutputWithContext(ctx context.Context) CseChainRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseChainRulePtrOutput)
}

// CseChainRuleArrayInput is an input type that accepts CseChainRuleArray and CseChainRuleArrayOutput values.
// You can construct a concrete instance of `CseChainRuleArrayInput` via:
//
//          CseChainRuleArray{ CseChainRuleArgs{...} }
type CseChainRuleArrayInput interface {
	pulumi.Input

	ToCseChainRuleArrayOutput() CseChainRuleArrayOutput
	ToCseChainRuleArrayOutputWithContext(context.Context) CseChainRuleArrayOutput
}

type CseChainRuleArray []CseChainRuleInput

func (CseChainRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CseChainRule)(nil))
}

func (i CseChainRuleArray) ToCseChainRuleArrayOutput() CseChainRuleArrayOutput {
	return i.ToCseChainRuleArrayOutputWithContext(context.Background())
}

func (i CseChainRuleArray) ToCseChainRuleArrayOutputWithContext(ctx context.Context) CseChainRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseChainRuleArrayOutput)
}

// CseChainRuleMapInput is an input type that accepts CseChainRuleMap and CseChainRuleMapOutput values.
// You can construct a concrete instance of `CseChainRuleMapInput` via:
//
//          CseChainRuleMap{ "key": CseChainRuleArgs{...} }
type CseChainRuleMapInput interface {
	pulumi.Input

	ToCseChainRuleMapOutput() CseChainRuleMapOutput
	ToCseChainRuleMapOutputWithContext(context.Context) CseChainRuleMapOutput
}

type CseChainRuleMap map[string]CseChainRuleInput

func (CseChainRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CseChainRule)(nil))
}

func (i CseChainRuleMap) ToCseChainRuleMapOutput() CseChainRuleMapOutput {
	return i.ToCseChainRuleMapOutputWithContext(context.Background())
}

func (i CseChainRuleMap) ToCseChainRuleMapOutputWithContext(ctx context.Context) CseChainRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseChainRuleMapOutput)
}

type CseChainRuleOutput struct {
	*pulumi.OutputState
}

func (CseChainRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CseChainRule)(nil))
}

func (o CseChainRuleOutput) ToCseChainRuleOutput() CseChainRuleOutput {
	return o
}

func (o CseChainRuleOutput) ToCseChainRuleOutputWithContext(ctx context.Context) CseChainRuleOutput {
	return o
}

func (o CseChainRuleOutput) ToCseChainRulePtrOutput() CseChainRulePtrOutput {
	return o.ToCseChainRulePtrOutputWithContext(context.Background())
}

func (o CseChainRuleOutput) ToCseChainRulePtrOutputWithContext(ctx context.Context) CseChainRulePtrOutput {
	return o.ApplyT(func(v CseChainRule) *CseChainRule {
		return &v
	}).(CseChainRulePtrOutput)
}

type CseChainRulePtrOutput struct {
	*pulumi.OutputState
}

func (CseChainRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseChainRule)(nil))
}

func (o CseChainRulePtrOutput) ToCseChainRulePtrOutput() CseChainRulePtrOutput {
	return o
}

func (o CseChainRulePtrOutput) ToCseChainRulePtrOutputWithContext(ctx context.Context) CseChainRulePtrOutput {
	return o
}

type CseChainRuleArrayOutput struct{ *pulumi.OutputState }

func (CseChainRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CseChainRule)(nil))
}

func (o CseChainRuleArrayOutput) ToCseChainRuleArrayOutput() CseChainRuleArrayOutput {
	return o
}

func (o CseChainRuleArrayOutput) ToCseChainRuleArrayOutputWithContext(ctx context.Context) CseChainRuleArrayOutput {
	return o
}

func (o CseChainRuleArrayOutput) Index(i pulumi.IntInput) CseChainRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CseChainRule {
		return vs[0].([]CseChainRule)[vs[1].(int)]
	}).(CseChainRuleOutput)
}

type CseChainRuleMapOutput struct{ *pulumi.OutputState }

func (CseChainRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CseChainRule)(nil))
}

func (o CseChainRuleMapOutput) ToCseChainRuleMapOutput() CseChainRuleMapOutput {
	return o
}

func (o CseChainRuleMapOutput) ToCseChainRuleMapOutputWithContext(ctx context.Context) CseChainRuleMapOutput {
	return o
}

func (o CseChainRuleMapOutput) MapIndex(k pulumi.StringInput) CseChainRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CseChainRule {
		return vs[0].(map[string]CseChainRule)[vs[1].(string)]
	}).(CseChainRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(CseChainRuleOutput{})
	pulumi.RegisterOutputType(CseChainRulePtrOutput{})
	pulumi.RegisterOutputType(CseChainRuleArrayOutput{})
	pulumi.RegisterOutputType(CseChainRuleMapOutput{})
}
