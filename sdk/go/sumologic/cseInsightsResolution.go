// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic CSE Insights Resolution. When an insight gets closed, a resolution indicates why it got closed.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseInsightsResolution(ctx, "insightsResolution", &sumologic.CseInsightsResolutionArgs{
// 			Description: pulumi.String("New description"),
// 			Parent:      pulumi.String("No Action"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// - `name` - (Required) The name of the insights resolution.
// - `description` - (Required) The description of the insights resolution.
// - `parent` - (Required) The name of the built-in parent insights resolution. Supported values: "Resolved", "False Positive", "No Action", "Duplicate"
//
// The following attributes are exported:
//
// - `id` - The internal ID of the insights resolution.
//
// ## Import
//
// Insights Resolution can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseInsightsResolution:CseInsightsResolution insights_resolution id
// ```
type CseInsightsResolution struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Parent      pulumi.StringPtrOutput `pulumi:"parent"`
}

// NewCseInsightsResolution registers a new resource with the given unique name, arguments, and options.
func NewCseInsightsResolution(ctx *pulumi.Context,
	name string, args *CseInsightsResolutionArgs, opts ...pulumi.ResourceOption) (*CseInsightsResolution, error) {
	if args == nil {
		args = &CseInsightsResolutionArgs{}
	}

	var resource CseInsightsResolution
	err := ctx.RegisterResource("sumologic:index/cseInsightsResolution:CseInsightsResolution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseInsightsResolution gets an existing CseInsightsResolution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseInsightsResolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseInsightsResolutionState, opts ...pulumi.ResourceOption) (*CseInsightsResolution, error) {
	var resource CseInsightsResolution
	err := ctx.ReadResource("sumologic:index/cseInsightsResolution:CseInsightsResolution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseInsightsResolution resources.
type cseInsightsResolutionState struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Parent      *string `pulumi:"parent"`
}

type CseInsightsResolutionState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Parent      pulumi.StringPtrInput
}

func (CseInsightsResolutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseInsightsResolutionState)(nil)).Elem()
}

type cseInsightsResolutionArgs struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Parent      *string `pulumi:"parent"`
}

// The set of arguments for constructing a CseInsightsResolution resource.
type CseInsightsResolutionArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Parent      pulumi.StringPtrInput
}

func (CseInsightsResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseInsightsResolutionArgs)(nil)).Elem()
}

type CseInsightsResolutionInput interface {
	pulumi.Input

	ToCseInsightsResolutionOutput() CseInsightsResolutionOutput
	ToCseInsightsResolutionOutputWithContext(ctx context.Context) CseInsightsResolutionOutput
}

func (*CseInsightsResolution) ElementType() reflect.Type {
	return reflect.TypeOf((*CseInsightsResolution)(nil))
}

func (i *CseInsightsResolution) ToCseInsightsResolutionOutput() CseInsightsResolutionOutput {
	return i.ToCseInsightsResolutionOutputWithContext(context.Background())
}

func (i *CseInsightsResolution) ToCseInsightsResolutionOutputWithContext(ctx context.Context) CseInsightsResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsResolutionOutput)
}

func (i *CseInsightsResolution) ToCseInsightsResolutionPtrOutput() CseInsightsResolutionPtrOutput {
	return i.ToCseInsightsResolutionPtrOutputWithContext(context.Background())
}

func (i *CseInsightsResolution) ToCseInsightsResolutionPtrOutputWithContext(ctx context.Context) CseInsightsResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsResolutionPtrOutput)
}

type CseInsightsResolutionPtrInput interface {
	pulumi.Input

	ToCseInsightsResolutionPtrOutput() CseInsightsResolutionPtrOutput
	ToCseInsightsResolutionPtrOutputWithContext(ctx context.Context) CseInsightsResolutionPtrOutput
}

type cseInsightsResolutionPtrType CseInsightsResolutionArgs

func (*cseInsightsResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CseInsightsResolution)(nil))
}

func (i *cseInsightsResolutionPtrType) ToCseInsightsResolutionPtrOutput() CseInsightsResolutionPtrOutput {
	return i.ToCseInsightsResolutionPtrOutputWithContext(context.Background())
}

func (i *cseInsightsResolutionPtrType) ToCseInsightsResolutionPtrOutputWithContext(ctx context.Context) CseInsightsResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsResolutionPtrOutput)
}

// CseInsightsResolutionArrayInput is an input type that accepts CseInsightsResolutionArray and CseInsightsResolutionArrayOutput values.
// You can construct a concrete instance of `CseInsightsResolutionArrayInput` via:
//
//          CseInsightsResolutionArray{ CseInsightsResolutionArgs{...} }
type CseInsightsResolutionArrayInput interface {
	pulumi.Input

	ToCseInsightsResolutionArrayOutput() CseInsightsResolutionArrayOutput
	ToCseInsightsResolutionArrayOutputWithContext(context.Context) CseInsightsResolutionArrayOutput
}

type CseInsightsResolutionArray []CseInsightsResolutionInput

func (CseInsightsResolutionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CseInsightsResolution)(nil))
}

func (i CseInsightsResolutionArray) ToCseInsightsResolutionArrayOutput() CseInsightsResolutionArrayOutput {
	return i.ToCseInsightsResolutionArrayOutputWithContext(context.Background())
}

func (i CseInsightsResolutionArray) ToCseInsightsResolutionArrayOutputWithContext(ctx context.Context) CseInsightsResolutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsResolutionArrayOutput)
}

// CseInsightsResolutionMapInput is an input type that accepts CseInsightsResolutionMap and CseInsightsResolutionMapOutput values.
// You can construct a concrete instance of `CseInsightsResolutionMapInput` via:
//
//          CseInsightsResolutionMap{ "key": CseInsightsResolutionArgs{...} }
type CseInsightsResolutionMapInput interface {
	pulumi.Input

	ToCseInsightsResolutionMapOutput() CseInsightsResolutionMapOutput
	ToCseInsightsResolutionMapOutputWithContext(context.Context) CseInsightsResolutionMapOutput
}

type CseInsightsResolutionMap map[string]CseInsightsResolutionInput

func (CseInsightsResolutionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CseInsightsResolution)(nil))
}

func (i CseInsightsResolutionMap) ToCseInsightsResolutionMapOutput() CseInsightsResolutionMapOutput {
	return i.ToCseInsightsResolutionMapOutputWithContext(context.Background())
}

func (i CseInsightsResolutionMap) ToCseInsightsResolutionMapOutputWithContext(ctx context.Context) CseInsightsResolutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsResolutionMapOutput)
}

type CseInsightsResolutionOutput struct {
	*pulumi.OutputState
}

func (CseInsightsResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CseInsightsResolution)(nil))
}

func (o CseInsightsResolutionOutput) ToCseInsightsResolutionOutput() CseInsightsResolutionOutput {
	return o
}

func (o CseInsightsResolutionOutput) ToCseInsightsResolutionOutputWithContext(ctx context.Context) CseInsightsResolutionOutput {
	return o
}

func (o CseInsightsResolutionOutput) ToCseInsightsResolutionPtrOutput() CseInsightsResolutionPtrOutput {
	return o.ToCseInsightsResolutionPtrOutputWithContext(context.Background())
}

func (o CseInsightsResolutionOutput) ToCseInsightsResolutionPtrOutputWithContext(ctx context.Context) CseInsightsResolutionPtrOutput {
	return o.ApplyT(func(v CseInsightsResolution) *CseInsightsResolution {
		return &v
	}).(CseInsightsResolutionPtrOutput)
}

type CseInsightsResolutionPtrOutput struct {
	*pulumi.OutputState
}

func (CseInsightsResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseInsightsResolution)(nil))
}

func (o CseInsightsResolutionPtrOutput) ToCseInsightsResolutionPtrOutput() CseInsightsResolutionPtrOutput {
	return o
}

func (o CseInsightsResolutionPtrOutput) ToCseInsightsResolutionPtrOutputWithContext(ctx context.Context) CseInsightsResolutionPtrOutput {
	return o
}

type CseInsightsResolutionArrayOutput struct{ *pulumi.OutputState }

func (CseInsightsResolutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CseInsightsResolution)(nil))
}

func (o CseInsightsResolutionArrayOutput) ToCseInsightsResolutionArrayOutput() CseInsightsResolutionArrayOutput {
	return o
}

func (o CseInsightsResolutionArrayOutput) ToCseInsightsResolutionArrayOutputWithContext(ctx context.Context) CseInsightsResolutionArrayOutput {
	return o
}

func (o CseInsightsResolutionArrayOutput) Index(i pulumi.IntInput) CseInsightsResolutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CseInsightsResolution {
		return vs[0].([]CseInsightsResolution)[vs[1].(int)]
	}).(CseInsightsResolutionOutput)
}

type CseInsightsResolutionMapOutput struct{ *pulumi.OutputState }

func (CseInsightsResolutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CseInsightsResolution)(nil))
}

func (o CseInsightsResolutionMapOutput) ToCseInsightsResolutionMapOutput() CseInsightsResolutionMapOutput {
	return o
}

func (o CseInsightsResolutionMapOutput) ToCseInsightsResolutionMapOutputWithContext(ctx context.Context) CseInsightsResolutionMapOutput {
	return o
}

func (o CseInsightsResolutionMapOutput) MapIndex(k pulumi.StringInput) CseInsightsResolutionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CseInsightsResolution {
		return vs[0].(map[string]CseInsightsResolution)[vs[1].(string)]
	}).(CseInsightsResolutionOutput)
}

func init() {
	pulumi.RegisterOutputType(CseInsightsResolutionOutput{})
	pulumi.RegisterOutputType(CseInsightsResolutionPtrOutput{})
	pulumi.RegisterOutputType(CseInsightsResolutionArrayOutput{})
	pulumi.RegisterOutputType(CseInsightsResolutionMapOutput{})
}
