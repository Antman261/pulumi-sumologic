// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Cloud-to-Cloud source][1].
//
// ## Supported Integrations
//
// List of available integrations along with their corresponding `JSON` templates is present [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations)
//
// __IMPORTANT:__ The API credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"name":       "okta source",
// 			"domain":     "dev-xxx-admin.okta.com",
// 			"collectAll": true,
// 			"apiKey":     "xxx",
// 			"fields": map[string]interface{}{
// 				"_siemForward": false,
// 			},
// 			"pollingInterval": 30,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err = sumologic.NewCloudToCloudSource(ctx, "oktaSource", &sumologic.CloudToCloudSourceArgs{
// 			CollectorId: collector.ID(),
// 			SchemaRef: pulumi.StringMap{
// 				"type": pulumi.String("Okta"),
// 			},
// 			Config: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
//  - `config` - (Required) This is a JSON object which contains the configuration parameters for the Source.
//  - `schemaRef` - (Required) Source schema details.
//      + `type` - (Required) Schema type for the Cloud-to-Cloud source.
//
// ## Import
//
// Cloud-to-Cloud sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test 100000001/100000001
// ```
//
//  Cloud-to-Cloud sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations
type CloudToCloudSource struct {
	pulumi.CustomResourceState

	CollectorId pulumi.IntOutput       `pulumi:"collectorId"`
	Config      pulumi.StringOutput    `pulumi:"config"`
	SchemaRef   pulumi.StringMapOutput `pulumi:"schemaRef"`
}

// NewCloudToCloudSource registers a new resource with the given unique name, arguments, and options.
func NewCloudToCloudSource(ctx *pulumi.Context,
	name string, args *CloudToCloudSourceArgs, opts ...pulumi.ResourceOption) (*CloudToCloudSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.SchemaRef == nil {
		return nil, errors.New("invalid value for required argument 'SchemaRef'")
	}
	var resource CloudToCloudSource
	err := ctx.RegisterResource("sumologic:index/cloudToCloudSource:CloudToCloudSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudToCloudSource gets an existing CloudToCloudSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudToCloudSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudToCloudSourceState, opts ...pulumi.ResourceOption) (*CloudToCloudSource, error) {
	var resource CloudToCloudSource
	err := ctx.ReadResource("sumologic:index/cloudToCloudSource:CloudToCloudSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudToCloudSource resources.
type cloudToCloudSourceState struct {
	CollectorId *int              `pulumi:"collectorId"`
	Config      *string           `pulumi:"config"`
	SchemaRef   map[string]string `pulumi:"schemaRef"`
}

type CloudToCloudSourceState struct {
	CollectorId pulumi.IntPtrInput
	Config      pulumi.StringPtrInput
	SchemaRef   pulumi.StringMapInput
}

func (CloudToCloudSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudToCloudSourceState)(nil)).Elem()
}

type cloudToCloudSourceArgs struct {
	CollectorId int               `pulumi:"collectorId"`
	Config      string            `pulumi:"config"`
	SchemaRef   map[string]string `pulumi:"schemaRef"`
}

// The set of arguments for constructing a CloudToCloudSource resource.
type CloudToCloudSourceArgs struct {
	CollectorId pulumi.IntInput
	Config      pulumi.StringInput
	SchemaRef   pulumi.StringMapInput
}

func (CloudToCloudSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudToCloudSourceArgs)(nil)).Elem()
}

type CloudToCloudSourceInput interface {
	pulumi.Input

	ToCloudToCloudSourceOutput() CloudToCloudSourceOutput
	ToCloudToCloudSourceOutputWithContext(ctx context.Context) CloudToCloudSourceOutput
}

func (*CloudToCloudSource) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudToCloudSource)(nil))
}

func (i *CloudToCloudSource) ToCloudToCloudSourceOutput() CloudToCloudSourceOutput {
	return i.ToCloudToCloudSourceOutputWithContext(context.Background())
}

func (i *CloudToCloudSource) ToCloudToCloudSourceOutputWithContext(ctx context.Context) CloudToCloudSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudToCloudSourceOutput)
}

func (i *CloudToCloudSource) ToCloudToCloudSourcePtrOutput() CloudToCloudSourcePtrOutput {
	return i.ToCloudToCloudSourcePtrOutputWithContext(context.Background())
}

func (i *CloudToCloudSource) ToCloudToCloudSourcePtrOutputWithContext(ctx context.Context) CloudToCloudSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudToCloudSourcePtrOutput)
}

type CloudToCloudSourcePtrInput interface {
	pulumi.Input

	ToCloudToCloudSourcePtrOutput() CloudToCloudSourcePtrOutput
	ToCloudToCloudSourcePtrOutputWithContext(ctx context.Context) CloudToCloudSourcePtrOutput
}

type cloudToCloudSourcePtrType CloudToCloudSourceArgs

func (*cloudToCloudSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudToCloudSource)(nil))
}

func (i *cloudToCloudSourcePtrType) ToCloudToCloudSourcePtrOutput() CloudToCloudSourcePtrOutput {
	return i.ToCloudToCloudSourcePtrOutputWithContext(context.Background())
}

func (i *cloudToCloudSourcePtrType) ToCloudToCloudSourcePtrOutputWithContext(ctx context.Context) CloudToCloudSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudToCloudSourcePtrOutput)
}

// CloudToCloudSourceArrayInput is an input type that accepts CloudToCloudSourceArray and CloudToCloudSourceArrayOutput values.
// You can construct a concrete instance of `CloudToCloudSourceArrayInput` via:
//
//          CloudToCloudSourceArray{ CloudToCloudSourceArgs{...} }
type CloudToCloudSourceArrayInput interface {
	pulumi.Input

	ToCloudToCloudSourceArrayOutput() CloudToCloudSourceArrayOutput
	ToCloudToCloudSourceArrayOutputWithContext(context.Context) CloudToCloudSourceArrayOutput
}

type CloudToCloudSourceArray []CloudToCloudSourceInput

func (CloudToCloudSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CloudToCloudSource)(nil))
}

func (i CloudToCloudSourceArray) ToCloudToCloudSourceArrayOutput() CloudToCloudSourceArrayOutput {
	return i.ToCloudToCloudSourceArrayOutputWithContext(context.Background())
}

func (i CloudToCloudSourceArray) ToCloudToCloudSourceArrayOutputWithContext(ctx context.Context) CloudToCloudSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudToCloudSourceArrayOutput)
}

// CloudToCloudSourceMapInput is an input type that accepts CloudToCloudSourceMap and CloudToCloudSourceMapOutput values.
// You can construct a concrete instance of `CloudToCloudSourceMapInput` via:
//
//          CloudToCloudSourceMap{ "key": CloudToCloudSourceArgs{...} }
type CloudToCloudSourceMapInput interface {
	pulumi.Input

	ToCloudToCloudSourceMapOutput() CloudToCloudSourceMapOutput
	ToCloudToCloudSourceMapOutputWithContext(context.Context) CloudToCloudSourceMapOutput
}

type CloudToCloudSourceMap map[string]CloudToCloudSourceInput

func (CloudToCloudSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CloudToCloudSource)(nil))
}

func (i CloudToCloudSourceMap) ToCloudToCloudSourceMapOutput() CloudToCloudSourceMapOutput {
	return i.ToCloudToCloudSourceMapOutputWithContext(context.Background())
}

func (i CloudToCloudSourceMap) ToCloudToCloudSourceMapOutputWithContext(ctx context.Context) CloudToCloudSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudToCloudSourceMapOutput)
}

type CloudToCloudSourceOutput struct {
	*pulumi.OutputState
}

func (CloudToCloudSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudToCloudSource)(nil))
}

func (o CloudToCloudSourceOutput) ToCloudToCloudSourceOutput() CloudToCloudSourceOutput {
	return o
}

func (o CloudToCloudSourceOutput) ToCloudToCloudSourceOutputWithContext(ctx context.Context) CloudToCloudSourceOutput {
	return o
}

func (o CloudToCloudSourceOutput) ToCloudToCloudSourcePtrOutput() CloudToCloudSourcePtrOutput {
	return o.ToCloudToCloudSourcePtrOutputWithContext(context.Background())
}

func (o CloudToCloudSourceOutput) ToCloudToCloudSourcePtrOutputWithContext(ctx context.Context) CloudToCloudSourcePtrOutput {
	return o.ApplyT(func(v CloudToCloudSource) *CloudToCloudSource {
		return &v
	}).(CloudToCloudSourcePtrOutput)
}

type CloudToCloudSourcePtrOutput struct {
	*pulumi.OutputState
}

func (CloudToCloudSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudToCloudSource)(nil))
}

func (o CloudToCloudSourcePtrOutput) ToCloudToCloudSourcePtrOutput() CloudToCloudSourcePtrOutput {
	return o
}

func (o CloudToCloudSourcePtrOutput) ToCloudToCloudSourcePtrOutputWithContext(ctx context.Context) CloudToCloudSourcePtrOutput {
	return o
}

type CloudToCloudSourceArrayOutput struct{ *pulumi.OutputState }

func (CloudToCloudSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudToCloudSource)(nil))
}

func (o CloudToCloudSourceArrayOutput) ToCloudToCloudSourceArrayOutput() CloudToCloudSourceArrayOutput {
	return o
}

func (o CloudToCloudSourceArrayOutput) ToCloudToCloudSourceArrayOutputWithContext(ctx context.Context) CloudToCloudSourceArrayOutput {
	return o
}

func (o CloudToCloudSourceArrayOutput) Index(i pulumi.IntInput) CloudToCloudSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudToCloudSource {
		return vs[0].([]CloudToCloudSource)[vs[1].(int)]
	}).(CloudToCloudSourceOutput)
}

type CloudToCloudSourceMapOutput struct{ *pulumi.OutputState }

func (CloudToCloudSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CloudToCloudSource)(nil))
}

func (o CloudToCloudSourceMapOutput) ToCloudToCloudSourceMapOutput() CloudToCloudSourceMapOutput {
	return o
}

func (o CloudToCloudSourceMapOutput) ToCloudToCloudSourceMapOutputWithContext(ctx context.Context) CloudToCloudSourceMapOutput {
	return o
}

func (o CloudToCloudSourceMapOutput) MapIndex(k pulumi.StringInput) CloudToCloudSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CloudToCloudSource {
		return vs[0].(map[string]CloudToCloudSource)[vs[1].(string)]
	}).(CloudToCloudSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(CloudToCloudSourceOutput{})
	pulumi.RegisterOutputType(CloudToCloudSourcePtrOutput{})
	pulumi.RegisterOutputType(CloudToCloudSourceArrayOutput{})
	pulumi.RegisterOutputType(CloudToCloudSourceMapOutput{})
}
