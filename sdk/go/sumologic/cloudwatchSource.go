// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// CloudWatch sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cloudwatchSource:CloudwatchSource test 123/456
// ```
//
//  CloudWatch sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cloudwatchSource:CloudwatchSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics
type CloudwatchSource struct {
	pulumi.CustomResourceState

	Authentication             CloudwatchSourceAuthenticationOutput         `pulumi:"authentication"`
	AutomaticDateParsing       pulumi.BoolPtrOutput                         `pulumi:"automaticDateParsing"`
	Category                   pulumi.StringPtrOutput                       `pulumi:"category"`
	CollectorId                pulumi.IntOutput                             `pulumi:"collectorId"`
	ContentType                pulumi.StringOutput                          `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                       `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                          `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         CloudwatchSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                       `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                       `pulumi:"fields"`
	Filters                    CloudwatchSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                         `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                       `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                       `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                         `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	Path                       CloudwatchSourcePathOutput                   `pulumi:"path"`
	Paused                     pulumi.BoolOutput                            `pulumi:"paused"`
	ScanInterval               pulumi.IntOutput                             `pulumi:"scanInterval"`
	Timezone                   pulumi.StringPtrOutput                       `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewCloudwatchSource registers a new resource with the given unique name, arguments, and options.
func NewCloudwatchSource(ctx *pulumi.Context,
	name string, args *CloudwatchSourceArgs, opts ...pulumi.ResourceOption) (*CloudwatchSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource CloudwatchSource
	err := ctx.RegisterResource("sumologic:index/cloudwatchSource:CloudwatchSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudwatchSource gets an existing CloudwatchSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudwatchSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudwatchSourceState, opts ...pulumi.ResourceOption) (*CloudwatchSource, error) {
	var resource CloudwatchSource
	err := ctx.ReadResource("sumologic:index/cloudwatchSource:CloudwatchSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudwatchSource resources.
type cloudwatchSourceState struct {
	Authentication             *CloudwatchSourceAuthentication     `pulumi:"authentication"`
	AutomaticDateParsing       *bool                               `pulumi:"automaticDateParsing"`
	Category                   *string                             `pulumi:"category"`
	CollectorId                *int                                `pulumi:"collectorId"`
	ContentType                *string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []CloudwatchSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []CloudwatchSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	Path                       *CloudwatchSourcePath               `pulumi:"path"`
	Paused                     *bool                               `pulumi:"paused"`
	ScanInterval               *int                                `pulumi:"scanInterval"`
	Timezone                   *string                             `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type CloudwatchSourceState struct {
	Authentication             CloudwatchSourceAuthenticationPtrInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntPtrInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         CloudwatchSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    CloudwatchSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       CloudwatchSourcePathPtrInput
	Paused                     pulumi.BoolPtrInput
	ScanInterval               pulumi.IntPtrInput
	Timezone                   pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (CloudwatchSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudwatchSourceState)(nil)).Elem()
}

type cloudwatchSourceArgs struct {
	Authentication             CloudwatchSourceAuthentication      `pulumi:"authentication"`
	AutomaticDateParsing       *bool                               `pulumi:"automaticDateParsing"`
	Category                   *string                             `pulumi:"category"`
	CollectorId                int                                 `pulumi:"collectorId"`
	ContentType                string                              `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []CloudwatchSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []CloudwatchSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	Path                       CloudwatchSourcePath                `pulumi:"path"`
	Paused                     bool                                `pulumi:"paused"`
	ScanInterval               int                                 `pulumi:"scanInterval"`
	Timezone                   *string                             `pulumi:"timezone"`
	UseAutolineMatching        *bool                               `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a CloudwatchSource resource.
type CloudwatchSourceArgs struct {
	Authentication             CloudwatchSourceAuthenticationInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntInput
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         CloudwatchSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    CloudwatchSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       CloudwatchSourcePathInput
	Paused                     pulumi.BoolInput
	ScanInterval               pulumi.IntInput
	Timezone                   pulumi.StringPtrInput
	UseAutolineMatching        pulumi.BoolPtrInput
}

func (CloudwatchSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudwatchSourceArgs)(nil)).Elem()
}

type CloudwatchSourceInput interface {
	pulumi.Input

	ToCloudwatchSourceOutput() CloudwatchSourceOutput
	ToCloudwatchSourceOutputWithContext(ctx context.Context) CloudwatchSourceOutput
}

func (*CloudwatchSource) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudwatchSource)(nil))
}

func (i *CloudwatchSource) ToCloudwatchSourceOutput() CloudwatchSourceOutput {
	return i.ToCloudwatchSourceOutputWithContext(context.Background())
}

func (i *CloudwatchSource) ToCloudwatchSourceOutputWithContext(ctx context.Context) CloudwatchSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwatchSourceOutput)
}

func (i *CloudwatchSource) ToCloudwatchSourcePtrOutput() CloudwatchSourcePtrOutput {
	return i.ToCloudwatchSourcePtrOutputWithContext(context.Background())
}

func (i *CloudwatchSource) ToCloudwatchSourcePtrOutputWithContext(ctx context.Context) CloudwatchSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwatchSourcePtrOutput)
}

type CloudwatchSourcePtrInput interface {
	pulumi.Input

	ToCloudwatchSourcePtrOutput() CloudwatchSourcePtrOutput
	ToCloudwatchSourcePtrOutputWithContext(ctx context.Context) CloudwatchSourcePtrOutput
}

type cloudwatchSourcePtrType CloudwatchSourceArgs

func (*cloudwatchSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudwatchSource)(nil))
}

func (i *cloudwatchSourcePtrType) ToCloudwatchSourcePtrOutput() CloudwatchSourcePtrOutput {
	return i.ToCloudwatchSourcePtrOutputWithContext(context.Background())
}

func (i *cloudwatchSourcePtrType) ToCloudwatchSourcePtrOutputWithContext(ctx context.Context) CloudwatchSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwatchSourcePtrOutput)
}

// CloudwatchSourceArrayInput is an input type that accepts CloudwatchSourceArray and CloudwatchSourceArrayOutput values.
// You can construct a concrete instance of `CloudwatchSourceArrayInput` via:
//
//          CloudwatchSourceArray{ CloudwatchSourceArgs{...} }
type CloudwatchSourceArrayInput interface {
	pulumi.Input

	ToCloudwatchSourceArrayOutput() CloudwatchSourceArrayOutput
	ToCloudwatchSourceArrayOutputWithContext(context.Context) CloudwatchSourceArrayOutput
}

type CloudwatchSourceArray []CloudwatchSourceInput

func (CloudwatchSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudwatchSource)(nil)).Elem()
}

func (i CloudwatchSourceArray) ToCloudwatchSourceArrayOutput() CloudwatchSourceArrayOutput {
	return i.ToCloudwatchSourceArrayOutputWithContext(context.Background())
}

func (i CloudwatchSourceArray) ToCloudwatchSourceArrayOutputWithContext(ctx context.Context) CloudwatchSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwatchSourceArrayOutput)
}

// CloudwatchSourceMapInput is an input type that accepts CloudwatchSourceMap and CloudwatchSourceMapOutput values.
// You can construct a concrete instance of `CloudwatchSourceMapInput` via:
//
//          CloudwatchSourceMap{ "key": CloudwatchSourceArgs{...} }
type CloudwatchSourceMapInput interface {
	pulumi.Input

	ToCloudwatchSourceMapOutput() CloudwatchSourceMapOutput
	ToCloudwatchSourceMapOutputWithContext(context.Context) CloudwatchSourceMapOutput
}

type CloudwatchSourceMap map[string]CloudwatchSourceInput

func (CloudwatchSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudwatchSource)(nil)).Elem()
}

func (i CloudwatchSourceMap) ToCloudwatchSourceMapOutput() CloudwatchSourceMapOutput {
	return i.ToCloudwatchSourceMapOutputWithContext(context.Background())
}

func (i CloudwatchSourceMap) ToCloudwatchSourceMapOutputWithContext(ctx context.Context) CloudwatchSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwatchSourceMapOutput)
}

type CloudwatchSourceOutput struct{ *pulumi.OutputState }

func (CloudwatchSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudwatchSource)(nil))
}

func (o CloudwatchSourceOutput) ToCloudwatchSourceOutput() CloudwatchSourceOutput {
	return o
}

func (o CloudwatchSourceOutput) ToCloudwatchSourceOutputWithContext(ctx context.Context) CloudwatchSourceOutput {
	return o
}

func (o CloudwatchSourceOutput) ToCloudwatchSourcePtrOutput() CloudwatchSourcePtrOutput {
	return o.ToCloudwatchSourcePtrOutputWithContext(context.Background())
}

func (o CloudwatchSourceOutput) ToCloudwatchSourcePtrOutputWithContext(ctx context.Context) CloudwatchSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudwatchSource) *CloudwatchSource {
		return &v
	}).(CloudwatchSourcePtrOutput)
}

type CloudwatchSourcePtrOutput struct{ *pulumi.OutputState }

func (CloudwatchSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudwatchSource)(nil))
}

func (o CloudwatchSourcePtrOutput) ToCloudwatchSourcePtrOutput() CloudwatchSourcePtrOutput {
	return o
}

func (o CloudwatchSourcePtrOutput) ToCloudwatchSourcePtrOutputWithContext(ctx context.Context) CloudwatchSourcePtrOutput {
	return o
}

func (o CloudwatchSourcePtrOutput) Elem() CloudwatchSourceOutput {
	return o.ApplyT(func(v *CloudwatchSource) CloudwatchSource {
		if v != nil {
			return *v
		}
		var ret CloudwatchSource
		return ret
	}).(CloudwatchSourceOutput)
}

type CloudwatchSourceArrayOutput struct{ *pulumi.OutputState }

func (CloudwatchSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudwatchSource)(nil))
}

func (o CloudwatchSourceArrayOutput) ToCloudwatchSourceArrayOutput() CloudwatchSourceArrayOutput {
	return o
}

func (o CloudwatchSourceArrayOutput) ToCloudwatchSourceArrayOutputWithContext(ctx context.Context) CloudwatchSourceArrayOutput {
	return o
}

func (o CloudwatchSourceArrayOutput) Index(i pulumi.IntInput) CloudwatchSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudwatchSource {
		return vs[0].([]CloudwatchSource)[vs[1].(int)]
	}).(CloudwatchSourceOutput)
}

type CloudwatchSourceMapOutput struct{ *pulumi.OutputState }

func (CloudwatchSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CloudwatchSource)(nil))
}

func (o CloudwatchSourceMapOutput) ToCloudwatchSourceMapOutput() CloudwatchSourceMapOutput {
	return o
}

func (o CloudwatchSourceMapOutput) ToCloudwatchSourceMapOutputWithContext(ctx context.Context) CloudwatchSourceMapOutput {
	return o
}

func (o CloudwatchSourceMapOutput) MapIndex(k pulumi.StringInput) CloudwatchSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CloudwatchSource {
		return vs[0].(map[string]CloudwatchSource)[vs[1].(string)]
	}).(CloudwatchSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwatchSourceInput)(nil)).Elem(), &CloudwatchSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwatchSourcePtrInput)(nil)).Elem(), &CloudwatchSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwatchSourceArrayInput)(nil)).Elem(), CloudwatchSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwatchSourceMapInput)(nil)).Elem(), CloudwatchSourceMap{})
	pulumi.RegisterOutputType(CloudwatchSourceOutput{})
	pulumi.RegisterOutputType(CloudwatchSourcePtrOutput{})
	pulumi.RegisterOutputType(CloudwatchSourceArrayOutput{})
	pulumi.RegisterOutputType(CloudwatchSourceMapOutput{})
}
