// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Sumologic Kinesis Metrics source. This source is used to ingest data from Cloudwatch Metrics Stream via Kinesis Firehose from AWS.
 *
 * __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tagfilters = [
 *     {
 *         namespace: "All",
 *         tags: ["k3=v3"],
 *         type: "TagFilters",
 *     },
 *     {
 *         namespace: "AWS/Route53",
 *         tags: ["k1=v1"],
 *         type: "TagFilters",
 *     },
 *     {
 *         namespace: "AWS/S3",
 *         tags: ["k2=v2"],
 *         type: "TagFilters",
 *     },
 * ];
 * const collector = new sumologic.Collector("collector", {
 *     description: "Just testing this",
 * });
 * const kinesisMetricsAccessKey = new sumologic.KinesisMetricsSource("kinesis_metrics_access_key", {
 *     authentication: {
 *         accessKey: "someKey",
 *         secretKey: "******",
 *         type: "S3BucketAuthentication",
 *     },
 *     category: "prod/kinesis/metrics",
 *     collectorId: collector.id.apply(id => Number.parseFloat(id)),
 *     contentType: "KinesisMetric",
 *     description: "Description for Kinesis Metrics Source",
 *     path: {
 *         tagFilters: [
 *             {
 *                 namespace: "All",
 *                 tags: ["k3=v3"],
 *                 type: "TagFilters",
 *             },
 *             {
 *                 namespace: "AWS/Route53",
 *                 tags: ["k1=v1"],
 *                 type: "TagFilters",
 *             },
 *         ],
 *         type: "KinesisMetricPath",
 *     },
 * });
 * const kinesisMetricsRoleArn = new sumologic.KinesisMetricsSource("kinesis_metrics_role_arn", {
 *     authentication: {
 *         roleArn: "arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI",
 *         type: "AWSRoleBasedAuthentication",
 *     },
 *     category: "prod/kinesis/metrics",
 *     collectorId: collector.id.apply(id => Number.parseFloat(id)),
 *     contentType: "KinesisMetric",
 *     description: "Description for Kinesis Metrics Source",
 *     path: {
 *         tagFilters: [
 *             {
 *                 namespace: "All",
 *                 tags: ["k3=v3"],
 *                 type: "TagFilters",
 *             },
 *             {
 *                 namespace: "AWS/Route53",
 *                 tags: ["k1=v1"],
 *                 type: "TagFilters",
 *             },
 *         ],
 *         type: "KinesisMetricPath",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Kinesis Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test 123/456
 * ```
 *
 *  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test my-test-collector/my-test-source
 * ```
 *
 *  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
 */
export class KinesisMetricsSource extends pulumi.CustomResource {
    /**
     * Get an existing KinesisMetricsSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KinesisMetricsSourceState, opts?: pulumi.CustomResourceOptions): KinesisMetricsSource {
        return new KinesisMetricsSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/kinesisMetricsSource:KinesisMetricsSource';

    /**
     * Returns true if the given object is an instance of KinesisMetricsSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KinesisMetricsSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KinesisMetricsSource.__pulumiType;
    }

    /**
     * Authentication details for connecting to the S3 bucket.
     */
    public readonly authentication!: pulumi.Output<outputs.KinesisMetricsSourceAuthentication>;
    public readonly automaticDateParsing!: pulumi.Output<boolean | undefined>;
    public readonly category!: pulumi.Output<string | undefined>;
    public readonly collectorId!: pulumi.Output<number>;
    /**
     * The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
     */
    public readonly contentType!: pulumi.Output<string>;
    public readonly cutoffRelativeTime!: pulumi.Output<string | undefined>;
    public readonly cutoffTimestamp!: pulumi.Output<number | undefined>;
    public readonly defaultDateFormats!: pulumi.Output<outputs.KinesisMetricsSourceDefaultDateFormat[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly filters!: pulumi.Output<outputs.KinesisMetricsSourceFilter[] | undefined>;
    public readonly forceTimezone!: pulumi.Output<boolean | undefined>;
    public readonly hostName!: pulumi.Output<string | undefined>;
    public readonly manualPrefixRegexp!: pulumi.Output<string | undefined>;
    public readonly messagePerRequest!: pulumi.Output<boolean | undefined>;
    public readonly multilineProcessingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The location to scan for new data.
     */
    public readonly path!: pulumi.Output<outputs.KinesisMetricsSourcePath>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    /**
     * The HTTP endpoint to used while creating Kinesis Firehose on AWS.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    public readonly useAutolineMatching!: pulumi.Output<boolean | undefined>;

    /**
     * Create a KinesisMetricsSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KinesisMetricsSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KinesisMetricsSourceArgs | KinesisMetricsSourceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KinesisMetricsSourceState | undefined;
            inputs["authentication"] = state ? state.authentication : undefined;
            inputs["automaticDateParsing"] = state ? state.automaticDateParsing : undefined;
            inputs["category"] = state ? state.category : undefined;
            inputs["collectorId"] = state ? state.collectorId : undefined;
            inputs["contentType"] = state ? state.contentType : undefined;
            inputs["cutoffRelativeTime"] = state ? state.cutoffRelativeTime : undefined;
            inputs["cutoffTimestamp"] = state ? state.cutoffTimestamp : undefined;
            inputs["defaultDateFormats"] = state ? state.defaultDateFormats : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fields"] = state ? state.fields : undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["forceTimezone"] = state ? state.forceTimezone : undefined;
            inputs["hostName"] = state ? state.hostName : undefined;
            inputs["manualPrefixRegexp"] = state ? state.manualPrefixRegexp : undefined;
            inputs["messagePerRequest"] = state ? state.messagePerRequest : undefined;
            inputs["multilineProcessingEnabled"] = state ? state.multilineProcessingEnabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["useAutolineMatching"] = state ? state.useAutolineMatching : undefined;
        } else {
            const args = argsOrState as KinesisMetricsSourceArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.collectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectorId'");
            }
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            inputs["authentication"] = args ? args.authentication : undefined;
            inputs["automaticDateParsing"] = args ? args.automaticDateParsing : undefined;
            inputs["category"] = args ? args.category : undefined;
            inputs["collectorId"] = args ? args.collectorId : undefined;
            inputs["contentType"] = args ? args.contentType : undefined;
            inputs["cutoffRelativeTime"] = args ? args.cutoffRelativeTime : undefined;
            inputs["cutoffTimestamp"] = args ? args.cutoffTimestamp : undefined;
            inputs["defaultDateFormats"] = args ? args.defaultDateFormats : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["fields"] = args ? args.fields : undefined;
            inputs["filters"] = args ? args.filters : undefined;
            inputs["forceTimezone"] = args ? args.forceTimezone : undefined;
            inputs["hostName"] = args ? args.hostName : undefined;
            inputs["manualPrefixRegexp"] = args ? args.manualPrefixRegexp : undefined;
            inputs["messagePerRequest"] = args ? args.messagePerRequest : undefined;
            inputs["multilineProcessingEnabled"] = args ? args.multilineProcessingEnabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
            inputs["useAutolineMatching"] = args ? args.useAutolineMatching : undefined;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(KinesisMetricsSource.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KinesisMetricsSource resources.
 */
export interface KinesisMetricsSourceState {
    /**
     * Authentication details for connecting to the S3 bucket.
     */
    authentication?: pulumi.Input<inputs.KinesisMetricsSourceAuthentication>;
    automaticDateParsing?: pulumi.Input<boolean>;
    category?: pulumi.Input<string>;
    collectorId?: pulumi.Input<number>;
    /**
     * The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
     */
    contentType?: pulumi.Input<string>;
    cutoffRelativeTime?: pulumi.Input<string>;
    cutoffTimestamp?: pulumi.Input<number>;
    defaultDateFormats?: pulumi.Input<pulumi.Input<inputs.KinesisMetricsSourceDefaultDateFormat>[]>;
    description?: pulumi.Input<string>;
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filters?: pulumi.Input<pulumi.Input<inputs.KinesisMetricsSourceFilter>[]>;
    forceTimezone?: pulumi.Input<boolean>;
    hostName?: pulumi.Input<string>;
    manualPrefixRegexp?: pulumi.Input<string>;
    messagePerRequest?: pulumi.Input<boolean>;
    multilineProcessingEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * The location to scan for new data.
     */
    path?: pulumi.Input<inputs.KinesisMetricsSourcePath>;
    timezone?: pulumi.Input<string>;
    /**
     * The HTTP endpoint to used while creating Kinesis Firehose on AWS.
     */
    url?: pulumi.Input<string>;
    useAutolineMatching?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KinesisMetricsSource resource.
 */
export interface KinesisMetricsSourceArgs {
    /**
     * Authentication details for connecting to the S3 bucket.
     */
    authentication: pulumi.Input<inputs.KinesisMetricsSourceAuthentication>;
    automaticDateParsing?: pulumi.Input<boolean>;
    category?: pulumi.Input<string>;
    collectorId: pulumi.Input<number>;
    /**
     * The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
     */
    contentType: pulumi.Input<string>;
    cutoffRelativeTime?: pulumi.Input<string>;
    cutoffTimestamp?: pulumi.Input<number>;
    defaultDateFormats?: pulumi.Input<pulumi.Input<inputs.KinesisMetricsSourceDefaultDateFormat>[]>;
    description?: pulumi.Input<string>;
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filters?: pulumi.Input<pulumi.Input<inputs.KinesisMetricsSourceFilter>[]>;
    forceTimezone?: pulumi.Input<boolean>;
    hostName?: pulumi.Input<string>;
    manualPrefixRegexp?: pulumi.Input<string>;
    messagePerRequest?: pulumi.Input<boolean>;
    multilineProcessingEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * The location to scan for new data.
     */
    path: pulumi.Input<inputs.KinesisMetricsSourcePath>;
    timezone?: pulumi.Input<string>;
    useAutolineMatching?: pulumi.Input<boolean>;
}
