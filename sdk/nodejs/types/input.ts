// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AwsInventorySourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface AwsInventorySourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface AwsInventorySourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface AwsInventorySourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.AwsInventorySourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface AwsInventorySourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface AwsXraySourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface AwsXraySourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface AwsXraySourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface AwsXraySourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.AwsXraySourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface AwsXraySourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface CloudSyslogSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface CloudSyslogSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface CloudfrontSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudfrontSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface CloudfrontSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface CloudfrontSourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.CloudfrontSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface CloudfrontSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface CloudtrailSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudtrailSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface CloudtrailSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface CloudtrailSourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.CloudtrailSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface CloudtrailSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface CloudwatchSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudwatchSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface CloudwatchSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface CloudwatchSourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.CloudwatchSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface CloudwatchSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface DashboardColoringRule {
    colorThresholds?: pulumi.Input<pulumi.Input<inputs.DashboardColoringRuleColorThreshold>[]>;
    multipleSeriesAggregateFunction: pulumi.Input<string>;
    scope: pulumi.Input<string>;
    singleSeriesAggregateFunction: pulumi.Input<string>;
}

export interface DashboardColoringRuleColorThreshold {
    color: pulumi.Input<string>;
    max?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
}

export interface DashboardLayout {
    grid?: pulumi.Input<inputs.DashboardLayoutGrid>;
}

export interface DashboardLayoutGrid {
    layoutStructures: pulumi.Input<pulumi.Input<inputs.DashboardLayoutGridLayoutStructure>[]>;
}

export interface DashboardLayoutGridLayoutStructure {
    key: pulumi.Input<string>;
    structure: pulumi.Input<string>;
}

export interface DashboardPanel {
    sumoSearchPanel?: pulumi.Input<inputs.DashboardPanelSumoSearchPanel>;
    textPanel?: pulumi.Input<inputs.DashboardPanelTextPanel>;
}

export interface DashboardPanelSumoSearchPanel {
    coloringRule?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelColoringRule>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    keepVisualSettingsConsistentWithParent?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    linkedDashboard?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelLinkedDashboard>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardPanelSumoSearchPanelQuery>[]>;
    timeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRange>;
    title?: pulumi.Input<string>;
    visualSettings?: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelColoringRule {
    colorThresholds?: pulumi.Input<pulumi.Input<inputs.DashboardPanelSumoSearchPanelColoringRuleColorThreshold>[]>;
    multipleSeriesAggregateFunction: pulumi.Input<string>;
    scope: pulumi.Input<string>;
    singleSeriesAggregateFunction: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelColoringRuleColorThreshold {
    color: pulumi.Input<string>;
    max?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
}

export interface DashboardPanelSumoSearchPanelLinkedDashboard {
    id: pulumi.Input<string>;
    includeTimeRange?: pulumi.Input<boolean>;
    includeVariables?: pulumi.Input<boolean>;
    relativePath?: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelQuery {
    metricsQueryData?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryData>;
    metricsQueryMode?: pulumi.Input<string>;
    queryKey: pulumi.Input<string>;
    queryString: pulumi.Input<string>;
    queryType: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryData {
    aggregationType?: pulumi.Input<string>;
    filters: pulumi.Input<pulumi.Input<inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter>[]>;
    groupBy?: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    operators?: pulumi.Input<pulumi.Input<inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator>[]>;
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter {
    key: pulumi.Input<string>;
    negation?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator {
    operatorName: pulumi.Input<string>;
    parameters: pulumi.Input<pulumi.Input<inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter>[]>;
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRange {
    beginBoundedTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange>;
    completeLiteralTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange {
    from: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom>;
    to?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom {
    epochTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange>;
    iso8601TimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange>;
    literalTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange>;
    relativeTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange {
    epochMillis: pulumi.Input<number>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange {
    iso8601Time: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange {
    rangeName: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange {
    relativeTime: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo {
    epochTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange>;
    iso8601TimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange>;
    literalTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange>;
    relativeTimeRange?: pulumi.Input<inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange {
    epochMillis: pulumi.Input<number>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange {
    iso8601Time: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange {
    rangeName: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange {
    relativeTime: pulumi.Input<string>;
}

export interface DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange {
    rangeName: pulumi.Input<string>;
}

export interface DashboardPanelTextPanel {
    id?: pulumi.Input<string>;
    keepVisualSettingsConsistentWithParent?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    visualSettings?: pulumi.Input<string>;
}

export interface DashboardTimeRange {
    beginBoundedTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRange>;
    completeLiteralTimeRange?: pulumi.Input<inputs.DashboardTimeRangeCompleteLiteralTimeRange>;
}

export interface DashboardTimeRangeBeginBoundedTimeRange {
    from: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeFrom>;
    to?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeTo>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFrom {
    epochTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange>;
    iso8601TimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange>;
    literalTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange>;
    relativeTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange {
    epochMillis: pulumi.Input<number>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange {
    iso8601Time: pulumi.Input<string>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange {
    rangeName: pulumi.Input<string>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange {
    relativeTime: pulumi.Input<string>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeTo {
    epochTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange>;
    iso8601TimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange>;
    literalTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange>;
    relativeTimeRange?: pulumi.Input<inputs.DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange {
    epochMillis: pulumi.Input<number>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange {
    iso8601Time: pulumi.Input<string>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange {
    rangeName: pulumi.Input<string>;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange {
    relativeTime: pulumi.Input<string>;
}

export interface DashboardTimeRangeCompleteLiteralTimeRange {
    rangeName: pulumi.Input<string>;
}

export interface DashboardTopologyLabelMap {
    datas: pulumi.Input<pulumi.Input<inputs.DashboardTopologyLabelMapData>[]>;
}

export interface DashboardTopologyLabelMapData {
    label: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardVariable {
    allowMultiSelect?: pulumi.Input<boolean>;
    defaultValue?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    hideFromUi?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    includeAllOption?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    sourceDefinition: pulumi.Input<inputs.DashboardVariableSourceDefinition>;
}

export interface DashboardVariableSourceDefinition {
    csvVariableSourceDefinition?: pulumi.Input<inputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinition>;
    logQueryVariableSourceDefinition?: pulumi.Input<inputs.DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition>;
    metadataVariableSourceDefinition?: pulumi.Input<inputs.DashboardVariableSourceDefinitionMetadataVariableSourceDefinition>;
}

export interface DashboardVariableSourceDefinitionCsvVariableSourceDefinition {
    values: pulumi.Input<string>;
}

export interface DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition {
    field: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardVariableSourceDefinitionMetadataVariableSourceDefinition {
    filter: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface ElbSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ElbSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface ElbSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface ElbSourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.ElbSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface ElbSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface GcpSourceAuthentication {
    type?: pulumi.Input<string>;
}

export interface GcpSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface GcpSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface GcpSourcePath {
    type?: pulumi.Input<string>;
}

export interface HttpSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface HttpSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface KinesisMetricsSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface KinesisMetricsSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface KinesisMetricsSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface KinesisMetricsSourcePath {
    tagFilters?: pulumi.Input<pulumi.Input<inputs.KinesisMetricsSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface KinesisMetricsSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface LookupTableField {
    fieldName: pulumi.Input<string>;
    fieldType: pulumi.Input<string>;
}

export interface MetadataSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface MetadataSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface MetadataSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface MetadataSourcePath {
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface MonitorNotification {
    notification: pulumi.Input<inputs.MonitorNotificationNotification>;
    runForTriggerTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MonitorNotificationNotification {
    /**
     * @deprecated The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.
     */
    actionType?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    messageBody?: pulumi.Input<string>;
    payloadOverride?: pulumi.Input<string>;
    recipients?: pulumi.Input<pulumi.Input<string>[]>;
    subject?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}

export interface MonitorQuery {
    query: pulumi.Input<string>;
    rowId: pulumi.Input<string>;
}

export interface MonitorTrigger {
    detectionMethod?: pulumi.Input<string>;
    occurrenceType?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholdType?: pulumi.Input<string>;
    timeRange?: pulumi.Input<string>;
    triggerSource?: pulumi.Input<string>;
    triggerType?: pulumi.Input<string>;
}

export interface PollingSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PollingSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface PollingSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface PollingSourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.PollingSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface PollingSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface S3AuditSourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface S3AuditSourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface S3AuditSourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface S3AuditSourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.S3AuditSourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface S3AuditSourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface S3SourceAuthentication {
    accessKey?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface S3SourceDefaultDateFormat {
    format: pulumi.Input<string>;
    locator?: pulumi.Input<string>;
}

export interface S3SourceFilter {
    filterType: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface S3SourcePath {
    bucketName?: pulumi.Input<string>;
    limitToNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    limitToRegions?: pulumi.Input<pulumi.Input<string>[]>;
    pathExpression?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.S3SourcePathTagFilter>[]>;
    type: pulumi.Input<string>;
}

export interface S3SourcePathTagFilter {
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface SamlConfigurationOnDemandProvisioningEnabled {
    firstNameAttribute?: pulumi.Input<string>;
    lastNameAttribute?: pulumi.Input<string>;
    onDemandProvisioningRoles: pulumi.Input<pulumi.Input<string>[]>;
}
