// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AwsInventorySourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface AwsInventorySourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface AwsInventorySourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface AwsInventorySourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.AwsInventorySourcePathTagFilter[];
    type: string;
}

export interface AwsInventorySourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface AwsXraySourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface AwsXraySourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface AwsXraySourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface AwsXraySourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.AwsXraySourcePathTagFilter[];
    type: string;
}

export interface AwsXraySourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface CloudSyslogSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface CloudSyslogSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface CloudfrontSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface CloudfrontSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface CloudfrontSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface CloudfrontSourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.CloudfrontSourcePathTagFilter[];
    type: string;
}

export interface CloudfrontSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface CloudtrailSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface CloudtrailSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface CloudtrailSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface CloudtrailSourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.CloudtrailSourcePathTagFilter[];
    type: string;
}

export interface CloudtrailSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface CloudwatchSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface CloudwatchSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface CloudwatchSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface CloudwatchSourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.CloudwatchSourcePathTagFilter[];
    type: string;
}

export interface CloudwatchSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface DashboardColoringRule {
    colorThresholds?: outputs.DashboardColoringRuleColorThreshold[];
    multipleSeriesAggregateFunction: string;
    scope: string;
    singleSeriesAggregateFunction: string;
}

export interface DashboardColoringRuleColorThreshold {
    color: string;
    max?: number;
    min?: number;
}

export interface DashboardLayout {
    grid?: outputs.DashboardLayoutGrid;
}

export interface DashboardLayoutGrid {
    layoutStructures: outputs.DashboardLayoutGridLayoutStructure[];
}

export interface DashboardLayoutGridLayoutStructure {
    key: string;
    structure: string;
}

export interface DashboardPanel {
    sumoSearchPanel?: outputs.DashboardPanelSumoSearchPanel;
    textPanel?: outputs.DashboardPanelTextPanel;
}

export interface DashboardPanelSumoSearchPanel {
    coloringRule?: outputs.DashboardPanelSumoSearchPanelColoringRule;
    description?: string;
    id: string;
    keepVisualSettingsConsistentWithParent?: boolean;
    key: string;
    linkedDashboard?: outputs.DashboardPanelSumoSearchPanelLinkedDashboard;
    queries?: outputs.DashboardPanelSumoSearchPanelQuery[];
    timeRange?: outputs.DashboardPanelSumoSearchPanelTimeRange;
    title?: string;
    visualSettings?: string;
}

export interface DashboardPanelSumoSearchPanelColoringRule {
    colorThresholds?: outputs.DashboardPanelSumoSearchPanelColoringRuleColorThreshold[];
    multipleSeriesAggregateFunction: string;
    scope: string;
    singleSeriesAggregateFunction: string;
}

export interface DashboardPanelSumoSearchPanelColoringRuleColorThreshold {
    color: string;
    max?: number;
    min?: number;
}

export interface DashboardPanelSumoSearchPanelLinkedDashboard {
    id: string;
    includeTimeRange?: boolean;
    includeVariables?: boolean;
    relativePath?: string;
}

export interface DashboardPanelSumoSearchPanelQuery {
    metricsQueryData?: outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryData;
    metricsQueryMode?: string;
    queryKey: string;
    queryString: string;
    queryType: string;
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryData {
    aggregationType?: string;
    filters: outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter[];
    groupBy?: string;
    metric: string;
    operators?: outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator[];
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter {
    key: string;
    negation?: boolean;
    value: string;
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator {
    operatorName: string;
    parameters: outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter[];
}

export interface DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter {
    key: string;
    value: string;
}

export interface DashboardPanelSumoSearchPanelTimeRange {
    beginBoundedTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange;
    completeLiteralTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange {
    from: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom;
    to?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom {
    epochTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange;
    iso8601TimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange;
    literalTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange;
    relativeTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange {
    epochMillis: number;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange {
    iso8601Time: string;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange {
    rangeName: string;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange {
    relativeTime: string;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo {
    epochTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange;
    iso8601TimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange;
    literalTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange;
    relativeTimeRange?: outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange {
    epochMillis: number;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange {
    iso8601Time: string;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange {
    rangeName: string;
}

export interface DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange {
    relativeTime: string;
}

export interface DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange {
    rangeName: string;
}

export interface DashboardPanelTextPanel {
    id: string;
    keepVisualSettingsConsistentWithParent?: boolean;
    key: string;
    text?: string;
    title?: string;
    visualSettings?: string;
}

export interface DashboardTimeRange {
    beginBoundedTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRange;
    completeLiteralTimeRange?: outputs.DashboardTimeRangeCompleteLiteralTimeRange;
}

export interface DashboardTimeRangeBeginBoundedTimeRange {
    from: outputs.DashboardTimeRangeBeginBoundedTimeRangeFrom;
    to?: outputs.DashboardTimeRangeBeginBoundedTimeRangeTo;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFrom {
    epochTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange;
    iso8601TimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange;
    literalTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange;
    relativeTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange {
    epochMillis: number;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange {
    iso8601Time: string;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange {
    rangeName: string;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange {
    relativeTime: string;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeTo {
    epochTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange;
    iso8601TimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange;
    literalTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange;
    relativeTimeRange?: outputs.DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange {
    epochMillis: number;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange {
    iso8601Time: string;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange {
    rangeName: string;
}

export interface DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange {
    relativeTime: string;
}

export interface DashboardTimeRangeCompleteLiteralTimeRange {
    rangeName: string;
}

export interface DashboardTopologyLabelMap {
    datas: outputs.DashboardTopologyLabelMapData[];
}

export interface DashboardTopologyLabelMapData {
    label: string;
    values: string[];
}

export interface DashboardVariable {
    allowMultiSelect?: boolean;
    defaultValue?: string;
    displayName?: string;
    hideFromUi?: boolean;
    id: string;
    includeAllOption?: boolean;
    name: string;
    sourceDefinition: outputs.DashboardVariableSourceDefinition;
}

export interface DashboardVariableSourceDefinition {
    csvVariableSourceDefinition?: outputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinition;
    logQueryVariableSourceDefinition?: outputs.DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition;
    metadataVariableSourceDefinition?: outputs.DashboardVariableSourceDefinitionMetadataVariableSourceDefinition;
}

export interface DashboardVariableSourceDefinitionCsvVariableSourceDefinition {
    values: string;
}

export interface DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition {
    field: string;
    query: string;
}

export interface DashboardVariableSourceDefinitionMetadataVariableSourceDefinition {
    filter: string;
    key: string;
}

export interface ElbSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface ElbSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface ElbSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface ElbSourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.ElbSourcePathTagFilter[];
    type: string;
}

export interface ElbSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface GcpSourceAuthentication {
    type?: string;
}

export interface GcpSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface GcpSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface GcpSourcePath {
    type?: string;
}

export interface HttpSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface HttpSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface KinesisMetricsSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface KinesisMetricsSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface KinesisMetricsSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface KinesisMetricsSourcePath {
    tagFilters?: outputs.KinesisMetricsSourcePathTagFilter[];
    type: string;
}

export interface KinesisMetricsSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface LookupTableField {
    fieldName: string;
    fieldType: string;
}

export interface MetadataSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface MetadataSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface MetadataSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface MetadataSourcePath {
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    tagFilters?: string[];
    type: string;
}

export interface MonitorNotification {
    notification: outputs.MonitorNotificationNotification;
    runForTriggerTypes: string[];
}

export interface MonitorNotificationNotification {
    /**
     * @deprecated The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.
     */
    actionType: string;
    connectionId?: string;
    connectionType: string;
    messageBody?: string;
    payloadOverride?: string;
    recipients?: string[];
    subject?: string;
    timeZone?: string;
}

export interface MonitorQuery {
    query: string;
    rowId: string;
}

export interface MonitorTrigger {
    detectionMethod?: string;
    occurrenceType?: string;
    threshold?: number;
    thresholdType?: string;
    timeRange?: string;
    triggerSource?: string;
    triggerType?: string;
}

export interface PollingSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface PollingSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface PollingSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface PollingSourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.PollingSourcePathTagFilter[];
    type: string;
}

export interface PollingSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface S3AuditSourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface S3AuditSourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface S3AuditSourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface S3AuditSourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.S3AuditSourcePathTagFilter[];
    type: string;
}

export interface S3AuditSourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface S3SourceAuthentication {
    accessKey?: string;
    roleArn?: string;
    secretKey?: string;
    type: string;
}

export interface S3SourceDefaultDateFormat {
    format: string;
    locator?: string;
}

export interface S3SourceFilter {
    filterType: string;
    mask?: string;
    name: string;
    regexp: string;
}

export interface S3SourcePath {
    bucketName?: string;
    limitToNamespaces?: string[];
    limitToRegions?: string[];
    pathExpression?: string;
    tagFilters?: outputs.S3SourcePathTagFilter[];
    type: string;
}

export interface S3SourcePathTagFilter {
    namespace?: string;
    tags?: string[];
    type?: string;
}

export interface SamlConfigurationOnDemandProvisioningEnabled {
    firstNameAttribute?: string;
    lastNameAttribute?: string;
    onDemandProvisioningRoles: string[];
}
