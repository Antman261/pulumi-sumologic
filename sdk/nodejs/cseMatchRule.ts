// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Sumo Logic CSE [Match Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/03_Write_a_Match_Rule).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const matchRule = new sumologic.CseMatchRule("match_rule", {
 *     descriptionExpression: "Signal description",
 *     enabled: true,
 *     entitySelectors: [{
 *         entityType: "_ip",
 *         expression: "srcDevice_ip",
 *     }],
 *     expression: "objectType = \"Network\"",
 *     isPrototype: false,
 *     nameExpression: "Signal name",
 *     severityMapping: {
 *         default: 5,
 *         type: "constant",
 *     },
 *     summaryExpression: "Signal summary",
 *     tags: ["_mitreAttackTactic:TA0009"],
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `descriptionExpression` - (Required) The description of the generated Signals
 * - `enabled` - (Required) Whether the rule should generate Signals
 * - `entitySelectors` - (Required) The entities to generate Signals on
 *   + `entityType` - (Required) The type of the entity to generate the Signal on.
 *   + `expression` - (Required) The expression or field name to generate the Signal on.
 * - `expression` - (Required) The expression for which records to match on
 * - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
 * - `name` - (Required) The name of the Rule
 * - `nameExpression` - (Required) The name of the generated Signals
 * - `severityMapping` - (Required) The configuration of how the severity of the Signals should be mapped from the Records
 *   + `type` - (Required) Whether to set a constant severity ("constant"), set the severity based on the direct value of a record field ("fieldValue"), or map a record field value to a severity ("fieldValueMapping").
 *   + `default` - (Optional) The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
 *   + `field` - (Optional) The field to use in the "fieldValue"/"fieldValueMapping" cases.
 *   + `mapping` - (Optional) The map of record values to severities to use in the "fieldValueMapping" case
 *     - `type` - (Required) Must be set to "eq" currently
 *     - `from` - (Required) The record value to map from
 *     - `to` - (Required) The severity value to map to
 * - `summaryExpression` - (Optional) The summary of the generated Signals
 * - `tags` - (Required) The tags of the generated Signals
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the match rule.
 *
 * ## Import
 *
 * Match Rules can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/cseMatchRule:CseMatchRule match_rule id
 * ```
 */
export class CseMatchRule extends pulumi.CustomResource {
    /**
     * Get an existing CseMatchRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseMatchRuleState, opts?: pulumi.CustomResourceOptions): CseMatchRule {
        return new CseMatchRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseMatchRule:CseMatchRule';

    /**
     * Returns true if the given object is an instance of CseMatchRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseMatchRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseMatchRule.__pulumiType;
    }

    public readonly descriptionExpression!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly entitySelectors!: pulumi.Output<outputs.CseMatchRuleEntitySelector[]>;
    public readonly expression!: pulumi.Output<string>;
    public readonly isPrototype!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameExpression!: pulumi.Output<string>;
    public readonly severityMapping!: pulumi.Output<outputs.CseMatchRuleSeverityMapping>;
    public readonly summaryExpression!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a CseMatchRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseMatchRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseMatchRuleArgs | CseMatchRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseMatchRuleState | undefined;
            inputs["descriptionExpression"] = state ? state.descriptionExpression : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["entitySelectors"] = state ? state.entitySelectors : undefined;
            inputs["expression"] = state ? state.expression : undefined;
            inputs["isPrototype"] = state ? state.isPrototype : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameExpression"] = state ? state.nameExpression : undefined;
            inputs["severityMapping"] = state ? state.severityMapping : undefined;
            inputs["summaryExpression"] = state ? state.summaryExpression : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CseMatchRuleArgs | undefined;
            if ((!args || args.descriptionExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'descriptionExpression'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.entitySelectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySelectors'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.nameExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameExpression'");
            }
            if ((!args || args.severityMapping === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severityMapping'");
            }
            inputs["descriptionExpression"] = args ? args.descriptionExpression : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["entitySelectors"] = args ? args.entitySelectors : undefined;
            inputs["expression"] = args ? args.expression : undefined;
            inputs["isPrototype"] = args ? args.isPrototype : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameExpression"] = args ? args.nameExpression : undefined;
            inputs["severityMapping"] = args ? args.severityMapping : undefined;
            inputs["summaryExpression"] = args ? args.summaryExpression : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CseMatchRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CseMatchRule resources.
 */
export interface CseMatchRuleState {
    readonly descriptionExpression?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly entitySelectors?: pulumi.Input<pulumi.Input<inputs.CseMatchRuleEntitySelector>[]>;
    readonly expression?: pulumi.Input<string>;
    readonly isPrototype?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly nameExpression?: pulumi.Input<string>;
    readonly severityMapping?: pulumi.Input<inputs.CseMatchRuleSeverityMapping>;
    readonly summaryExpression?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CseMatchRule resource.
 */
export interface CseMatchRuleArgs {
    readonly descriptionExpression: pulumi.Input<string>;
    readonly enabled: pulumi.Input<boolean>;
    readonly entitySelectors: pulumi.Input<pulumi.Input<inputs.CseMatchRuleEntitySelector>[]>;
    readonly expression: pulumi.Input<string>;
    readonly isPrototype?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly nameExpression: pulumi.Input<string>;
    readonly severityMapping: pulumi.Input<inputs.CseMatchRuleSeverityMapping>;
    readonly summaryExpression?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
