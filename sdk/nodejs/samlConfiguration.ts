// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic SAML Configuration](https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const exampleSamlConfiguration = new sumologic.SamlConfiguration("exampleSamlConfiguration", {
 *     authnRequestUrl: "",
 *     configurationName: "SumoLogic",
 *     debugMode: false,
 *     disableRequestedAuthnContext: false,
 *     emailAttribute: "",
 *     isRedirectBinding: false,
 *     issuer: "http://www.okta.com/abxcseyuiwelflkdjh",
 *     logoutEnabled: false,
 *     logoutUrl: "",
 *     onDemandProvisioningEnabled: {
 *         firstNameAttribute: "firstName",
 *         lastNameAttribute: "lastName",
 *         onDemandProvisioningRoles: ["Administrator"],
 *     },
 *     rolesAttribute: "Administrator",
 *     signAuthnRequest: false,
 *     spInitiatedLoginEnabled: false,
 *     spInitiatedLoginPath: "",
 *     x509cert1: "string",
 *     x509cert2: "",
 *     x509cert3: "",
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `spInitiatedLoginPath` - (Optional) The identifier used to generate a unique URL for user login. Defaults to "".
 * - `configurationName` - (Required) Name of the SSO policy or another name used to describe the policy internally.
 * - `issuer` - (Required) The unique URL assigned to the organization by the SAML Identity Provider.
 * - `spInitiatedLoginEnabled` - (Optional) True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
 * - `authnRequestUrl` - (Optional) The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
 * - `x509cert1` - (Required) The certificate is used to verify the signature in SAML assertions.
 * - `x509cert2` - (Optional) The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
 * - `x509cert3` - (Optional) The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
 * - `onDemandProvisioningEnabled` - (Block List, Max: 1, Optional) The configuration for on-demand provisioning. See onDemandProvisioningEnabled schema for details.
 * - `rolesAttribute` - (Optional) The role that Sumo Logic will assign to users when they sign in. Defaults to "".
 * - `logoutEnabled` - (Optional) True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
 * - `logoutUrl` - (Optional) The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
 * - `emailAttribute` - (Optional) The email address of the new user account. Defaults to "".
 * - `debugMode` - (Optional) True if additional details are included when a user fails to sign in. Defaults to false.
 * - `signAuthnRequest` - (Optional) True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
 * - `disableRequestedAuthnContext` - (Optional) True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
 * - `isRedirectBinding` - (Optional) True if the SAML binding is of HTTP Redirect type. Defaults to false.
 *
 * ### Schema for `onDemandProvisioningEnabled`
 * - `firstNameAttribute` - (Optional) First name attribute of the new user account. Defaults to "".
 * - `lastNameAttribute` - (Optional) Last name attribute of the new user account. Defaults to "".
 * - `onDemandProvisioningRoles` - (Required) List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
 *
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * - `id` - Unique identifier for the SAML Configuration.
 * - `certificate` - Authentication Request Signing Certificate for the user.
 * - `assertionConsumerUrl` - The URL on Sumo Logic where the IdP will redirect to with its authentication response.
 * - `entityId` - A unique identifier that is the intended audience of the SAML assertion.
 *
 * ## Import
 *
 * SAML Configuration can be imported using the SAML configuration id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/samlConfiguration:SamlConfiguration example 00000000454A5979
 * ```
 *
 *  [1]https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On
 */
export class SamlConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SamlConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlConfigurationState, opts?: pulumi.CustomResourceOptions): SamlConfiguration {
        return new SamlConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/samlConfiguration:SamlConfiguration';

    /**
     * Returns true if the given object is an instance of SamlConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlConfiguration.__pulumiType;
    }

    public /*out*/ readonly assertionConsumerUrl!: pulumi.Output<string>;
    public readonly authnRequestUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    public readonly configurationName!: pulumi.Output<string>;
    public readonly debugMode!: pulumi.Output<boolean | undefined>;
    public readonly disableRequestedAuthnContext!: pulumi.Output<boolean | undefined>;
    public readonly emailAttribute!: pulumi.Output<string | undefined>;
    public /*out*/ readonly entityId!: pulumi.Output<string>;
    public readonly isRedirectBinding!: pulumi.Output<boolean | undefined>;
    public readonly issuer!: pulumi.Output<string>;
    public readonly logoutEnabled!: pulumi.Output<boolean | undefined>;
    public readonly logoutUrl!: pulumi.Output<string | undefined>;
    public readonly onDemandProvisioningEnabled!: pulumi.Output<outputs.SamlConfigurationOnDemandProvisioningEnabled | undefined>;
    public readonly rolesAttribute!: pulumi.Output<string | undefined>;
    public readonly signAuthnRequest!: pulumi.Output<boolean | undefined>;
    public readonly spInitiatedLoginEnabled!: pulumi.Output<boolean | undefined>;
    public readonly spInitiatedLoginPath!: pulumi.Output<string | undefined>;
    public readonly x509cert1!: pulumi.Output<string>;
    public readonly x509cert2!: pulumi.Output<string | undefined>;
    public readonly x509cert3!: pulumi.Output<string | undefined>;

    /**
     * Create a SamlConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlConfigurationArgs | SamlConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlConfigurationState | undefined;
            inputs["assertionConsumerUrl"] = state ? state.assertionConsumerUrl : undefined;
            inputs["authnRequestUrl"] = state ? state.authnRequestUrl : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["configurationName"] = state ? state.configurationName : undefined;
            inputs["debugMode"] = state ? state.debugMode : undefined;
            inputs["disableRequestedAuthnContext"] = state ? state.disableRequestedAuthnContext : undefined;
            inputs["emailAttribute"] = state ? state.emailAttribute : undefined;
            inputs["entityId"] = state ? state.entityId : undefined;
            inputs["isRedirectBinding"] = state ? state.isRedirectBinding : undefined;
            inputs["issuer"] = state ? state.issuer : undefined;
            inputs["logoutEnabled"] = state ? state.logoutEnabled : undefined;
            inputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            inputs["onDemandProvisioningEnabled"] = state ? state.onDemandProvisioningEnabled : undefined;
            inputs["rolesAttribute"] = state ? state.rolesAttribute : undefined;
            inputs["signAuthnRequest"] = state ? state.signAuthnRequest : undefined;
            inputs["spInitiatedLoginEnabled"] = state ? state.spInitiatedLoginEnabled : undefined;
            inputs["spInitiatedLoginPath"] = state ? state.spInitiatedLoginPath : undefined;
            inputs["x509cert1"] = state ? state.x509cert1 : undefined;
            inputs["x509cert2"] = state ? state.x509cert2 : undefined;
            inputs["x509cert3"] = state ? state.x509cert3 : undefined;
        } else {
            const args = argsOrState as SamlConfigurationArgs | undefined;
            if ((!args || args.configurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationName'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.x509cert1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'x509cert1'");
            }
            inputs["authnRequestUrl"] = args ? args.authnRequestUrl : undefined;
            inputs["configurationName"] = args ? args.configurationName : undefined;
            inputs["debugMode"] = args ? args.debugMode : undefined;
            inputs["disableRequestedAuthnContext"] = args ? args.disableRequestedAuthnContext : undefined;
            inputs["emailAttribute"] = args ? args.emailAttribute : undefined;
            inputs["isRedirectBinding"] = args ? args.isRedirectBinding : undefined;
            inputs["issuer"] = args ? args.issuer : undefined;
            inputs["logoutEnabled"] = args ? args.logoutEnabled : undefined;
            inputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            inputs["onDemandProvisioningEnabled"] = args ? args.onDemandProvisioningEnabled : undefined;
            inputs["rolesAttribute"] = args ? args.rolesAttribute : undefined;
            inputs["signAuthnRequest"] = args ? args.signAuthnRequest : undefined;
            inputs["spInitiatedLoginEnabled"] = args ? args.spInitiatedLoginEnabled : undefined;
            inputs["spInitiatedLoginPath"] = args ? args.spInitiatedLoginPath : undefined;
            inputs["x509cert1"] = args ? args.x509cert1 : undefined;
            inputs["x509cert2"] = args ? args.x509cert2 : undefined;
            inputs["x509cert3"] = args ? args.x509cert3 : undefined;
            inputs["assertionConsumerUrl"] = undefined /*out*/;
            inputs["certificate"] = undefined /*out*/;
            inputs["entityId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SamlConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamlConfiguration resources.
 */
export interface SamlConfigurationState {
    assertionConsumerUrl?: pulumi.Input<string>;
    authnRequestUrl?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    configurationName?: pulumi.Input<string>;
    debugMode?: pulumi.Input<boolean>;
    disableRequestedAuthnContext?: pulumi.Input<boolean>;
    emailAttribute?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    isRedirectBinding?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    logoutEnabled?: pulumi.Input<boolean>;
    logoutUrl?: pulumi.Input<string>;
    onDemandProvisioningEnabled?: pulumi.Input<inputs.SamlConfigurationOnDemandProvisioningEnabled>;
    rolesAttribute?: pulumi.Input<string>;
    signAuthnRequest?: pulumi.Input<boolean>;
    spInitiatedLoginEnabled?: pulumi.Input<boolean>;
    spInitiatedLoginPath?: pulumi.Input<string>;
    x509cert1?: pulumi.Input<string>;
    x509cert2?: pulumi.Input<string>;
    x509cert3?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SamlConfiguration resource.
 */
export interface SamlConfigurationArgs {
    authnRequestUrl?: pulumi.Input<string>;
    configurationName: pulumi.Input<string>;
    debugMode?: pulumi.Input<boolean>;
    disableRequestedAuthnContext?: pulumi.Input<boolean>;
    emailAttribute?: pulumi.Input<string>;
    isRedirectBinding?: pulumi.Input<boolean>;
    issuer: pulumi.Input<string>;
    logoutEnabled?: pulumi.Input<boolean>;
    logoutUrl?: pulumi.Input<string>;
    onDemandProvisioningEnabled?: pulumi.Input<inputs.SamlConfigurationOnDemandProvisioningEnabled>;
    rolesAttribute?: pulumi.Input<string>;
    signAuthnRequest?: pulumi.Input<boolean>;
    spInitiatedLoginEnabled?: pulumi.Input<boolean>;
    spInitiatedLoginPath?: pulumi.Input<string>;
    x509cert1: pulumi.Input<string>;
    x509cert2?: pulumi.Input<string>;
    x509cert3?: pulumi.Input<string>;
}
