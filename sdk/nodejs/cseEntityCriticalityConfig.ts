// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Sumologic CSE Entity Criticality Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const entityCriticalityConfig = new sumologic.CseEntityCriticalityConfig("entity_criticality_config", {
 *     severityExpression: "severity + 2",
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `name` - (Required) Human friendly and unique name. Examples: "Executive Laptop", "Bastion Host".
 * - `severityExpression` - (Required) Algebraic expression representing this entity\'s criticality. Examples: "severity * 2", "severity - 5", "severity / 3".
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the entity criticality configuration.
 *
 * ## Import
 *
 * Entity criticality configuration can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/cseEntityCriticalityConfig:CseEntityCriticalityConfig entity_criticality_config id
 * ```
 */
export class CseEntityCriticalityConfig extends pulumi.CustomResource {
    /**
     * Get an existing CseEntityCriticalityConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseEntityCriticalityConfigState, opts?: pulumi.CustomResourceOptions): CseEntityCriticalityConfig {
        return new CseEntityCriticalityConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseEntityCriticalityConfig:CseEntityCriticalityConfig';

    /**
     * Returns true if the given object is an instance of CseEntityCriticalityConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseEntityCriticalityConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseEntityCriticalityConfig.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    public readonly severityExpression!: pulumi.Output<string>;

    /**
     * Create a CseEntityCriticalityConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseEntityCriticalityConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseEntityCriticalityConfigArgs | CseEntityCriticalityConfigState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseEntityCriticalityConfigState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["severityExpression"] = state ? state.severityExpression : undefined;
        } else {
            const args = argsOrState as CseEntityCriticalityConfigArgs | undefined;
            if ((!args || args.severityExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severityExpression'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["severityExpression"] = args ? args.severityExpression : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CseEntityCriticalityConfig.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CseEntityCriticalityConfig resources.
 */
export interface CseEntityCriticalityConfigState {
    name?: pulumi.Input<string>;
    severityExpression?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CseEntityCriticalityConfig resource.
 */
export interface CseEntityCriticalityConfigArgs {
    name?: pulumi.Input<string>;
    severityExpression: pulumi.Input<string>;
}
