// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a CSE Rule Tuning Expression.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const ruleTuningExpression = new sumologic.CseRuleTuningExpression("rule_tuning_expression", {
 *     description: "New Rule Tuning Description",
 *     enabled: true,
 *     exclude: true,
 *     expression: "accountId = 1234",
 *     isGlobal: false,
 *     ruleIds: ["LEGACY-S00084"],
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `name` - (Required) The name of the rule tuning expression.
 * - `description` - (Required) The description of the rule tuning expression.
 * - `expression` - (Required) Expression to match.
 * - `enabled` - (Required) Enabled flag.
 * - `exclude` - (Required) Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
 * - `isGlobal` - (Required) Set to true if this tuning expression should be applied to all rules.
 * - `ruleIds` - (Required) List of rule IDs, for the tuning expression to be applied. ( Empty if isGlobal set to true)
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the rule tuning expression.
 *
 * ## Import
 *
 * Rule tuning expression can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression rule_tuning_expression id
 * ```
 */
export class CseRuleTuningExpression extends pulumi.CustomResource {
    /**
     * Get an existing CseRuleTuningExpression resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseRuleTuningExpressionState, opts?: pulumi.CustomResourceOptions): CseRuleTuningExpression {
        return new CseRuleTuningExpression(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression';

    /**
     * Returns true if the given object is an instance of CseRuleTuningExpression.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseRuleTuningExpression {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseRuleTuningExpression.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly exclude!: pulumi.Output<boolean>;
    public readonly expression!: pulumi.Output<string>;
    public readonly isGlobal!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly ruleIds!: pulumi.Output<string[]>;

    /**
     * Create a CseRuleTuningExpression resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseRuleTuningExpressionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseRuleTuningExpressionArgs | CseRuleTuningExpressionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseRuleTuningExpressionState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["exclude"] = state ? state.exclude : undefined;
            inputs["expression"] = state ? state.expression : undefined;
            inputs["isGlobal"] = state ? state.isGlobal : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ruleIds"] = state ? state.ruleIds : undefined;
        } else {
            const args = argsOrState as CseRuleTuningExpressionArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.exclude === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exclude'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.isGlobal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isGlobal'");
            }
            if ((!args || args.ruleIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleIds'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["exclude"] = args ? args.exclude : undefined;
            inputs["expression"] = args ? args.expression : undefined;
            inputs["isGlobal"] = args ? args.isGlobal : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ruleIds"] = args ? args.ruleIds : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CseRuleTuningExpression.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CseRuleTuningExpression resources.
 */
export interface CseRuleTuningExpressionState {
    readonly description?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly exclude?: pulumi.Input<boolean>;
    readonly expression?: pulumi.Input<string>;
    readonly isGlobal?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CseRuleTuningExpression resource.
 */
export interface CseRuleTuningExpressionArgs {
    readonly description: pulumi.Input<string>;
    readonly enabled: pulumi.Input<boolean>;
    readonly exclude: pulumi.Input<boolean>;
    readonly expression: pulumi.Input<string>;
    readonly isGlobal: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly ruleIds: pulumi.Input<pulumi.Input<string>[]>;
}
