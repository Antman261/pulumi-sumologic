// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * !> **WARNING:** This data source is deprecated and will be removed in the next major version.
 *
 * Provides a Sumologic Polling source. This source is used to import data from various AWS products, eg. AWS S3 buckets, Cloudwatch Metrics etc.
 *
 * __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tagfilters = [
 *     {
 *         type: "TagFilters",
 *         namespace: "All",
 *         tags: ["k3=v3"],
 *     },
 *     {
 *         type: "TagFilters",
 *         namespace: "AWS/Route53",
 *         tags: ["k1=v1"],
 *     },
 *     {
 *         type: "TagFilters",
 *         namespace: "AWS/S3",
 *         tags: ["k2=v2"],
 *     },
 * ];
 * const collector = new sumologic.Collector("collector", {description: "Just testing this"});
 * const s3Audit = new sumologic.PollingSource("s3Audit", {
 *     description: "My description",
 *     category: "aws/s3audit",
 *     contentType: "AwsS3AuditBucket",
 *     scanInterval: 300000,
 *     paused: false,
 *     collectorId: collector.id,
 *     filters: [{
 *         name: "Exclude Comments",
 *         filterType: "Exclude",
 *         regexp: "#.*",
 *     }],
 *     authentication: {
 *         type: "S3BucketAuthentication",
 *         accessKey: "someKey",
 *         secretKey: "******",
 *     },
 *     path: {
 *         type: "S3BucketPathExpression",
 *         bucketName: "Bucket1",
 *         pathExpression: "*",
 *     },
 * });
 * const cwMetrics = new sumologic.PollingSource("cwMetrics", {
 *     description: "My description",
 *     category: "aws/cw",
 *     contentType: "AwsCloudWatch",
 *     scanInterval: 300000,
 *     paused: false,
 *     collectorId: collector.id,
 *     authentication: {
 *         type: "AWSRoleBasedAuthentication",
 *         roleArn: "arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI",
 *     },
 *     path: {
 *         type: "CloudWatchPath",
 *         limitToRegions: ["us-west-2"],
 *         limitToNamespaces: [
 *             "AWS/Route53",
 *             "AWS/S3",
 *             "customNamespace",
 *         ],
 *         dynamic: [{
 *             forEach: tagfilters,
 *             content: [{
 *                 type: tag_filters.value.type,
 *                 namespace: tag_filters.value.namespace,
 *                 tags: tag_filters.value.tags,
 *             }],
 *         }],
 *     },
 * });
 * ```
 * ## Argument reference
 *
 * In addition to the common properties, the following arguments are supported:
 *
 *  - `contentType` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
 *  - `scanInterval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
 *  - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.
 *  - `authentication` - (Required) Authentication details for connecting to the S3 bucket.
 *      + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`
 *      + `accessKey` - (Required) Your AWS access key if using type `S3BucketAuthentication`
 *      + `secretKey` - (Required) Your AWS secret key if using type `S3BucketAuthentication`
 *      + `roleArn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`
 *  - `path` - (Required) The location to scan for new data.
 *      + `type` - (Required) type of polling source. Can be one of `S3BucketPathExpression` or  `CloudWatchPath`
 *      + `bucketName` - (Optional) The name of the bucket. This is needed if using type `S3BucketPathExpression`.
 *      + `pathExpression` - (Optional) The path to the data. This is needed if using type `S3BucketPathExpression`.
 *      + `limitToRegions` - (Optional) List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
 *      + `limitToNamespaces` - (Optional) List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
 *      + `tagFilters` - (Optional) Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
 *           + `type` - This value has to be set to `TagFilters`
 *           + `namespace` - Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
 *           + `tags` - List of key-value pairs of tag filters. Eg: `["k3=v3"]`
 *
 * ## Import
 *
 * Polling sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/pollingSource:PollingSource test 123/456
 * ```
 *
 *  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/pollingSource:PollingSource test my-test-collector/my-test-source
 * ```
 *
 *  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
 */
export class PollingSource extends pulumi.CustomResource {
    /**
     * Get an existing PollingSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PollingSourceState, opts?: pulumi.CustomResourceOptions): PollingSource {
        return new PollingSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/pollingSource:PollingSource';

    /**
     * Returns true if the given object is an instance of PollingSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PollingSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PollingSource.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<outputs.PollingSourceAuthentication>;
    public readonly automaticDateParsing!: pulumi.Output<boolean | undefined>;
    public readonly category!: pulumi.Output<string | undefined>;
    public readonly collectorId!: pulumi.Output<number>;
    public readonly contentType!: pulumi.Output<string>;
    public readonly cutoffRelativeTime!: pulumi.Output<string | undefined>;
    public readonly cutoffTimestamp!: pulumi.Output<number | undefined>;
    public readonly defaultDateFormats!: pulumi.Output<outputs.PollingSourceDefaultDateFormat[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly filters!: pulumi.Output<outputs.PollingSourceFilter[] | undefined>;
    public readonly forceTimezone!: pulumi.Output<boolean | undefined>;
    public readonly hostName!: pulumi.Output<string | undefined>;
    public readonly manualPrefixRegexp!: pulumi.Output<string | undefined>;
    public readonly multilineProcessingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<outputs.PollingSourcePath>;
    public readonly paused!: pulumi.Output<boolean>;
    public readonly scanInterval!: pulumi.Output<number>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    /**
     * The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    public readonly useAutolineMatching!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PollingSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PollingSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PollingSourceArgs | PollingSourceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PollingSourceState | undefined;
            inputs["authentication"] = state ? state.authentication : undefined;
            inputs["automaticDateParsing"] = state ? state.automaticDateParsing : undefined;
            inputs["category"] = state ? state.category : undefined;
            inputs["collectorId"] = state ? state.collectorId : undefined;
            inputs["contentType"] = state ? state.contentType : undefined;
            inputs["cutoffRelativeTime"] = state ? state.cutoffRelativeTime : undefined;
            inputs["cutoffTimestamp"] = state ? state.cutoffTimestamp : undefined;
            inputs["defaultDateFormats"] = state ? state.defaultDateFormats : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fields"] = state ? state.fields : undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["forceTimezone"] = state ? state.forceTimezone : undefined;
            inputs["hostName"] = state ? state.hostName : undefined;
            inputs["manualPrefixRegexp"] = state ? state.manualPrefixRegexp : undefined;
            inputs["multilineProcessingEnabled"] = state ? state.multilineProcessingEnabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["paused"] = state ? state.paused : undefined;
            inputs["scanInterval"] = state ? state.scanInterval : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["useAutolineMatching"] = state ? state.useAutolineMatching : undefined;
        } else {
            const args = argsOrState as PollingSourceArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.collectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectorId'");
            }
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.paused === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paused'");
            }
            if ((!args || args.scanInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scanInterval'");
            }
            inputs["authentication"] = args ? args.authentication : undefined;
            inputs["automaticDateParsing"] = args ? args.automaticDateParsing : undefined;
            inputs["category"] = args ? args.category : undefined;
            inputs["collectorId"] = args ? args.collectorId : undefined;
            inputs["contentType"] = args ? args.contentType : undefined;
            inputs["cutoffRelativeTime"] = args ? args.cutoffRelativeTime : undefined;
            inputs["cutoffTimestamp"] = args ? args.cutoffTimestamp : undefined;
            inputs["defaultDateFormats"] = args ? args.defaultDateFormats : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["fields"] = args ? args.fields : undefined;
            inputs["filters"] = args ? args.filters : undefined;
            inputs["forceTimezone"] = args ? args.forceTimezone : undefined;
            inputs["hostName"] = args ? args.hostName : undefined;
            inputs["manualPrefixRegexp"] = args ? args.manualPrefixRegexp : undefined;
            inputs["multilineProcessingEnabled"] = args ? args.multilineProcessingEnabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["paused"] = args ? args.paused : undefined;
            inputs["scanInterval"] = args ? args.scanInterval : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
            inputs["useAutolineMatching"] = args ? args.useAutolineMatching : undefined;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(PollingSource.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PollingSource resources.
 */
export interface PollingSourceState {
    readonly authentication?: pulumi.Input<inputs.PollingSourceAuthentication>;
    readonly automaticDateParsing?: pulumi.Input<boolean>;
    readonly category?: pulumi.Input<string>;
    readonly collectorId?: pulumi.Input<number>;
    readonly contentType?: pulumi.Input<string>;
    readonly cutoffRelativeTime?: pulumi.Input<string>;
    readonly cutoffTimestamp?: pulumi.Input<number>;
    readonly defaultDateFormats?: pulumi.Input<pulumi.Input<inputs.PollingSourceDefaultDateFormat>[]>;
    readonly description?: pulumi.Input<string>;
    readonly fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly filters?: pulumi.Input<pulumi.Input<inputs.PollingSourceFilter>[]>;
    readonly forceTimezone?: pulumi.Input<boolean>;
    readonly hostName?: pulumi.Input<string>;
    readonly manualPrefixRegexp?: pulumi.Input<string>;
    readonly multilineProcessingEnabled?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<inputs.PollingSourcePath>;
    readonly paused?: pulumi.Input<boolean>;
    readonly scanInterval?: pulumi.Input<number>;
    readonly timezone?: pulumi.Input<string>;
    /**
     * The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).
     */
    readonly url?: pulumi.Input<string>;
    readonly useAutolineMatching?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PollingSource resource.
 */
export interface PollingSourceArgs {
    readonly authentication: pulumi.Input<inputs.PollingSourceAuthentication>;
    readonly automaticDateParsing?: pulumi.Input<boolean>;
    readonly category?: pulumi.Input<string>;
    readonly collectorId: pulumi.Input<number>;
    readonly contentType: pulumi.Input<string>;
    readonly cutoffRelativeTime?: pulumi.Input<string>;
    readonly cutoffTimestamp?: pulumi.Input<number>;
    readonly defaultDateFormats?: pulumi.Input<pulumi.Input<inputs.PollingSourceDefaultDateFormat>[]>;
    readonly description?: pulumi.Input<string>;
    readonly fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly filters?: pulumi.Input<pulumi.Input<inputs.PollingSourceFilter>[]>;
    readonly forceTimezone?: pulumi.Input<boolean>;
    readonly hostName?: pulumi.Input<string>;
    readonly manualPrefixRegexp?: pulumi.Input<string>;
    readonly multilineProcessingEnabled?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly path: pulumi.Input<inputs.PollingSourcePath>;
    readonly paused: pulumi.Input<boolean>;
    readonly scanInterval: pulumi.Input<number>;
    readonly timezone?: pulumi.Input<string>;
    readonly useAutolineMatching?: pulumi.Input<boolean>;
}
