// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Sets the Sumologic Policies. Since each policy is global for the entire organization, please ensure that only a single
 * instance of this resource is defined. The behavior for defining more than one policies resource is undefined.
 *
 * The following policies are supported:
 * - [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index)
 * - [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards)
 * - [Maximum Web Session Timeout Policy](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout)
 * - [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index)
 * - [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org)
 * - [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const examplePolicies = new sumologic.Policies("example_policies", {
 *     audit: false,
 *     dataAccessLevel: false,
 *     maxUserSessionTimeout: "7d",
 *     searchAudit: false,
 *     shareDashboardsOutsideOrganization: false,
 *     userConcurrentSessionsLimit: {
 *         enabled: false,
 *         maxConcurrentSessions: 100,
 *     },
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `audit` - (Required) Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
 * - `dataAccessLevel` - (Required) Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
 * - `maxUserSessionTimeout` - (Required) The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
 * - `searchAudit` - (Required) Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
 * - `shareDashboardsOutsideOrganization` - (Required) Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
 * - `userConcurrentSessionsLimit` - (Block List, Max: 1, Required) The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See userConcurrentSessionsLimit schema for details.
 *
 * ### Schema for `userConcurrentSessionsLimit`
 * - `enabled` - (Required) Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
 * - `maxConcurrentSessions` - (Optional) Maximum number of concurrent sessions a user may have. Defaults to `100`.
 *
 * ## Import
 *
 * Policies can be imported using the id `org-policies`. hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/policies:Policies example_policies org-policies
 * ```
 *
 *  [1]https://help.sumologic.com/Manage/Security/Audit-Index [2]https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards [3]https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout [4]https://help.sumologic.com/Manage/Security/Search_Audit_Index [5]https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org [6]https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions
 */
export class Policies extends pulumi.CustomResource {
    /**
     * Get an existing Policies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoliciesState, opts?: pulumi.CustomResourceOptions): Policies {
        return new Policies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/policies:Policies';

    /**
     * Returns true if the given object is an instance of Policies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policies.__pulumiType;
    }

    public readonly audit!: pulumi.Output<boolean>;
    public readonly dataAccessLevel!: pulumi.Output<boolean>;
    public readonly maxUserSessionTimeout!: pulumi.Output<string>;
    public readonly searchAudit!: pulumi.Output<boolean>;
    public readonly shareDashboardsOutsideOrganization!: pulumi.Output<boolean>;
    public readonly userConcurrentSessionsLimit!: pulumi.Output<outputs.PoliciesUserConcurrentSessionsLimit>;

    /**
     * Create a Policies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoliciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoliciesArgs | PoliciesState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PoliciesState | undefined;
            inputs["audit"] = state ? state.audit : undefined;
            inputs["dataAccessLevel"] = state ? state.dataAccessLevel : undefined;
            inputs["maxUserSessionTimeout"] = state ? state.maxUserSessionTimeout : undefined;
            inputs["searchAudit"] = state ? state.searchAudit : undefined;
            inputs["shareDashboardsOutsideOrganization"] = state ? state.shareDashboardsOutsideOrganization : undefined;
            inputs["userConcurrentSessionsLimit"] = state ? state.userConcurrentSessionsLimit : undefined;
        } else {
            const args = argsOrState as PoliciesArgs | undefined;
            if ((!args || args.audit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'audit'");
            }
            if ((!args || args.dataAccessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataAccessLevel'");
            }
            if ((!args || args.maxUserSessionTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxUserSessionTimeout'");
            }
            if ((!args || args.searchAudit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchAudit'");
            }
            if ((!args || args.shareDashboardsOutsideOrganization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareDashboardsOutsideOrganization'");
            }
            if ((!args || args.userConcurrentSessionsLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userConcurrentSessionsLimit'");
            }
            inputs["audit"] = args ? args.audit : undefined;
            inputs["dataAccessLevel"] = args ? args.dataAccessLevel : undefined;
            inputs["maxUserSessionTimeout"] = args ? args.maxUserSessionTimeout : undefined;
            inputs["searchAudit"] = args ? args.searchAudit : undefined;
            inputs["shareDashboardsOutsideOrganization"] = args ? args.shareDashboardsOutsideOrganization : undefined;
            inputs["userConcurrentSessionsLimit"] = args ? args.userConcurrentSessionsLimit : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Policies.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policies resources.
 */
export interface PoliciesState {
    audit?: pulumi.Input<boolean>;
    dataAccessLevel?: pulumi.Input<boolean>;
    maxUserSessionTimeout?: pulumi.Input<string>;
    searchAudit?: pulumi.Input<boolean>;
    shareDashboardsOutsideOrganization?: pulumi.Input<boolean>;
    userConcurrentSessionsLimit?: pulumi.Input<inputs.PoliciesUserConcurrentSessionsLimit>;
}

/**
 * The set of arguments for constructing a Policies resource.
 */
export interface PoliciesArgs {
    audit: pulumi.Input<boolean>;
    dataAccessLevel: pulumi.Input<boolean>;
    maxUserSessionTimeout: pulumi.Input<string>;
    searchAudit: pulumi.Input<boolean>;
    shareDashboardsOutsideOrganization: pulumi.Input<boolean>;
    userConcurrentSessionsLimit: pulumi.Input<inputs.PoliciesUserConcurrentSessionsLimit>;
}
