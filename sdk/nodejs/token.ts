// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic Token](https://help.sumologic.com/Manage/Security/Installation_Tokens).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const exampleToken = new sumologic.Token("example_token", {
 *     description: "Testing resource sumologic_token",
 *     status: "Active",
 *     type: "CollectorRegistration",
 * });
 * ```
 *
 * ## Import
 *
 * Tokens can be imported using the name, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/token:Token test id
 * ```
 *
 *  [1]https://help.sumologic.com/Manage/Security/Installation_Tokens
 */
export class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenState, opts?: pulumi.CustomResourceOptions): Token {
        return new Token(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/token:Token';

    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Token {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }

    /**
     * The description of the token.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The encoded token for collector registration.
     */
    public /*out*/ readonly encodedTokenAndUrl!: pulumi.Output<string>;
    /**
     * Display name of the token. This must be unique across all of the tokens.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Status of the token. Valid values:
     * - `Active`
     * - `Inactive`
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Type of the token. Valid value:
     * - `CollectorRegistration`.
     */
    public readonly type!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a Token resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenArgs | TokenState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["encodedTokenAndUrl"] = state ? state.encodedTokenAndUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TokenArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["encodedTokenAndUrl"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Token.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Token resources.
 */
export interface TokenState {
    /**
     * The description of the token.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The encoded token for collector registration.
     */
    readonly encodedTokenAndUrl?: pulumi.Input<string>;
    /**
     * Display name of the token. This must be unique across all of the tokens.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Status of the token. Valid values:
     * - `Active`
     * - `Inactive`
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Type of the token. Valid value:
     * - `CollectorRegistration`.
     */
    readonly type?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Token resource.
 */
export interface TokenArgs {
    /**
     * The description of the token.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Display name of the token. This must be unique across all of the tokens.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Status of the token. Valid values:
     * - `Active`
     * - `Inactive`
     */
    readonly status: pulumi.Input<string>;
    /**
     * Type of the token. Valid value:
     * - `CollectorRegistration`.
     */
    readonly type: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}
