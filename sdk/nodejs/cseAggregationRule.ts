// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Sumo Logic CSE [Aggregation Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/09_Write_an_Aggregation_Rule).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const aggregationRule = new sumologic.CseAggregationRule("aggregation_rule", {
 *     aggregationFunctions: [{
 *         arguments: ["metadata_deviceEventId"],
 *         function: "count_distinct",
 *         name: "distinct_eventid_count",
 *     }],
 *     descriptionExpression: "Signal description",
 *     enabled: true,
 *     entitySelectors: [{
 *         entityType: "_ip",
 *         expression: "srcDevice_ip",
 *     }],
 *     groupByEntity: true,
 *     groupByFields: ["dstDevice_hostname"],
 *     isPrototype: false,
 *     matchExpression: "objectType = \"Network\"",
 *     nameExpression: "Signal name",
 *     severityMapping: {
 *         default: 5,
 *         type: "constant",
 *     },
 *     summaryExpression: "Signal summary",
 *     tags: ["_mitreAttackTactic:TA0009"],
 *     triggerExpression: "distinct_eventid_count > 5",
 *     windowSize: "T30M",
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `aggregationFunctions` - (Required) One or more named aggregation functions
 *   + `name` - (Required) The name to use to reference the result in the triggerExpression
 *   + `function` - (Required) The function to aggregate with
 *   + `arguments` - (Required) One or more expressions to pass as arguments to the function
 * - `descriptionExpression` - (Required) The description of the generated Signals
 * - `enabled` - (Required) Whether the rule should generate Signals
 * - `entitySelectors` - (Required) The entities to generate Signals on
 *   + `entityType` - (Required) The type of the entity to generate the Signal on.
 *   + `expression` - (Required) The expression or field name to generate the Signal on.
 * - `groupByEntity` - (Optional; defaults to true) Whether to group records by the specified entity fields
 * - `groupByFields` - (Optional) A list of fields to group records by
 * - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
 * - `matchExpression` - (Required) The expression for which records to match on
 * - `name` - (Required) The name of the Rule
 * - `nameExpression` - (Required) The name of the generated Signals
 * - `severityMapping` - (Required) The configuration of how the severity of the Signals should be mapped from the Records
 *   + `type` - (Required) Whether to set a constant severity ("constant"), set the severity based on the direct value of a record field ("fieldValue"), or map a record field value to a severity ("fieldValueMapping").
 *   + `default` - (Optional) The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
 *   + `field` - (Optional) The field to use in the "fieldValue"/"fieldValueMapping" cases.
 *   + `mapping` - (Optional) The map of record values to severities to use in the "fieldValueMapping" case
 *     - `type` - (Required) Must be set to "eq" currently
 *     - `from` - (Required) The record value to map from
 *     - `to` - (Required) The severity value to map to
 * - `summaryExpression` - (Optional) The summary of the generated Signals
 * - `tags` - (Required) The tags of the generated Signals
 * - `triggerExpression` - (Required) The expression to determine whether a Signal should be created based on the aggregation results
 * - `windowSize` - (Required) How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the aggregation rule.
 *
 * ## Import
 *
 * Aggregation Rules can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/cseAggregationRule:CseAggregationRule aggregation_rule id
 * ```
 */
export class CseAggregationRule extends pulumi.CustomResource {
    /**
     * Get an existing CseAggregationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseAggregationRuleState, opts?: pulumi.CustomResourceOptions): CseAggregationRule {
        return new CseAggregationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseAggregationRule:CseAggregationRule';

    /**
     * Returns true if the given object is an instance of CseAggregationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseAggregationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseAggregationRule.__pulumiType;
    }

    public readonly aggregationFunctions!: pulumi.Output<outputs.CseAggregationRuleAggregationFunction[]>;
    public readonly descriptionExpression!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly entitySelectors!: pulumi.Output<outputs.CseAggregationRuleEntitySelector[]>;
    public readonly groupByEntity!: pulumi.Output<boolean | undefined>;
    public readonly groupByFields!: pulumi.Output<string[] | undefined>;
    public readonly isPrototype!: pulumi.Output<boolean | undefined>;
    public readonly matchExpression!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameExpression!: pulumi.Output<string>;
    public readonly severityMapping!: pulumi.Output<outputs.CseAggregationRuleSeverityMapping>;
    public readonly summaryExpression!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly triggerExpression!: pulumi.Output<string>;
    public readonly windowSize!: pulumi.Output<string>;

    /**
     * Create a CseAggregationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseAggregationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseAggregationRuleArgs | CseAggregationRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseAggregationRuleState | undefined;
            inputs["aggregationFunctions"] = state ? state.aggregationFunctions : undefined;
            inputs["descriptionExpression"] = state ? state.descriptionExpression : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["entitySelectors"] = state ? state.entitySelectors : undefined;
            inputs["groupByEntity"] = state ? state.groupByEntity : undefined;
            inputs["groupByFields"] = state ? state.groupByFields : undefined;
            inputs["isPrototype"] = state ? state.isPrototype : undefined;
            inputs["matchExpression"] = state ? state.matchExpression : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameExpression"] = state ? state.nameExpression : undefined;
            inputs["severityMapping"] = state ? state.severityMapping : undefined;
            inputs["summaryExpression"] = state ? state.summaryExpression : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["triggerExpression"] = state ? state.triggerExpression : undefined;
            inputs["windowSize"] = state ? state.windowSize : undefined;
        } else {
            const args = argsOrState as CseAggregationRuleArgs | undefined;
            if ((!args || args.aggregationFunctions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregationFunctions'");
            }
            if ((!args || args.descriptionExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'descriptionExpression'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.entitySelectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySelectors'");
            }
            if ((!args || args.matchExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchExpression'");
            }
            if ((!args || args.nameExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameExpression'");
            }
            if ((!args || args.severityMapping === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severityMapping'");
            }
            if ((!args || args.triggerExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerExpression'");
            }
            if ((!args || args.windowSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowSize'");
            }
            inputs["aggregationFunctions"] = args ? args.aggregationFunctions : undefined;
            inputs["descriptionExpression"] = args ? args.descriptionExpression : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["entitySelectors"] = args ? args.entitySelectors : undefined;
            inputs["groupByEntity"] = args ? args.groupByEntity : undefined;
            inputs["groupByFields"] = args ? args.groupByFields : undefined;
            inputs["isPrototype"] = args ? args.isPrototype : undefined;
            inputs["matchExpression"] = args ? args.matchExpression : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameExpression"] = args ? args.nameExpression : undefined;
            inputs["severityMapping"] = args ? args.severityMapping : undefined;
            inputs["summaryExpression"] = args ? args.summaryExpression : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["triggerExpression"] = args ? args.triggerExpression : undefined;
            inputs["windowSize"] = args ? args.windowSize : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CseAggregationRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CseAggregationRule resources.
 */
export interface CseAggregationRuleState {
    aggregationFunctions?: pulumi.Input<pulumi.Input<inputs.CseAggregationRuleAggregationFunction>[]>;
    descriptionExpression?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    entitySelectors?: pulumi.Input<pulumi.Input<inputs.CseAggregationRuleEntitySelector>[]>;
    groupByEntity?: pulumi.Input<boolean>;
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    isPrototype?: pulumi.Input<boolean>;
    matchExpression?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameExpression?: pulumi.Input<string>;
    severityMapping?: pulumi.Input<inputs.CseAggregationRuleSeverityMapping>;
    summaryExpression?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    triggerExpression?: pulumi.Input<string>;
    windowSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CseAggregationRule resource.
 */
export interface CseAggregationRuleArgs {
    aggregationFunctions: pulumi.Input<pulumi.Input<inputs.CseAggregationRuleAggregationFunction>[]>;
    descriptionExpression: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    entitySelectors: pulumi.Input<pulumi.Input<inputs.CseAggregationRuleEntitySelector>[]>;
    groupByEntity?: pulumi.Input<boolean>;
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    isPrototype?: pulumi.Input<boolean>;
    matchExpression: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameExpression: pulumi.Input<string>;
    severityMapping: pulumi.Input<inputs.CseAggregationRuleSeverityMapping>;
    summaryExpression?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    triggerExpression: pulumi.Input<string>;
    windowSize: pulumi.Input<string>;
}
