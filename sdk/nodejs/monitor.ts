// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).
 *
 * ## Example Logs Monitor
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tfLogsMonitor1 = new sumologic.Monitor("tf_logs_monitor_1", {
 *     contentType: "Monitor",
 *     description: "tf logs monitor",
 *     isDisabled: false,
 *     monitorType: "Logs",
 *     notifications: [
 *         {
 *             notification: {
 *                 connectionType: "Email",
 *                 messageBody: "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
 *                 recipients: ["abc@example.com"],
 *                 subject: "Monitor Alert: {{TriggerType}} on {{Name}}",
 *                 timeZone: "PST",
 *             },
 *             runForTriggerTypes: [
 *                 "Critical",
 *                 "ResolvedCritical",
 *             ],
 *         },
 *         {
 *             notification: {
 *                 connectionId: "0000000000ABC123",
 *                 connectionType: "Webhook",
 *             },
 *             runForTriggerTypes: [
 *                 "Critical",
 *                 "ResolvedCritical",
 *             ],
 *         },
 *     ],
 *     queries: [{
 *         query: "_sourceCategory=event-action info",
 *         rowId: "A",
 *     }],
 *     triggers: [
 *         {
 *             detectionMethod: "StaticCondition",
 *             occurrenceType: "ResultCount",
 *             threshold: 40,
 *             thresholdType: "GreaterThan",
 *             timeRange: "15m",
 *             triggerSource: "AllResults",
 *             triggerType: "Critical",
 *         },
 *         {
 *             detectionMethod: "StaticCondition",
 *             occurrenceType: "ResultCount",
 *             threshold: 40,
 *             thresholdType: "LessThanOrEqual",
 *             timeRange: "15m",
 *             triggerSource: "AllResults",
 *             triggerType: "ResolvedCritical",
 *         },
 *     ],
 *     type: "MonitorsLibraryMonitor",
 * });
 * ```
 *
 * ## Example Metrics Monitor
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tfMetricsMonitor1 = new sumologic.Monitor("tf_metrics_monitor_1", {
 *     contentType: "Monitor",
 *     description: "tf metrics monitor",
 *     isDisabled: false,
 *     monitorType: "Metrics",
 *     notifications: [{
 *         notification: {
 *             connectionType: "Email",
 *             messageBody: "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
 *             recipients: ["abc@example.com"],
 *             subject: "Triggered {{TriggerType}} Alert on Monitor {{Name}}",
 *             timeZone: "PST",
 *         },
 *         runForTriggerTypes: [
 *             "Critical",
 *             "ResolvedCritical",
 *         ],
 *     }],
 *     queries: [{
 *         query: "metric=CPU_Idle _sourceCategory=event-action",
 *         rowId: "A",
 *     }],
 *     triggers: [
 *         {
 *             detectionMethod: "StaticCondition",
 *             occurrenceType: "AtLeastOnce",
 *             threshold: 40,
 *             thresholdType: "GreaterThanOrEqual",
 *             timeRange: "15m",
 *             triggerSource: "AnyTimeSeries",
 *             triggerType: "Critical",
 *         },
 *         {
 *             detectionMethod: "StaticCondition",
 *             occurrenceType: "Always",
 *             threshold: 40,
 *             thresholdType: "LessThan",
 *             timeRange: "15m",
 *             triggerSource: "AnyTimeSeries",
 *             triggerType: "ResolvedCritical",
 *         },
 *     ],
 *     type: "MonitorsLibraryMonitor",
 * });
 * ```
 *
 * ## Example Logs Monitor with Webhook Connection and Folder
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tfMonitorFolder1 = new sumologic.MonitorFolder("tfMonitorFolder1", {description: "A folder for Monitors"});
 * const examplePagerdutyConnection = new sumologic.Connection("examplePagerdutyConnection", {
 *     description: "PagerDuty connection for notifications from Monitors",
 *     type: "WebhookConnection",
 *     webhookType: "PagerDuty",
 *     url: "https://events.pagerduty.com/",
 *     defaultPayload: `{
 *   "service_key": "pagerduty_api_integration_key",
 *   "event_type": "trigger",
 *   "description": "PagerDuty connection for notifications",
 *   "client": "Sumo Logic",
 *   "client_url": ""
 * }
 * `,
 * });
 * const tfLogsMonitor2 = new sumologic.Monitor("tfLogsMonitor2", {
 *     description: "tf logs monitor with webhook",
 *     type: "MonitorsLibraryMonitor",
 *     parentId: tfMonitorFolder1.id,
 *     isDisabled: false,
 *     contentType: "Monitor",
 *     monitorType: "Logs",
 *     queries: [{
 *         rowId: "A",
 *         query: "_sourceCategory=event-action info",
 *     }],
 *     triggers: [
 *         {
 *             thresholdType: "GreaterThan",
 *             threshold: 40,
 *             timeRange: "15m",
 *             occurrenceType: "ResultCount",
 *             triggerSource: "AllResults",
 *             triggerType: "Critical",
 *             detectionMethod: "StaticCondition",
 *         },
 *         {
 *             thresholdType: "LessThanOrEqual",
 *             threshold: 40,
 *             timeRange: "15m",
 *             occurrenceType: "ResultCount",
 *             triggerSource: "AllResults",
 *             triggerType: "ResolvedCritical",
 *             detectionMethod: "StaticCondition",
 *         },
 *     ],
 *     notifications: [
 *         {
 *             notification: {
 *                 connectionType: "Email",
 *                 recipients: ["abc@example.com"],
 *                 subject: "Monitor Alert: {{TriggerType}} on {{Name}}",
 *                 timeZone: "PST",
 *                 messageBody: "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
 *             },
 *             runForTriggerTypes: [
 *                 "Critical",
 *                 "ResolvedCritical",
 *             ],
 *         },
 *         {
 *             notification: {
 *                 connectionType: "PagerDuty",
 *                 connectionId: examplePagerdutyConnection.id,
 *                 payloadOverride: `{
 *   "service_key": "your_pagerduty_api_integration_key",
 *   "event_type": "trigger",
 *   "description": "Alert: Triggered {{TriggerType}} for Monitor {{Name}}",
 *   "client": "Sumo Logic",
 *   "client_url": "{{QueryUrl}}"
 * }
 * `,
 *             },
 *             runForTriggerTypes: [
 *                 "Critical",
 *                 "ResolvedCritical",
 *             ],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Example Monitor Folder
 *
 * NOTE: Monitor folders are considered a different resource from Library content folders.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tfMonitorFolder1 = new sumologic.MonitorFolder("tf_monitor_folder_1", {
 *     description: "a folder for monitors",
 * });
 * ```
 *
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `type` - (Optional) The type of object model. Valid value:
 *   - `MonitorsLibraryMonitor`
 * - `name` - (Required) The name of the monitor. The name must be alphanumeric.
 * - `description` - (Required) The description of the monitor.
 * - `isDisabled` - (Optional) Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
 * - `parentId` - (Optional) The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
 * - `contentType` - (Optional) The type of the content object. Valid value:
 *   - `Monitor`
 * - `monitorType` - (Required) The type of monitor. Valid values:
 *   - `Logs`: A logs query monitor.
 *   - `Metrics`: A metrics query monitor.
 * - `queries` - (Required) All queries from the monitor.
 * - `triggers` - (Required) Defines the conditions of when to send notifications.
 * - `notifications` - (Optional) The notifications the monitor will send when the respective trigger condition is met.
 * - `groupNotifications` - (Optional) Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
 *
 * Additional data provided in state:
 *
 * - `id` - (Computed) The ID for this monitor.
 * - `status` - (Computed) The current status for this monitor. Values are:
 *   - `Critical`
 *   - `Warning`
 *   - `MissingData`
 *   - `Normal`
 *   - `Disabled`
 *
 * ## Import
 *
 * Monitors can be imported using the monitor ID, such ashcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/monitor:Monitor test 1234567890
 * ```
 *
 *  [1]https://help.sumologic.com/?cid=10020
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    public readonly contentType!: pulumi.Output<string | undefined>;
    public readonly createdAt!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly groupNotifications!: pulumi.Output<boolean | undefined>;
    public readonly isDisabled!: pulumi.Output<boolean | undefined>;
    public readonly isLocked!: pulumi.Output<boolean>;
    public readonly isMutable!: pulumi.Output<boolean>;
    public readonly isSystem!: pulumi.Output<boolean>;
    public readonly modifiedAt!: pulumi.Output<string>;
    public readonly modifiedBy!: pulumi.Output<string>;
    public readonly monitorType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifications!: pulumi.Output<outputs.MonitorNotification[] | undefined>;
    public readonly parentId!: pulumi.Output<string>;
    public readonly postRequestMap!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly queries!: pulumi.Output<outputs.MonitorQuery[] | undefined>;
    public readonly statuses!: pulumi.Output<string[]>;
    public readonly triggers!: pulumi.Output<outputs.MonitorTrigger[] | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            inputs["contentType"] = state ? state.contentType : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["createdBy"] = state ? state.createdBy : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["groupNotifications"] = state ? state.groupNotifications : undefined;
            inputs["isDisabled"] = state ? state.isDisabled : undefined;
            inputs["isLocked"] = state ? state.isLocked : undefined;
            inputs["isMutable"] = state ? state.isMutable : undefined;
            inputs["isSystem"] = state ? state.isSystem : undefined;
            inputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            inputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            inputs["monitorType"] = state ? state.monitorType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifications"] = state ? state.notifications : undefined;
            inputs["parentId"] = state ? state.parentId : undefined;
            inputs["postRequestMap"] = state ? state.postRequestMap : undefined;
            inputs["queries"] = state ? state.queries : undefined;
            inputs["statuses"] = state ? state.statuses : undefined;
            inputs["triggers"] = state ? state.triggers : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.monitorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorType'");
            }
            inputs["contentType"] = args ? args.contentType : undefined;
            inputs["createdAt"] = args ? args.createdAt : undefined;
            inputs["createdBy"] = args ? args.createdBy : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["groupNotifications"] = args ? args.groupNotifications : undefined;
            inputs["isDisabled"] = args ? args.isDisabled : undefined;
            inputs["isLocked"] = args ? args.isLocked : undefined;
            inputs["isMutable"] = args ? args.isMutable : undefined;
            inputs["isSystem"] = args ? args.isSystem : undefined;
            inputs["modifiedAt"] = args ? args.modifiedAt : undefined;
            inputs["modifiedBy"] = args ? args.modifiedBy : undefined;
            inputs["monitorType"] = args ? args.monitorType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifications"] = args ? args.notifications : undefined;
            inputs["parentId"] = args ? args.parentId : undefined;
            inputs["postRequestMap"] = args ? args.postRequestMap : undefined;
            inputs["queries"] = args ? args.queries : undefined;
            inputs["statuses"] = args ? args.statuses : undefined;
            inputs["triggers"] = args ? args.triggers : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["version"] = args ? args.version : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Monitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    readonly contentType?: pulumi.Input<string>;
    readonly createdAt?: pulumi.Input<string>;
    readonly createdBy?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly groupNotifications?: pulumi.Input<boolean>;
    readonly isDisabled?: pulumi.Input<boolean>;
    readonly isLocked?: pulumi.Input<boolean>;
    readonly isMutable?: pulumi.Input<boolean>;
    readonly isSystem?: pulumi.Input<boolean>;
    readonly modifiedAt?: pulumi.Input<string>;
    readonly modifiedBy?: pulumi.Input<string>;
    readonly monitorType?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly notifications?: pulumi.Input<pulumi.Input<inputs.MonitorNotification>[]>;
    readonly parentId?: pulumi.Input<string>;
    readonly postRequestMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly queries?: pulumi.Input<pulumi.Input<inputs.MonitorQuery>[]>;
    readonly statuses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly triggers?: pulumi.Input<pulumi.Input<inputs.MonitorTrigger>[]>;
    readonly type?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    readonly contentType?: pulumi.Input<string>;
    readonly createdAt?: pulumi.Input<string>;
    readonly createdBy?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly groupNotifications?: pulumi.Input<boolean>;
    readonly isDisabled?: pulumi.Input<boolean>;
    readonly isLocked?: pulumi.Input<boolean>;
    readonly isMutable?: pulumi.Input<boolean>;
    readonly isSystem?: pulumi.Input<boolean>;
    readonly modifiedAt?: pulumi.Input<string>;
    readonly modifiedBy?: pulumi.Input<string>;
    readonly monitorType: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly notifications?: pulumi.Input<pulumi.Input<inputs.MonitorNotification>[]>;
    readonly parentId?: pulumi.Input<string>;
    readonly postRequestMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly queries?: pulumi.Input<pulumi.Input<inputs.MonitorQuery>[]>;
    readonly statuses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly triggers?: pulumi.Input<pulumi.Input<inputs.MonitorTrigger>[]>;
    readonly type?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}
