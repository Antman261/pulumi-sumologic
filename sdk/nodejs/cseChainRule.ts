// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Sumo Logic CSE [Chain Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/07_Write_a_Chain_Rule).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const chainRule = new sumologic.CseChainRule("chain_rule", {
 *     description: "Signal description",
 *     enabled: true,
 *     entitySelectors: [{
 *         entityType: "_username",
 *         expression: "user_username",
 *     }],
 *     expressionsAndLimits: [
 *         {
 *             expression: "success = false",
 *             limit: 5,
 *         },
 *         {
 *             expression: "success = true",
 *             limit: 1,
 *         },
 *     ],
 *     groupByFields: [],
 *     isPrototype: false,
 *     ordered: true,
 *     severity: 5,
 *     summaryExpression: "Signal summary",
 *     tags: ["_mitreAttackTactic:TA0009"],
 *     windowSize: "T30M",
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * - `description` - (Required) The description of the generated Signals
 * - `enabled` - (Required) Whether the rule should generate Signals
 * - `entitySelectors` - (Required) The entities to generate Signals on
 *   + `entityType` - (Required) The type of the entity to generate the Signal on.
 *   + `expression` - (Required) The expression or field name to generate the Signal on.
 * - `expressionsAndLimits` - (Required) The list of expressions and associated limits to make up the conditions of the chain rule
 *   + `expression` - (Required) The expression for which records to match on
 *   + `limit` - (Required) How many times this expression must match for the Signal to fire
 * - `groupByFields` - (Optional) A list of fields to group records by
 * - `isPrototype` - (Optional) Whether the generated Signals should be prototype Signals
 * - `ordered` - (Optional; defaults to false) Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule
 * - `name` - (Required) The name of the Rule and the generated SignalS
 * - `severity` - (Required) The severity of the generated Signals
 * - `summaryExpression` - (Optional) The summary of the generated Signals
 * - `tags` - (Required) The tags of the generated Signals
 * - `windowSize` - (Required) How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the chain rule.
 *
 * ## Import
 *
 * Chain Rules can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/cseChainRule:CseChainRule chain_rule id
 * ```
 */
export class CseChainRule extends pulumi.CustomResource {
    /**
     * Get an existing CseChainRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseChainRuleState, opts?: pulumi.CustomResourceOptions): CseChainRule {
        return new CseChainRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseChainRule:CseChainRule';

    /**
     * Returns true if the given object is an instance of CseChainRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseChainRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseChainRule.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly entitySelectors!: pulumi.Output<outputs.CseChainRuleEntitySelector[]>;
    public readonly expressionsAndLimits!: pulumi.Output<outputs.CseChainRuleExpressionsAndLimit[]>;
    public readonly groupByFields!: pulumi.Output<string[] | undefined>;
    public readonly isPrototype!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ordered!: pulumi.Output<boolean | undefined>;
    public readonly severity!: pulumi.Output<number>;
    public readonly summaryExpression!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly windowSize!: pulumi.Output<string>;

    /**
     * Create a CseChainRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseChainRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseChainRuleArgs | CseChainRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseChainRuleState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["entitySelectors"] = state ? state.entitySelectors : undefined;
            inputs["expressionsAndLimits"] = state ? state.expressionsAndLimits : undefined;
            inputs["groupByFields"] = state ? state.groupByFields : undefined;
            inputs["isPrototype"] = state ? state.isPrototype : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ordered"] = state ? state.ordered : undefined;
            inputs["severity"] = state ? state.severity : undefined;
            inputs["summaryExpression"] = state ? state.summaryExpression : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["windowSize"] = state ? state.windowSize : undefined;
        } else {
            const args = argsOrState as CseChainRuleArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.entitySelectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySelectors'");
            }
            if ((!args || args.expressionsAndLimits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expressionsAndLimits'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.windowSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowSize'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["entitySelectors"] = args ? args.entitySelectors : undefined;
            inputs["expressionsAndLimits"] = args ? args.expressionsAndLimits : undefined;
            inputs["groupByFields"] = args ? args.groupByFields : undefined;
            inputs["isPrototype"] = args ? args.isPrototype : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ordered"] = args ? args.ordered : undefined;
            inputs["severity"] = args ? args.severity : undefined;
            inputs["summaryExpression"] = args ? args.summaryExpression : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["windowSize"] = args ? args.windowSize : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CseChainRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CseChainRule resources.
 */
export interface CseChainRuleState {
    readonly description?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly entitySelectors?: pulumi.Input<pulumi.Input<inputs.CseChainRuleEntitySelector>[]>;
    readonly expressionsAndLimits?: pulumi.Input<pulumi.Input<inputs.CseChainRuleExpressionsAndLimit>[]>;
    readonly groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    readonly isPrototype?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly ordered?: pulumi.Input<boolean>;
    readonly severity?: pulumi.Input<number>;
    readonly summaryExpression?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly windowSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CseChainRule resource.
 */
export interface CseChainRuleArgs {
    readonly description: pulumi.Input<string>;
    readonly enabled: pulumi.Input<boolean>;
    readonly entitySelectors: pulumi.Input<pulumi.Input<inputs.CseChainRuleEntitySelector>[]>;
    readonly expressionsAndLimits: pulumi.Input<pulumi.Input<inputs.CseChainRuleExpressionsAndLimit>[]>;
    readonly groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    readonly isPrototype?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly ordered?: pulumi.Input<boolean>;
    readonly severity: pulumi.Input<number>;
    readonly summaryExpression?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly windowSize: pulumi.Input<string>;
}
