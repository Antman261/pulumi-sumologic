// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Field](https://help.sumologic.com/Manage/Fields).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var field = new SumoLogic.Field("field", new SumoLogic.FieldArgs
    ///         {
    ///             DataType = "Int",
    ///             FieldName = "int_field_1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `field_name` - (Required)  Name of the field.
    /// - `field_id` - (Required) Field identifier.
    /// - `data_type` - (Optional) Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
    /// - `state` - (Optional) State of the field (either `Enabled` or `Disabled`).
    /// 
    /// ## Import
    /// 
    /// Fields can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/field:Field field 000000000ABC1234
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Manage/Fields
    /// </summary>
    [SumoLogicResourceType("sumologic:index/field:Field")]
    public partial class Field : Pulumi.CustomResource
    {
        [Output("dataType")]
        public Output<string?> DataType { get; private set; } = null!;

        [Output("fieldId")]
        public Output<string> FieldId { get; private set; } = null!;

        [Output("fieldName")]
        public Output<string> FieldName { get; private set; } = null!;

        [Output("state")]
        public Output<string?> State { get; private set; } = null!;


        /// <summary>
        /// Create a Field resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Field(string name, FieldArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/field:Field", name, args ?? new FieldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Field(string name, Input<string> id, FieldState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/field:Field", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Field resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Field Get(string name, Input<string> id, FieldState? state = null, CustomResourceOptions? options = null)
        {
            return new Field(name, id, state, options);
        }
    }

    public sealed class FieldArgs : Pulumi.ResourceArgs
    {
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        [Input("fieldName", required: true)]
        public Input<string> FieldName { get; set; } = null!;

        [Input("state")]
        public Input<string>? State { get; set; }

        public FieldArgs()
        {
        }
    }

    public sealed class FieldState : Pulumi.ResourceArgs
    {
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        [Input("fieldId")]
        public Input<string>? FieldId { get; set; }

        [Input("fieldName")]
        public Input<string>? FieldName { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        public FieldState()
        {
        }
    }
}
