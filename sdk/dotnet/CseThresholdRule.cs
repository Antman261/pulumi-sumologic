// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumo Logic CSE [Threshold Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/05_Write_a_Threshold_Rule).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var thresholdRule = new SumoLogic.CseThresholdRule("thresholdRule", new SumoLogic.CseThresholdRuleArgs
    ///         {
    ///             CountDistinct = true,
    ///             CountField = "dstDevice_hostname",
    ///             Description = "Signal description",
    ///             Enabled = true,
    ///             EntitySelectors = 
    ///             {
    ///                 new SumoLogic.Inputs.CseThresholdRuleEntitySelectorArgs
    ///                 {
    ///                     EntityType = "_ip",
    ///                     Expression = "srcDevice_ip",
    ///                 },
    ///             },
    ///             Expression = "objectType = \"Network\"",
    ///             GroupByFields = 
    ///             {
    ///                 "dstDevice_hostname",
    ///             },
    ///             IsPrototype = false,
    ///             Limit = 1000,
    ///             Severity = 5,
    ///             SummaryExpression = "Signal summary",
    ///             Tags = 
    ///             {
    ///                 "_mitreAttackTactic:TA0009",
    ///             },
    ///             WindowSize = "T30M",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `count_distinct` - (Optional; defaults to false) Whether to count distinct values of a field, as opposed to just counting the number of records
    /// - `count_field` - (Optional) The field to count if `count_distinct` is set to true
    /// - `description` - (Required) The description of the generated Signals
    /// - `enabled` - (Required) Whether the rule should generate Signals
    /// - `entity_selectors` - (Required) The entities to generate Signals on
    ///   + `entityType` - (Required) The type of the entity to generate the Signal on.
    ///   + `expression` - (Required) The expression or field name to generate the Signal on.
    /// - `expression` - (Required) The expression for which records to match on
    /// - `group_by_fields` - (Optional) A list of fields to group records by
    /// - `is_prototype` - (Optional) Whether the generated Signals should be prototype Signals
    /// - `limit` - (Required) A Signal will be fired when this many records/distinct field values are matched
    /// - `name` - (Required) The name of the Rule and the generated Signals
    /// - `severity` - (Required) The severity of the generated Signals
    /// - `summary_expression` - (Optional) The summary of the generated Signals
    /// - `tags` - (Required) The tags of the generated Signals
    /// - `window_size` - (Required) How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
    /// 
    /// The following attributes are exported:
    /// 
    /// - `id` - The internal ID of the threshold rule.
    /// 
    /// ## Import
    /// 
    /// Threshold Rules can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseThresholdRule:CseThresholdRule threshold_rule id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseThresholdRule:CseThresholdRule")]
    public partial class CseThresholdRule : Pulumi.CustomResource
    {
        [Output("countDistinct")]
        public Output<bool?> CountDistinct { get; private set; } = null!;

        [Output("countField")]
        public Output<string?> CountField { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        [Output("entitySelectors")]
        public Output<ImmutableArray<Outputs.CseThresholdRuleEntitySelector>> EntitySelectors { get; private set; } = null!;

        [Output("expression")]
        public Output<string> Expression { get; private set; } = null!;

        [Output("groupByFields")]
        public Output<ImmutableArray<string>> GroupByFields { get; private set; } = null!;

        [Output("isPrototype")]
        public Output<bool?> IsPrototype { get; private set; } = null!;

        [Output("limit")]
        public Output<int> Limit { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("severity")]
        public Output<int> Severity { get; private set; } = null!;

        [Output("summaryExpression")]
        public Output<string?> SummaryExpression { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("windowSize")]
        public Output<string> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a CseThresholdRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseThresholdRule(string name, CseThresholdRuleArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseThresholdRule:CseThresholdRule", name, args ?? new CseThresholdRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseThresholdRule(string name, Input<string> id, CseThresholdRuleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseThresholdRule:CseThresholdRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseThresholdRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseThresholdRule Get(string name, Input<string> id, CseThresholdRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CseThresholdRule(name, id, state, options);
        }
    }

    public sealed class CseThresholdRuleArgs : Pulumi.ResourceArgs
    {
        [Input("countDistinct")]
        public Input<bool>? CountDistinct { get; set; }

        [Input("countField")]
        public Input<string>? CountField { get; set; }

        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("entitySelectors", required: true)]
        private InputList<Inputs.CseThresholdRuleEntitySelectorArgs>? _entitySelectors;
        public InputList<Inputs.CseThresholdRuleEntitySelectorArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseThresholdRuleEntitySelectorArgs>());
            set => _entitySelectors = value;
        }

        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        [Input("limit", required: true)]
        public Input<int> Limit { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("severity", required: true)]
        public Input<int> Severity { get; set; } = null!;

        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public CseThresholdRuleArgs()
        {
        }
    }

    public sealed class CseThresholdRuleState : Pulumi.ResourceArgs
    {
        [Input("countDistinct")]
        public Input<bool>? CountDistinct { get; set; }

        [Input("countField")]
        public Input<string>? CountField { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entitySelectors")]
        private InputList<Inputs.CseThresholdRuleEntitySelectorGetArgs>? _entitySelectors;
        public InputList<Inputs.CseThresholdRuleEntitySelectorGetArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseThresholdRuleEntitySelectorGetArgs>());
            set => _entitySelectors = value;
        }

        [Input("expression")]
        public Input<string>? Expression { get; set; }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public CseThresholdRuleState()
        {
        }
    }
}
