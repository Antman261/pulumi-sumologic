// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic SAML Configuration](https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleSamlConfiguration = new SumoLogic.SamlConfiguration("exampleSamlConfiguration", new SumoLogic.SamlConfigurationArgs
    ///         {
    ///             AuthnRequestUrl = "",
    ///             ConfigurationName = "SumoLogic",
    ///             DebugMode = false,
    ///             DisableRequestedAuthnContext = false,
    ///             EmailAttribute = "",
    ///             IsRedirectBinding = false,
    ///             Issuer = "http://www.okta.com/abxcseyuiwelflkdjh",
    ///             LogoutEnabled = false,
    ///             LogoutUrl = "",
    ///             OnDemandProvisioningEnabled = new SumoLogic.Inputs.SamlConfigurationOnDemandProvisioningEnabledArgs
    ///             {
    ///                 FirstNameAttribute = "firstName",
    ///                 LastNameAttribute = "lastName",
    ///                 OnDemandProvisioningRoles = 
    ///                 {
    ///                     "Administrator",
    ///                 },
    ///             },
    ///             RolesAttribute = "Administrator",
    ///             SignAuthnRequest = false,
    ///             SpInitiatedLoginEnabled = false,
    ///             SpInitiatedLoginPath = "",
    ///             X509cert1 = "string",
    ///             X509cert2 = "",
    ///             X509cert3 = "",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `sp_initiated_login_path` - (Optional) The identifier used to generate a unique URL for user login. Defaults to "".
    /// - `configuration_name` - (Required) Name of the SSO policy or another name used to describe the policy internally.
    /// - `issuer` - (Required) The unique URL assigned to the organization by the SAML Identity Provider.
    /// - `sp_initiated_login_enabled` - (Optional) True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
    /// - `authn_request_url` - (Optional) The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
    /// - `x509cert1` - (Required) The certificate is used to verify the signature in SAML assertions.
    /// - `x509cert2` - (Optional) The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
    /// - `x509cert3` - (Optional) The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
    /// - `on_demand_provisioning_enabled` - (Block List, Max: 1, Optional) The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
    /// - `roles_attribute` - (Optional) The role that Sumo Logic will assign to users when they sign in. Defaults to "".
    /// - `logout_enabled` - (Optional) True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
    /// - `logout_url` - (Optional) The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
    /// - `email_attribute` - (Optional) The email address of the new user account. Defaults to "".
    /// - `debug_mode` - (Optional) True if additional details are included when a user fails to sign in. Defaults to false.
    /// - `sign_authn_request` - (Optional) True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
    /// - `disable_requested_authn_context` - (Optional) True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
    /// - `is_redirect_binding` - (Optional) True if the SAML binding is of HTTP Redirect type. Defaults to false.
    /// 
    /// ### Schema for `on_demand_provisioning_enabled`
    /// - `first_name_attribute` - (Optional) First name attribute of the new user account. Defaults to "".
    /// - `last_name_attribute` - (Optional) Last name attribute of the new user account. Defaults to "".
    /// - `on_demand_provisioning_roles` - (Required) List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
    /// 
    /// ## Attributes reference
    /// 
    /// The following attributes are exported:
    /// 
    /// - `id` - Unique identifier for the SAML Configuration.
    /// - `certificate` - Authentication Request Signing Certificate for the user.
    /// 
    /// ## Import
    /// 
    /// SAML Configuration can be imported using the SAML configuration id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/samlConfiguration:SamlConfiguration example 00000000454A5979
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On
    /// </summary>
    [SumoLogicResourceType("sumologic:index/samlConfiguration:SamlConfiguration")]
    public partial class SamlConfiguration : Pulumi.CustomResource
    {
        [Output("authnRequestUrl")]
        public Output<string?> AuthnRequestUrl { get; private set; } = null!;

        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        [Output("configurationName")]
        public Output<string> ConfigurationName { get; private set; } = null!;

        [Output("debugMode")]
        public Output<bool?> DebugMode { get; private set; } = null!;

        [Output("disableRequestedAuthnContext")]
        public Output<bool?> DisableRequestedAuthnContext { get; private set; } = null!;

        [Output("emailAttribute")]
        public Output<string?> EmailAttribute { get; private set; } = null!;

        [Output("isRedirectBinding")]
        public Output<bool?> IsRedirectBinding { get; private set; } = null!;

        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        [Output("logoutEnabled")]
        public Output<bool?> LogoutEnabled { get; private set; } = null!;

        [Output("logoutUrl")]
        public Output<string?> LogoutUrl { get; private set; } = null!;

        [Output("onDemandProvisioningEnabled")]
        public Output<Outputs.SamlConfigurationOnDemandProvisioningEnabled?> OnDemandProvisioningEnabled { get; private set; } = null!;

        [Output("rolesAttribute")]
        public Output<string?> RolesAttribute { get; private set; } = null!;

        [Output("signAuthnRequest")]
        public Output<bool?> SignAuthnRequest { get; private set; } = null!;

        [Output("spInitiatedLoginEnabled")]
        public Output<bool?> SpInitiatedLoginEnabled { get; private set; } = null!;

        [Output("spInitiatedLoginPath")]
        public Output<string?> SpInitiatedLoginPath { get; private set; } = null!;

        [Output("x509cert1")]
        public Output<string> X509cert1 { get; private set; } = null!;

        [Output("x509cert2")]
        public Output<string?> X509cert2 { get; private set; } = null!;

        [Output("x509cert3")]
        public Output<string?> X509cert3 { get; private set; } = null!;


        /// <summary>
        /// Create a SamlConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SamlConfiguration(string name, SamlConfigurationArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/samlConfiguration:SamlConfiguration", name, args ?? new SamlConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SamlConfiguration(string name, Input<string> id, SamlConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/samlConfiguration:SamlConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SamlConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SamlConfiguration Get(string name, Input<string> id, SamlConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new SamlConfiguration(name, id, state, options);
        }
    }

    public sealed class SamlConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("authnRequestUrl")]
        public Input<string>? AuthnRequestUrl { get; set; }

        [Input("configurationName", required: true)]
        public Input<string> ConfigurationName { get; set; } = null!;

        [Input("debugMode")]
        public Input<bool>? DebugMode { get; set; }

        [Input("disableRequestedAuthnContext")]
        public Input<bool>? DisableRequestedAuthnContext { get; set; }

        [Input("emailAttribute")]
        public Input<string>? EmailAttribute { get; set; }

        [Input("isRedirectBinding")]
        public Input<bool>? IsRedirectBinding { get; set; }

        [Input("issuer", required: true)]
        public Input<string> Issuer { get; set; } = null!;

        [Input("logoutEnabled")]
        public Input<bool>? LogoutEnabled { get; set; }

        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        [Input("onDemandProvisioningEnabled")]
        public Input<Inputs.SamlConfigurationOnDemandProvisioningEnabledArgs>? OnDemandProvisioningEnabled { get; set; }

        [Input("rolesAttribute")]
        public Input<string>? RolesAttribute { get; set; }

        [Input("signAuthnRequest")]
        public Input<bool>? SignAuthnRequest { get; set; }

        [Input("spInitiatedLoginEnabled")]
        public Input<bool>? SpInitiatedLoginEnabled { get; set; }

        [Input("spInitiatedLoginPath")]
        public Input<string>? SpInitiatedLoginPath { get; set; }

        [Input("x509cert1", required: true)]
        public Input<string> X509cert1 { get; set; } = null!;

        [Input("x509cert2")]
        public Input<string>? X509cert2 { get; set; }

        [Input("x509cert3")]
        public Input<string>? X509cert3 { get; set; }

        public SamlConfigurationArgs()
        {
        }
    }

    public sealed class SamlConfigurationState : Pulumi.ResourceArgs
    {
        [Input("authnRequestUrl")]
        public Input<string>? AuthnRequestUrl { get; set; }

        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("configurationName")]
        public Input<string>? ConfigurationName { get; set; }

        [Input("debugMode")]
        public Input<bool>? DebugMode { get; set; }

        [Input("disableRequestedAuthnContext")]
        public Input<bool>? DisableRequestedAuthnContext { get; set; }

        [Input("emailAttribute")]
        public Input<string>? EmailAttribute { get; set; }

        [Input("isRedirectBinding")]
        public Input<bool>? IsRedirectBinding { get; set; }

        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        [Input("logoutEnabled")]
        public Input<bool>? LogoutEnabled { get; set; }

        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        [Input("onDemandProvisioningEnabled")]
        public Input<Inputs.SamlConfigurationOnDemandProvisioningEnabledGetArgs>? OnDemandProvisioningEnabled { get; set; }

        [Input("rolesAttribute")]
        public Input<string>? RolesAttribute { get; set; }

        [Input("signAuthnRequest")]
        public Input<bool>? SignAuthnRequest { get; set; }

        [Input("spInitiatedLoginEnabled")]
        public Input<bool>? SpInitiatedLoginEnabled { get; set; }

        [Input("spInitiatedLoginPath")]
        public Input<string>? SpInitiatedLoginPath { get; set; }

        [Input("x509cert1")]
        public Input<string>? X509cert1 { get; set; }

        [Input("x509cert2")]
        public Input<string>? X509cert2 { get; set; }

        [Input("x509cert3")]
        public Input<string>? X509cert3 { get; set; }

        public SamlConfigurationState()
        {
        }
    }
}
