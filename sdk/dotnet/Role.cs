// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Role](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleRole = new SumoLogic.Role("exampleRole", new SumoLogic.RoleArgs
    ///         {
    ///             Capabilities = 
    ///             {
    ///                 "manageCollectors",
    ///             },
    ///             Description = "Testing resource sumologic_role",
    ///             FilterPredicate = "_sourceCategory=Test",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `name` - (Required) The name of the role.
    /// - `description` - (Optional) The description of the role.
    /// - `filter_predicate` - (Optional) A search filter to restrict access to specific logs.
    /// - `capabilities` - (Optional) List of capabilities associated with this role.
    /// 
    /// The following attributes are exported:
    /// 
    /// - `id` - The internal ID of the role.
    /// 
    /// ## Import
    /// 
    /// Roles can be imported using the role id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/role:Role role 1234567890
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles
    /// </summary>
    [SumoLogicResourceType("sumologic:index/role:Role")]
    public partial class Role : Pulumi.CustomResource
    {
        [Output("capabilities")]
        public Output<ImmutableArray<string>> Capabilities { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("filterPredicate")]
        public Output<string?> FilterPredicate { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs? args = null, CustomResourceOptions? options = null)
            : base("sumologic:index/role:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/role:Role", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
        {
            return new Role(name, id, state, options);
        }
    }

    public sealed class RoleArgs : Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<string>? _capabilities;
        public InputList<string> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<string>());
            set => _capabilities = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("filterPredicate")]
        public Input<string>? FilterPredicate { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public RoleArgs()
        {
        }
    }

    public sealed class RoleState : Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<string>? _capabilities;
        public InputList<string> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<string>());
            set => _capabilities = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("filterPredicate")]
        public Input<string>? FilterPredicate { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public RoleState()
        {
        }
    }
}
