// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).
    /// 
    /// ## Example Logs Monitor
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var tfLogsMonitor1 = new SumoLogic.Monitor("tfLogsMonitor1", new SumoLogic.MonitorArgs
    ///         {
    ///             ContentType = "Monitor",
    ///             Description = "tf logs monitor",
    ///             IsDisabled = false,
    ///             MonitorType = "Logs",
    ///             Notifications = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorNotificationArgs
    ///                 {
    ///                     Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                     {
    ///                         ConnectionType = "Email",
    ///                         MessageBody = "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
    ///                         Recipients = 
    ///                         {
    ///                             "abc@example.com",
    ///                         },
    ///                         Subject = "Monitor Alert: {{TriggerType}} on {{Name}}",
    ///                         TimeZone = "PST",
    ///                     },
    ///                     RunForTriggerTypes = 
    ///                     {
    ///                         "Critical",
    ///                         "ResolvedCritical",
    ///                     },
    ///                 },
    ///                 new SumoLogic.Inputs.MonitorNotificationArgs
    ///                 {
    ///                     Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                     {
    ///                         ConnectionId = "0000000000ABC123",
    ///                         ConnectionType = "Webhook",
    ///                     },
    ///                     RunForTriggerTypes = 
    ///                     {
    ///                         "Critical",
    ///                         "ResolvedCritical",
    ///                     },
    ///                 },
    ///             },
    ///             Queries = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorQueryArgs
    ///                 {
    ///                     Query = "_sourceCategory=event-action info",
    ///                     RowId = "A",
    ///                 },
    ///             },
    ///             Triggers = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorTriggerArgs
    ///                 {
    ///                     DetectionMethod = "StaticCondition",
    ///                     OccurrenceType = "ResultCount",
    ///                     Threshold = 40,
    ///                     ThresholdType = "GreaterThan",
    ///                     TimeRange = "15m",
    ///                     TriggerSource = "AllResults",
    ///                     TriggerType = "Critical",
    ///                 },
    ///                 new SumoLogic.Inputs.MonitorTriggerArgs
    ///                 {
    ///                     DetectionMethod = "StaticCondition",
    ///                     OccurrenceType = "ResultCount",
    ///                     Threshold = 40,
    ///                     ThresholdType = "LessThanOrEqual",
    ///                     TimeRange = "15m",
    ///                     TriggerSource = "AllResults",
    ///                     TriggerType = "ResolvedCritical",
    ///                 },
    ///             },
    ///             Type = "MonitorsLibraryMonitor",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Example Metrics Monitor
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var tfMetricsMonitor1 = new SumoLogic.Monitor("tfMetricsMonitor1", new SumoLogic.MonitorArgs
    ///         {
    ///             ContentType = "Monitor",
    ///             Description = "tf metrics monitor",
    ///             IsDisabled = false,
    ///             MonitorType = "Metrics",
    ///             Notifications = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorNotificationArgs
    ///                 {
    ///                     Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                     {
    ///                         ConnectionType = "Email",
    ///                         MessageBody = "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
    ///                         Recipients = 
    ///                         {
    ///                             "abc@example.com",
    ///                         },
    ///                         Subject = "Triggered {{TriggerType}} Alert on Monitor {{Name}}",
    ///                         TimeZone = "PST",
    ///                     },
    ///                     RunForTriggerTypes = 
    ///                     {
    ///                         "Critical",
    ///                         "ResolvedCritical",
    ///                     },
    ///                 },
    ///             },
    ///             Queries = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorQueryArgs
    ///                 {
    ///                     Query = "metric=CPU_Idle _sourceCategory=event-action",
    ///                     RowId = "A",
    ///                 },
    ///             },
    ///             Triggers = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorTriggerArgs
    ///                 {
    ///                     DetectionMethod = "StaticCondition",
    ///                     OccurrenceType = "AtLeastOnce",
    ///                     Threshold = 40,
    ///                     ThresholdType = "GreaterThanOrEqual",
    ///                     TimeRange = "15m",
    ///                     TriggerSource = "AnyTimeSeries",
    ///                     TriggerType = "Critical",
    ///                 },
    ///                 new SumoLogic.Inputs.MonitorTriggerArgs
    ///                 {
    ///                     DetectionMethod = "StaticCondition",
    ///                     OccurrenceType = "Always",
    ///                     Threshold = 40,
    ///                     ThresholdType = "LessThan",
    ///                     TimeRange = "15m",
    ///                     TriggerSource = "AnyTimeSeries",
    ///                     TriggerType = "ResolvedCritical",
    ///                 },
    ///             },
    ///             Type = "MonitorsLibraryMonitor",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Example Logs Monitor with Webhook Connection and Folder
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var tfMonitorFolder1 = new SumoLogic.MonitorFolder("tfMonitorFolder1", new SumoLogic.MonitorFolderArgs
    ///         {
    ///             Description = "A folder for Monitors",
    ///         });
    ///         var examplePagerdutyConnection = new SumoLogic.Connection("examplePagerdutyConnection", new SumoLogic.ConnectionArgs
    ///         {
    ///             Description = "PagerDuty connection for notifications from Monitors",
    ///             Type = "WebhookConnection",
    ///             WebhookType = "PagerDuty",
    ///             Url = "https://events.pagerduty.com/",
    ///             DefaultPayload = @"{
    ///   ""service_key"": ""pagerduty_api_integration_key"",
    ///   ""event_type"": ""trigger"",
    ///   ""description"": ""PagerDuty connection for notifications"",
    ///   ""client"": ""Sumo Logic"",
    ///   ""client_url"": """"
    /// }
    /// ",
    ///         });
    ///         var tfLogsMonitor2 = new SumoLogic.Monitor("tfLogsMonitor2", new SumoLogic.MonitorArgs
    ///         {
    ///             Description = "tf logs monitor with webhook",
    ///             Type = "MonitorsLibraryMonitor",
    ///             ParentId = tfMonitorFolder1.Id,
    ///             IsDisabled = false,
    ///             ContentType = "Monitor",
    ///             MonitorType = "Logs",
    ///             Queries = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorQueryArgs
    ///                 {
    ///                     RowId = "A",
    ///                     Query = "_sourceCategory=event-action info",
    ///                 },
    ///             },
    ///             Triggers = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorTriggerArgs
    ///                 {
    ///                     ThresholdType = "GreaterThan",
    ///                     Threshold = 40,
    ///                     TimeRange = "15m",
    ///                     OccurrenceType = "ResultCount",
    ///                     TriggerSource = "AllResults",
    ///                     TriggerType = "Critical",
    ///                     DetectionMethod = "StaticCondition",
    ///                 },
    ///                 new SumoLogic.Inputs.MonitorTriggerArgs
    ///                 {
    ///                     ThresholdType = "LessThanOrEqual",
    ///                     Threshold = 40,
    ///                     TimeRange = "15m",
    ///                     OccurrenceType = "ResultCount",
    ///                     TriggerSource = "AllResults",
    ///                     TriggerType = "ResolvedCritical",
    ///                     DetectionMethod = "StaticCondition",
    ///                 },
    ///             },
    ///             Notifications = 
    ///             {
    ///                 new SumoLogic.Inputs.MonitorNotificationArgs
    ///                 {
    ///                     Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                     {
    ///                         ConnectionType = "Email",
    ///                         Recipients = 
    ///                         {
    ///                             "abc@example.com",
    ///                         },
    ///                         Subject = "Monitor Alert: {{TriggerType}} on {{Name}}",
    ///                         TimeZone = "PST",
    ///                         MessageBody = "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
    ///                     },
    ///                     RunForTriggerTypes = 
    ///                     {
    ///                         "Critical",
    ///                         "ResolvedCritical",
    ///                     },
    ///                 },
    ///                 new SumoLogic.Inputs.MonitorNotificationArgs
    ///                 {
    ///                     Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                     {
    ///                         ConnectionType = "PagerDuty",
    ///                         ConnectionId = examplePagerdutyConnection.Id,
    ///                         PayloadOverride = @"{
    ///   ""service_key"": ""your_pagerduty_api_integration_key"",
    ///   ""event_type"": ""trigger"",
    ///   ""description"": ""Alert: Triggered {{TriggerType}} for Monitor {{Name}}"",
    ///   ""client"": ""Sumo Logic"",
    ///   ""client_url"": ""{{QueryUrl}}""
    /// }
    /// ",
    ///                     },
    ///                     RunForTriggerTypes = 
    ///                     {
    ///                         "Critical",
    ///                         "ResolvedCritical",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Example Monitor Folder
    /// 
    /// NOTE: Monitor folders are considered a different resource from Library content folders.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var tfMonitorFolder1 = new SumoLogic.MonitorFolder("tfMonitorFolder1", new SumoLogic.MonitorFolderArgs
    ///         {
    ///             Description = "a folder for monitors",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `type` - (Optional) The type of object model. Valid value:
    ///   - `MonitorsLibraryMonitor`
    /// - `name` - (Required) The name of the monitor. The name must be alphanumeric.
    /// - `description` - (Required) The description of the monitor.
    /// - `is_disabled` - (Optional) Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
    /// - `parent_id` - (Optional) The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
    /// - `content_type` - (Optional) The type of the content object. Valid value:
    ///   - `Monitor`
    /// - `monitor_type` - (Required) The type of monitor. Valid values:
    ///   - `Logs`: A logs query monitor.
    ///   - `Metrics`: A metrics query monitor.
    /// - `queries` - (Required) All queries from the monitor.
    /// - `triggers` - (Required) Defines the conditions of when to send notifications.
    /// - `notifications` - (Optional) The notifications the monitor will send when the respective trigger condition is met.
    /// - `group_notifications` - (Optional) Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
    /// 
    /// Additional data provided in state:
    /// 
    /// - `id` - (Computed) The ID for this monitor.
    /// - `status` - (Computed) The current status for this monitor. Values are:
    ///   - `Critical`
    ///   - `Warning`
    ///   - `MissingData`
    ///   - `Normal`
    ///   - `Disabled`
    /// 
    /// ## Import
    /// 
    /// Monitors can be imported using the monitor ID, such ashcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/monitor:Monitor test 1234567890
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/?cid=10020
    /// </summary>
    [SumoLogicResourceType("sumologic:index/monitor:Monitor")]
    public partial class Monitor : Pulumi.CustomResource
    {
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("groupNotifications")]
        public Output<bool?> GroupNotifications { get; private set; } = null!;

        [Output("isDisabled")]
        public Output<bool?> IsDisabled { get; private set; } = null!;

        [Output("isLocked")]
        public Output<bool> IsLocked { get; private set; } = null!;

        [Output("isMutable")]
        public Output<bool> IsMutable { get; private set; } = null!;

        [Output("isSystem")]
        public Output<bool> IsSystem { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        [Output("monitorType")]
        public Output<string> MonitorType { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notifications")]
        public Output<ImmutableArray<Outputs.MonitorNotification>> Notifications { get; private set; } = null!;

        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        [Output("postRequestMap")]
        public Output<ImmutableDictionary<string, string>?> PostRequestMap { get; private set; } = null!;

        [Output("queries")]
        public Output<ImmutableArray<Outputs.MonitorQuery>> Queries { get; private set; } = null!;

        [Output("statuses")]
        public Output<ImmutableArray<string>> Statuses { get; private set; } = null!;

        [Output("triggers")]
        public Output<ImmutableArray<Outputs.MonitorTrigger>> Triggers { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/monitor:Monitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : Pulumi.ResourceArgs
    {
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groupNotifications")]
        public Input<bool>? GroupNotifications { get; set; }

        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        [Input("monitorType", required: true)]
        public Input<string> MonitorType { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.MonitorNotificationArgs>? _notifications;
        public InputList<Inputs.MonitorNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.MonitorNotificationArgs>());
            set => _notifications = value;
        }

        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        [Input("queries")]
        private InputList<Inputs.MonitorQueryArgs>? _queries;
        public InputList<Inputs.MonitorQueryArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MonitorQueryArgs>());
            set => _queries = value;
        }

        [Input("statuses")]
        private InputList<string>? _statuses;
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("triggers")]
        private InputList<Inputs.MonitorTriggerArgs>? _triggers;
        public InputList<Inputs.MonitorTriggerArgs> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<Inputs.MonitorTriggerArgs>());
            set => _triggers = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MonitorArgs()
        {
        }
    }

    public sealed class MonitorState : Pulumi.ResourceArgs
    {
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groupNotifications")]
        public Input<bool>? GroupNotifications { get; set; }

        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        [Input("monitorType")]
        public Input<string>? MonitorType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.MonitorNotificationGetArgs>? _notifications;
        public InputList<Inputs.MonitorNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.MonitorNotificationGetArgs>());
            set => _notifications = value;
        }

        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        [Input("queries")]
        private InputList<Inputs.MonitorQueryGetArgs>? _queries;
        public InputList<Inputs.MonitorQueryGetArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MonitorQueryGetArgs>());
            set => _queries = value;
        }

        [Input("statuses")]
        private InputList<string>? _statuses;
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("triggers")]
        private InputList<Inputs.MonitorTriggerGetArgs>? _triggers;
        public InputList<Inputs.MonitorTriggerGetArgs> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<Inputs.MonitorTriggerGetArgs>());
            set => _triggers = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MonitorState()
        {
        }
    }
}
