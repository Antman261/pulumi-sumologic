// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Field Extraction Rule](https://help.sumologic.com/Manage/Field-Extractions).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fieldExtractionRule = new SumoLogic.FieldExtractionRule("fieldExtractionRule", new SumoLogic.FieldExtractionRuleArgs
    ///         {
    ///             Enabled = true,
    ///             ParseExpression = "csv _raw extract 1 as f1",
    ///             Scope = "_sourceHost=127.0.0.1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `name` - (Required) Name of the field extraction rule. Use a name that makes it easy to identify the rule.
    /// - `scope` - (Required) Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
    /// - `parse_expression` - (Required) Describes the fields to be parsed.
    /// - `enabled` - (Required) Is the field extraction rule enabled.
    /// 
    /// ## Attributes reference
    /// 
    /// The following attributes are exported:
    /// 
    /// - `id` - Unique identifier for the field extraction rule.
    /// 
    /// ## Import
    /// 
    /// Extraction Rules can be imported using the extraction rule id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/fieldExtractionRule:FieldExtractionRule fieldExtractionRule id
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Manage/Field-Extractions
    /// </summary>
    [SumoLogicResourceType("sumologic:index/fieldExtractionRule:FieldExtractionRule")]
    public partial class FieldExtractionRule : Pulumi.CustomResource
    {
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parseExpression")]
        public Output<string> ParseExpression { get; private set; } = null!;

        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a FieldExtractionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FieldExtractionRule(string name, FieldExtractionRuleArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/fieldExtractionRule:FieldExtractionRule", name, args ?? new FieldExtractionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FieldExtractionRule(string name, Input<string> id, FieldExtractionRuleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/fieldExtractionRule:FieldExtractionRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FieldExtractionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FieldExtractionRule Get(string name, Input<string> id, FieldExtractionRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FieldExtractionRule(name, id, state, options);
        }
    }

    public sealed class FieldExtractionRuleArgs : Pulumi.ResourceArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parseExpression", required: true)]
        public Input<string> ParseExpression { get; set; } = null!;

        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public FieldExtractionRuleArgs()
        {
        }
    }

    public sealed class FieldExtractionRuleState : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parseExpression")]
        public Input<string>? ParseExpression { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public FieldExtractionRuleState()
        {
        }
    }
}
