// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumologic CSE Log Mapping.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var logMapping = new SumoLogic.CseLogMapping("logMapping", new SumoLogic.CseLogMappingArgs
    ///         {
    ///             Enabled = true,
    ///             Fields = 
    ///             {
    ///                 new SumoLogic.Inputs.CseLogMappingFieldArgs
    ///                 {
    ///                     AlternateValues = 
    ///                     {
    ///                         "altValue",
    ///                     },
    ///                     CaseInsensitive = false,
    ///                     DefaultValue = "",
    ///                     FieldJoins = 
    ///                     {
    ///                         "and",
    ///                     },
    ///                     Format = "JSON",
    ///                     FormatParameters = 
    ///                     {
    ///                         "param",
    ///                     },
    ///                     JoinDelimiter = "",
    ///                     Lookups = 
    ///                     {
    ///                         new SumoLogic.Inputs.CseLogMappingFieldLookupArgs
    ///                         {
    ///                             Key = "tunnel-up",
    ///                             Value = "true",
    ///                         },
    ///                     },
    ///                     Name = "action",
    ///                     SkippedValues = 
    ///                     {
    ///                         "-",
    ///                     },
    ///                     SplitDelimiter = ",",
    ///                     SplitIndex = "index",
    ///                     TimeZone = "UTC",
    ///                     Value = "action",
    ///                     ValueType = "constant",
    ///                 },
    ///             },
    ///             ProductGuid = "003d35b3-3ba8-4e93-8776-e5810b4e243e",
    ///             RecordType = "Audit",
    ///             RelatesEntities = true,
    ///             SkippedValues = 
    ///             {
    ///                 "skipped",
    ///             },
    ///             StructuredInputs = 
    ///             {
    ///                 new SumoLogic.Inputs.CseLogMappingStructuredInputArgs
    ///                 {
    ///                     EventIdPattern = "vpn",
    ///                     LogFormat = "JSON",
    ///                     Product = "fortinate",
    ///                     Vendor = "fortinate",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `name` - (Required) The name of the log mapping.
    /// - `parent_id` - (Optional) The id of the parent log mapping.
    /// - `product_guid` - (Required) Product GUID.
    /// - `record_type` - (Required) The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
    /// - `enabled` - (Required) Enabled flag.
    /// - `relates_entities` - (Optional) Set to true to relate entities.
    /// - `skipped_values` - (Optional) List of skipped values.
    /// - `fields` - (Required) List of fields for the new log mapping. See field_schema for details.
    /// - `structured_inputs` - (Optional, omit if unstructured_fields is defined) List of structured inputs for the new log mapping. See structured_input_schema for details.
    /// - `unstructured_fields` - (Optional, omit if structured_inputs is defined) Unstructured fields for the new log mapping. See unstructured_field_schema for details.
    /// 
    /// ### Schema for `field`
    /// - `name` - (Required) Name of the field.
    /// - `value` - (Optional) Value of the field.
    /// - `value_type` - (Optional) The value type.
    /// - `skipped_values` - (Optional) List of skipped values.
    /// - `default_value` - (Optional) Default value of the field.
    /// - `format` - (Optional) Format of the field. (JSON, Windows, Syslog, CEF, LEEF )
    /// - `case_insensitive` - (Optional) Case insensitive flag.
    /// - `alternate_values` - (Optional) List of alternate values.
    /// - `time_zone` - (Optional) Time zone.
    /// - `split_delimiter` - (Optional) Split delimiter to be used. (some example: ",", "-", "|")
    /// - `field_join` - (Optional) List of field join values.
    /// - `join_delimiter` - (Optional) Join delimiter.
    /// - `format_parameters` - (Optional) List of format parameters.
    /// - `lookup` - (Optional) List of lookup key value pair for field. See lookup_schema for details.
    /// 
    /// ### Schema for `lookup`
    /// - `key` - (Required) Lookup key.
    /// - `value` - (Required) Lookup value.
    /// 
    /// ### Schema for `structured_input`
    /// - `event_id_pattern` - (Required) Event id pattern.
    /// - `log_format` - (Required) Log format. (JSON, Windows, Syslog, CEF, LEEF )
    /// - `product` - (Required) Product name.
    /// - `vendor` - (Required) Vendor name.
    /// 
    /// ### Schema for `unstructured_field`
    /// - `pattern_names` - (Required) List of grok pattern names.
    /// 
    /// The following attributes are exported:
    /// 
    /// - `id` - The internal ID of the log mapping.
    /// 
    /// ## Import
    /// 
    /// Log Mapping can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseLogMapping:CseLogMapping log_mapping id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseLogMapping:CseLogMapping")]
    public partial class CseLogMapping : Pulumi.CustomResource
    {
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        [Output("fields")]
        public Output<ImmutableArray<Outputs.CseLogMappingField>> Fields { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parentId")]
        public Output<string?> ParentId { get; private set; } = null!;

        [Output("productGuid")]
        public Output<string> ProductGuid { get; private set; } = null!;

        [Output("recordType")]
        public Output<string> RecordType { get; private set; } = null!;

        [Output("relatesEntities")]
        public Output<bool?> RelatesEntities { get; private set; } = null!;

        [Output("skippedValues")]
        public Output<ImmutableArray<string>> SkippedValues { get; private set; } = null!;

        [Output("structuredInputs")]
        public Output<ImmutableArray<Outputs.CseLogMappingStructuredInput>> StructuredInputs { get; private set; } = null!;

        [Output("unstructuredFields")]
        public Output<Outputs.CseLogMappingUnstructuredFields?> UnstructuredFields { get; private set; } = null!;


        /// <summary>
        /// Create a CseLogMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseLogMapping(string name, CseLogMappingArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseLogMapping:CseLogMapping", name, args ?? new CseLogMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseLogMapping(string name, Input<string> id, CseLogMappingState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseLogMapping:CseLogMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseLogMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseLogMapping Get(string name, Input<string> id, CseLogMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new CseLogMapping(name, id, state, options);
        }
    }

    public sealed class CseLogMappingArgs : Pulumi.ResourceArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("fields", required: true)]
        private InputList<Inputs.CseLogMappingFieldArgs>? _fields;
        public InputList<Inputs.CseLogMappingFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.CseLogMappingFieldArgs>());
            set => _fields = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("productGuid", required: true)]
        public Input<string> ProductGuid { get; set; } = null!;

        [Input("recordType", required: true)]
        public Input<string> RecordType { get; set; } = null!;

        [Input("relatesEntities")]
        public Input<bool>? RelatesEntities { get; set; }

        [Input("skippedValues")]
        private InputList<string>? _skippedValues;
        public InputList<string> SkippedValues
        {
            get => _skippedValues ?? (_skippedValues = new InputList<string>());
            set => _skippedValues = value;
        }

        [Input("structuredInputs")]
        private InputList<Inputs.CseLogMappingStructuredInputArgs>? _structuredInputs;
        public InputList<Inputs.CseLogMappingStructuredInputArgs> StructuredInputs
        {
            get => _structuredInputs ?? (_structuredInputs = new InputList<Inputs.CseLogMappingStructuredInputArgs>());
            set => _structuredInputs = value;
        }

        [Input("unstructuredFields")]
        public Input<Inputs.CseLogMappingUnstructuredFieldsArgs>? UnstructuredFields { get; set; }

        public CseLogMappingArgs()
        {
        }
    }

    public sealed class CseLogMappingState : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("fields")]
        private InputList<Inputs.CseLogMappingFieldGetArgs>? _fields;
        public InputList<Inputs.CseLogMappingFieldGetArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.CseLogMappingFieldGetArgs>());
            set => _fields = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("productGuid")]
        public Input<string>? ProductGuid { get; set; }

        [Input("recordType")]
        public Input<string>? RecordType { get; set; }

        [Input("relatesEntities")]
        public Input<bool>? RelatesEntities { get; set; }

        [Input("skippedValues")]
        private InputList<string>? _skippedValues;
        public InputList<string> SkippedValues
        {
            get => _skippedValues ?? (_skippedValues = new InputList<string>());
            set => _skippedValues = value;
        }

        [Input("structuredInputs")]
        private InputList<Inputs.CseLogMappingStructuredInputGetArgs>? _structuredInputs;
        public InputList<Inputs.CseLogMappingStructuredInputGetArgs> StructuredInputs
        {
            get => _structuredInputs ?? (_structuredInputs = new InputList<Inputs.CseLogMappingStructuredInputGetArgs>());
            set => _structuredInputs = value;
        }

        [Input("unstructuredFields")]
        public Input<Inputs.CseLogMappingUnstructuredFieldsGetArgs>? UnstructuredFields { get; set; }

        public CseLogMappingState()
        {
        }
    }
}
