{
    "name": "sumologic",
    "description": "A Pulumi package for creating and managing sumologic cloud resources.",
    "keywords": [
        "pulumi",
        "sumologic"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sumologic` Terraform Provider](https://github.com/SumoLogic/terraform-provider-sumologic).",
    "repository": "https://github.com/pulumi/pulumi-sumologic",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessId": {
                "type": "string"
            },
            "accessKey": {
                "type": "string"
            },
            "baseUrl": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_BASE_URL"
                    ]
                }
            },
            "environment": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_ENVIRONMENT"
                    ]
                }
            }
        },
        "defaults": [
            "accessId",
            "accessKey"
        ]
    },
    "types": {
        "sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourcePathTagFilter:AwsInventorySourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/AwsInventorySourcePathTagFilter:AwsInventorySourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/AwsXraySourcePath:AwsXraySourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourcePathTagFilter:AwsXraySourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/AwsXraySourcePathTagFilter:AwsXraySourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourcePathTagFilter:CloudfrontSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudfrontSourcePathTagFilter:CloudfrontSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourcePathTagFilter:CloudtrailSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudtrailSourcePathTagFilter:CloudtrailSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourcePathTagFilter:CloudwatchSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudwatchSourcePathTagFilter:CloudwatchSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardColoringRule:DashboardColoringRule": {
            "properties": {
                "colorThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardColoringRuleColorThreshold:DashboardColoringRuleColorThreshold"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multipleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "multipleSeriesAggregateFunction",
                "scope",
                "singleSeriesAggregateFunction"
            ]
        },
        "sumologic:index/DashboardColoringRuleColorThreshold:DashboardColoringRuleColorThreshold": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "sumologic:index/DashboardLayout:DashboardLayout": {
            "properties": {
                "grid": {
                    "$ref": "#/types/sumologic:index/DashboardLayoutGrid:DashboardLayoutGrid",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardLayoutGrid:DashboardLayoutGrid": {
            "properties": {
                "layoutStructures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardLayoutGridLayoutStructure:DashboardLayoutGridLayoutStructure"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "layoutStructures"
            ]
        },
        "sumologic:index/DashboardLayoutGridLayoutStructure:DashboardLayoutGridLayoutStructure": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "structure": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "structure"
            ]
        },
        "sumologic:index/DashboardPanel:DashboardPanel": {
            "properties": {
                "sumoSearchPanel": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanel:DashboardPanelSumoSearchPanel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textPanel": {
                    "$ref": "#/types/sumologic:index/DashboardPanelTextPanel:DashboardPanelTextPanel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanel:DashboardPanelSumoSearchPanel": {
            "properties": {
                "coloringRule": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelColoringRule:DashboardPanelSumoSearchPanelColoringRule",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepVisualSettingsConsistentWithParent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedDashboard": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelLinkedDashboard:DashboardPanelSumoSearchPanelLinkedDashboard",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQuery:DashboardPanelSumoSearchPanelQuery"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRange:DashboardPanelSumoSearchPanelTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualSettings": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key"
                    ]
                }
            }
        },
        "sumologic:index/DashboardPanelSumoSearchPanelColoringRule:DashboardPanelSumoSearchPanelColoringRule": {
            "properties": {
                "colorThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelColoringRuleColorThreshold:DashboardPanelSumoSearchPanelColoringRuleColorThreshold"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multipleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "multipleSeriesAggregateFunction",
                "scope",
                "singleSeriesAggregateFunction"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelColoringRuleColorThreshold:DashboardPanelSumoSearchPanelColoringRuleColorThreshold": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelLinkedDashboard:DashboardPanelSumoSearchPanelLinkedDashboard": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeTimeRange": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeVariables": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQuery:DashboardPanelSumoSearchPanelQuery": {
            "properties": {
                "metricsQueryData": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryData:DashboardPanelSumoSearchPanelQueryMetricsQueryData",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsQueryMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryString": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queryKey",
                "queryString",
                "queryType"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryData:DashboardPanelSumoSearchPanelQueryMetricsQueryData": {
            "properties": {
                "aggregationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metric": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filters",
                "metric"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negation": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator": {
            "properties": {
                "operatorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operatorName",
                "parameters"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRange:DashboardPanelSumoSearchPanelTimeRange": {
            "properties": {
                "beginBoundedTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completeLiteralTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange": {
            "properties": {
                "from": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardPanelTextPanel:DashboardPanelTextPanel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepVisualSettingsConsistentWithParent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "text": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualSettings": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key"
                    ]
                }
            }
        },
        "sumologic:index/DashboardTimeRange:DashboardTimeRange": {
            "properties": {
                "beginBoundedTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRange:DashboardTimeRangeBeginBoundedTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completeLiteralTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeCompleteLiteralTimeRange:DashboardTimeRangeCompleteLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRange:DashboardTimeRangeBeginBoundedTimeRange": {
            "properties": {
                "from": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFrom:DashboardTimeRangeBeginBoundedTimeRangeFrom",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeTo:DashboardTimeRangeBeginBoundedTimeRangeTo",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFrom:DashboardTimeRangeBeginBoundedTimeRangeFrom": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeTo:DashboardTimeRangeBeginBoundedTimeRangeTo": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardTimeRangeCompleteLiteralTimeRange:DashboardTimeRangeCompleteLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap": {
            "properties": {
                "datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardTopologyLabelMapData:DashboardTopologyLabelMapData"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datas"
            ]
        },
        "sumologic:index/DashboardTopologyLabelMapData:DashboardTopologyLabelMapData": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "values"
            ]
        },
        "sumologic:index/DashboardVariable:DashboardVariable": {
            "properties": {
                "allowMultiSelect": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultValue": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hideFromUi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAllOption": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinition:DashboardVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "sourceDefinition"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "sourceDefinition"
                    ]
                }
            }
        },
        "sumologic:index/DashboardVariableSourceDefinition:DashboardVariableSourceDefinition": {
            "properties": {
                "csvVariableSourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinitionCsvVariableSourceDefinition:DashboardVariableSourceDefinitionCsvVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logQueryVariableSourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition:DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadataVariableSourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinitionMetadataVariableSourceDefinition:DashboardVariableSourceDefinitionMetadataVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardVariableSourceDefinitionCsvVariableSourceDefinition:DashboardVariableSourceDefinitionCsvVariableSourceDefinition": {
            "properties": {
                "values": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "sumologic:index/DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition:DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition": {
            "properties": {
                "field": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "field",
                "query"
            ]
        },
        "sumologic:index/DashboardVariableSourceDefinitionMetadataVariableSourceDefinition:DashboardVariableSourceDefinitionMetadataVariableSourceDefinition": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "key"
            ]
        },
        "sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/ElbSourceFilter:ElbSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/ElbSourcePath:ElbSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourcePathTagFilter:ElbSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/ElbSourcePathTagFilter:ElbSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication": {
            "properties": {
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/GcpSourceFilter:GcpSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/GcpSourcePath:GcpSourcePath": {
            "properties": {
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/HttpSourceFilter:HttpSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath": {
            "properties": {
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourcePathTagFilter:KinesisMetricsSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/KinesisMetricsSourcePathTagFilter:KinesisMetricsSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/LookupTableField:LookupTableField": {
            "properties": {
                "fieldName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "fieldType"
            ]
        },
        "sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/MetadataSourceFilter:MetadataSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/MetadataSourcePath:MetadataSourcePath": {
            "properties": {
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/MonitorNotification:MonitorNotification": {
            "properties": {
                "notification": {
                    "$ref": "#/types/sumologic:index/MonitorNotificationNotification:MonitorNotificationNotification",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runForTriggerTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notification",
                "runForTriggerTypes"
            ]
        },
        "sumologic:index/MonitorNotificationNotification:MonitorNotificationNotification": {
            "properties": {
                "actionType": {
                    "type": "string",
                    "deprecationMessage": "The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageBody": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actionType",
                        "connectionType"
                    ]
                }
            }
        },
        "sumologic:index/MonitorQuery:MonitorQuery": {
            "properties": {
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rowId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query",
                "rowId"
            ]
        },
        "sumologic:index/MonitorTrigger:MonitorTrigger": {
            "properties": {
                "detectionMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "occurrenceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerSource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/PollingSourceFilter:PollingSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/PollingSourcePath:PollingSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourcePathTagFilter:PollingSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/PollingSourcePathTagFilter:PollingSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/S3AuditSourcePath:S3AuditSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourcePathTagFilter:S3AuditSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/S3AuditSourcePathTagFilter:S3AuditSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/S3SourceAuthentication:S3SourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/S3SourceFilter:S3SourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/S3SourcePath:S3SourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourcePathTagFilter:S3SourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/S3SourcePathTagFilter:S3SourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled": {
            "properties": {
                "firstNameAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastNameAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onDemandProvisioningRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "onDemandProvisioningRoles"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the sumologic package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "accessId": {
                "type": "string"
            },
            "accessKey": {
                "type": "string"
            },
            "baseUrl": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_BASE_URL"
                    ]
                }
            },
            "environment": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_ENVIRONMENT"
                    ]
                }
            }
        },
        "requiredInputs": [
            "accessId",
            "accessKey"
        ]
    },
    "resources": {
        "sumologic:index/awsInventorySource:AwsInventorySource": {
            "description": "Provides a Sumologic AWS Inventory source to collect AWS resource inventory data.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst awsInventorySource = new sumologic.AwsInventorySource(\"aws_inventory_source\", {\n    authentication: {\n        roleArn: \"arn:aws:iam::01234567890:role/sumo-role\",\n        type: \"AWSRoleBasedAuthentication\",\n    },\n    category: \"aws/aws_inventory\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsInventory\",\n    description: \"My description\",\n    path: {\n        limitToNamespaces: [\n            \"AWS/RDS\",\n            \"AWS/EC2\",\n        ],\n        limitToRegions: [\"us-west-2\"],\n        type: \"AwsInventoryPath\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\naws_inventory_source = sumologic.AwsInventorySource(\"awsInventorySource\",\n    authentication=sumologic.AwsInventorySourceAuthenticationArgs(\n        role_arn=\"arn:aws:iam::01234567890:role/sumo-role\",\n        type=\"AWSRoleBasedAuthentication\",\n    ),\n    category=\"aws/aws_inventory\",\n    collector_id=collector.id,\n    content_type=\"AwsInventory\",\n    description=\"My description\",\n    path=sumologic.AwsInventorySourcePathArgs(\n        limit_to_namespaces=[\n            \"AWS/RDS\",\n            \"AWS/EC2\",\n        ],\n        limit_to_regions=[\"us-west-2\"],\n        type=\"AwsInventoryPath\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var awsInventorySource = new SumoLogic.AwsInventorySource(\"awsInventorySource\", new SumoLogic.AwsInventorySourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.AwsInventorySourceAuthenticationArgs\n            {\n                RoleArn = \"arn:aws:iam::01234567890:role/sumo-role\",\n                Type = \"AWSRoleBasedAuthentication\",\n            },\n            Category = \"aws/aws_inventory\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsInventory\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.AwsInventorySourcePathArgs\n            {\n                LimitToNamespaces = \n                {\n                    \"AWS/RDS\",\n                    \"AWS/EC2\",\n                },\n                LimitToRegions = \n                {\n                    \"us-west-2\",\n                },\n                Type = \"AwsInventoryPath\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewAwsInventorySource(ctx, \"awsInventorySource\", \u0026sumologic.AwsInventorySourceArgs{\n\t\t\tAuthentication: \u0026sumologic.AwsInventorySourceAuthenticationArgs{\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::01234567890:role/sumo-role\"),\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/aws_inventory\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsInventory\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.AwsInventorySourcePathArgs{\n\t\t\t\tLimitToNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"AWS/RDS\"),\n\t\t\t\t\tpulumi.String(\"AWS/EC2\"),\n\t\t\t\t},\n\t\t\t\tLimitToRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-west-2\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"AwsInventoryPath\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. This has to be `AwsInventoryPath` for AWS Inventory source.\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details to access AWS `Describe*` APIs.\n     + `type` - (Required) Must be `AWSRoleBasedAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN. More details [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Grant-Access-to-an-AWS-Product#iam-role).\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.\n     + `limit_to_regions` - (Optional) List of Amazon regions. \n     + `limit_to_namespaces` - (Optional) List of namespaces. By default all namespaces are selected. You can also choose a subset from\n        + AWS/EC2\n        + AWS/AutoScaling\n        + AWS/EBS\n        + AWS/ELB\n        + AWS/ApplicationELB\n        + AWS/NetworkELB\n        + AWS/Lambda\n        + AWS/RDS\n        + AWS/Dynamodb\n        + AWS/ECS \n        + AWS/Elasticache\n        + AWS/Redshift\n        + AWS/Kinesis\n\n\n## Import\n\nAWS Inventory sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsInventorySource:AwsInventorySource test 123/456\n```\n\n AWS Inventory sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsInventorySource:AwsInventorySource test my-test-collector/my-test-source\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsInventorySource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/awsXraySource:AwsXraySource": {
            "description": "Provides a Sumologic AWS XRay source to collect metrics derived from XRay traces.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst awsXraySource = new sumologic.AwsXraySource(\"aws_xray_source\", {\n    authentication: {\n        roleArn: \"arn:aws:iam::01234567890:role/sumo-role\",\n        type: \"AWSRoleBasedAuthentication\",\n    },\n    category: \"aws/xray\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsXRay\",\n    description: \"My description\",\n    path: {\n        limitToRegions: [\"us-west-2\"],\n        type: \"AwsXRayPath\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\naws_xray_source = sumologic.AwsXraySource(\"awsXraySource\",\n    authentication=sumologic.AwsXraySourceAuthenticationArgs(\n        role_arn=\"arn:aws:iam::01234567890:role/sumo-role\",\n        type=\"AWSRoleBasedAuthentication\",\n    ),\n    category=\"aws/xray\",\n    collector_id=collector.id,\n    content_type=\"AwsXRay\",\n    description=\"My description\",\n    path=sumologic.AwsXraySourcePathArgs(\n        limit_to_regions=[\"us-west-2\"],\n        type=\"AwsXRayPath\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var awsXraySource = new SumoLogic.AwsXraySource(\"awsXraySource\", new SumoLogic.AwsXraySourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.AwsXraySourceAuthenticationArgs\n            {\n                RoleArn = \"arn:aws:iam::01234567890:role/sumo-role\",\n                Type = \"AWSRoleBasedAuthentication\",\n            },\n            Category = \"aws/xray\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsXRay\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.AwsXraySourcePathArgs\n            {\n                LimitToRegions = \n                {\n                    \"us-west-2\",\n                },\n                Type = \"AwsXRayPath\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewAwsXraySource(ctx, \"awsXraySource\", \u0026sumologic.AwsXraySourceArgs{\n\t\t\tAuthentication: \u0026sumologic.AwsXraySourceAuthenticationArgs{\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::01234567890:role/sumo-role\"),\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/xray\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsXRay\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.AwsXraySourcePathArgs{\n\t\t\t\tLimitToRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-west-2\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"AwsXRayPath\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for making `xray:Get*` calls.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `AwsXRayPath` for AWS XRay source.\n     + `limit_to_regions` - (Optional) List of Amazon regions.\n\n\n## Import\n\nAWS XRay sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsXraySource:AwsXraySource test 123/456\n```\n\n AWS XRay sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsXraySource:AwsXraySource test my-test-collector/my-test-source\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsXraySourcePath:AwsXraySourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsXraySourcePath:AwsXraySourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsXraySource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/AwsXraySourcePath:AwsXraySourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudSyslogSource:CloudSyslogSource": {
            "description": "Provides a [Sumo Logic Cloud Syslog source](https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/Cloud_Syslog_Source).\n\n__IMPORTANT:__ The token is stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst cloudsyslogSource = new sumologic.CloudSyslogSource(\"cloudsyslog_source\", {\n    category: \"my/source/category\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    description: \"My description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudsyslog_source = sumologic.CloudSyslogSource(\"cloudsyslogSource\",\n    category=\"my/source/category\",\n    collector_id=collector.id,\n    description=\"My description\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var cloudsyslogSource = new SumoLogic.CloudSyslogSource(\"cloudsyslogSource\", new SumoLogic.CloudSyslogSourceArgs\n        {\n            Category = \"my/source/category\",\n            CollectorId = collector.Id,\n            Description = \"My description\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudSyslogSource(ctx, \"cloudsyslogSource\", \u0026sumologic.CloudSyslogSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the source.\n- `token` - The token to use for sending data to this source.\n\n\n## Import\n\nCloud Syslog sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudSyslogSource:CloudSyslogSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudSyslogSource:CloudSyslogSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/Cloud_Syslog_Source ",
            "properties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "name",
                "token"
            ],
            "inputProperties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudSyslogSource resources.\n",
                "properties": {
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudToCloudSource:CloudToCloudSource": {
            "description": "Provides a [Sumologic Cloud-to-Cloud source][1].\n\n## Supported Integrations\n\nList of available integrations along with their corresponding `JSON` templates is present [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations) \n\n__IMPORTANT:__ The API credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {description: \"Just testing this\"});\nconst oktaSource = new sumologic.CloudToCloudSource(\"oktaSource\", {\n    collectorId: collector.id,\n    schemaRef: {\n        type: \"Okta\",\n    },\n    config: JSON.stringify({\n        name: \"okta source\",\n        domain: \"dev-xxx-admin.okta.com\",\n        collectAll: true,\n        apiKey: \"xxx\",\n        fields: {\n            _siemForward: false,\n        },\n        pollingInterval: 30,\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nokta_source = sumologic.CloudToCloudSource(\"oktaSource\",\n    collector_id=collector.id,\n    schema_ref={\n        \"type\": \"Okta\",\n    },\n    config=json.dumps({\n        \"name\": \"okta source\",\n        \"domain\": \"dev-xxx-admin.okta.com\",\n        \"collectAll\": True,\n        \"apiKey\": \"xxx\",\n        \"fields\": {\n            \"_siemForward\": False,\n        },\n        \"pollingInterval\": 30,\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var oktaSource = new SumoLogic.CloudToCloudSource(\"oktaSource\", new SumoLogic.CloudToCloudSourceArgs\n        {\n            CollectorId = collector.Id,\n            SchemaRef = \n            {\n                { \"type\", \"Okta\" },\n            },\n            Config = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"name\", \"okta source\" },\n                { \"domain\", \"dev-xxx-admin.okta.com\" },\n                { \"collectAll\", true },\n                { \"apiKey\", \"xxx\" },\n                { \"fields\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"_siemForward\", false },\n                } },\n                { \"pollingInterval\", 30 },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"name\":       \"okta source\",\n\t\t\t\"domain\":     \"dev-xxx-admin.okta.com\",\n\t\t\t\"collectAll\": true,\n\t\t\t\"apiKey\":     \"xxx\",\n\t\t\t\"fields\": map[string]interface{}{\n\t\t\t\t\"_siemForward\": false,\n\t\t\t},\n\t\t\t\"pollingInterval\": 30,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = sumologic.NewCloudToCloudSource(ctx, \"oktaSource\", \u0026sumologic.CloudToCloudSourceArgs{\n\t\t\tCollectorId: collector.ID(),\n\t\t\tSchemaRef: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"Okta\"),\n\t\t\t},\n\t\t\tConfig: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n - `config` - (Required) This is a JSON object which contains the configuration parameters for the Source.\n - `schema_ref` - (Required) Source schema details. \n     + `type` - (Required) Schema type for the Cloud-to-Cloud source.\n\n\n## Import\n\nCloud-to-Cloud sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test 100000001/100000001\n```\n\n Cloud-to-Cloud sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations ",
            "properties": {
                "collectorId": {
                    "type": "integer"
                },
                "config": {
                    "type": "string"
                },
                "schemaRef": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "collectorId",
                "config",
                "schemaRef"
            ],
            "inputProperties": {
                "collectorId": {
                    "type": "integer"
                },
                "config": {
                    "type": "string"
                },
                "schemaRef": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "collectorId",
                "config",
                "schemaRef"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudToCloudSource resources.\n",
                "properties": {
                    "collectorId": {
                        "type": "integer"
                    },
                    "config": {
                        "type": "string"
                    },
                    "schemaRef": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudfrontSource:CloudfrontSource": {
            "description": "Provides a [Sumologic CloudFront source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst cloudfrontSource = new sumologic.CloudfrontSource(\"cloudfront_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/cloudfront\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsCloudFrontBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudfront_source = sumologic.CloudfrontSource(\"cloudfrontSource\",\n    authentication=sumologic.CloudfrontSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/cloudfront\",\n    collector_id=collector.id,\n    content_type=\"AwsCloudFrontBucket\",\n    description=\"My description\",\n    path=sumologic.CloudfrontSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var cloudfrontSource = new SumoLogic.CloudfrontSource(\"cloudfrontSource\", new SumoLogic.CloudfrontSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.CloudfrontSourceAuthenticationArgs\n            {\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n                Type = \"S3BucketAuthentication\",\n            },\n            Category = \"aws/cloudfront\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsCloudFrontBucket\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.CloudfrontSourcePathArgs\n            {\n                BucketName = \"Bucket1\",\n                PathExpression = \"*\",\n                Type = \"S3BucketPathExpression\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudfrontSource(ctx, \"cloudfrontSource\", \u0026sumologic.CloudfrontSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.CloudfrontSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/cloudfront\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsCloudFrontBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.CloudfrontSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.\n     + `bucket_name` - (Required) The name of the bucket. This is needed if using type `S3BucketPathExpression`. \n     + `path_expression` - (Required) The path to the data. This is needed if using type `S3BucketPathExpression`.\n\n\n## Import\n\nCloudFront sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test 123/456\n```\n\n CloudFront sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudfrontSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudtrailSource:CloudtrailSource": {
            "description": "Provides a [Sumologic CloudTrail source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-CloudTrail-Source).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst cloudtrailSource = new sumologic.CloudtrailSource(\"cloudtrail_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/cloudtrail\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsCloudTrailBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudtrail_source = sumologic.CloudtrailSource(\"cloudtrailSource\",\n    authentication=sumologic.CloudtrailSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/cloudtrail\",\n    collector_id=collector.id,\n    content_type=\"AwsCloudTrailBucket\",\n    description=\"My description\",\n    path=sumologic.CloudtrailSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var cloudtrailSource = new SumoLogic.CloudtrailSource(\"cloudtrailSource\", new SumoLogic.CloudtrailSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.CloudtrailSourceAuthenticationArgs\n            {\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n                Type = \"S3BucketAuthentication\",\n            },\n            Category = \"aws/cloudtrail\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsCloudTrailBucket\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.CloudtrailSourcePathArgs\n            {\n                BucketName = \"Bucket1\",\n                PathExpression = \"*\",\n                Type = \"S3BucketPathExpression\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudtrailSource(ctx, \"cloudtrailSource\", \u0026sumologic.CloudtrailSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.CloudtrailSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/cloudtrail\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsCloudTrailBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.CloudtrailSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.\n     + `bucket_name` - (Required) The name of the bucket.\n     + `path_expression` - (Required) The path to the data.\n\n\n## Import\n\nCloudTrail sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudtrailSource:CloudtrailSource test 123/456\n```\n\n CloudTrail sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudtrailSource:CloudtrailSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-CloudTrail-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudtrailSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudwatchSource:CloudwatchSource": {
            "description": "Provides a [Sumologic CloudWatch source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst filters = [{\n    name: \"Exclude Comments\",\n    filter_type: \"Exclude\",\n    regexp: \"#.*\",\n}];\nconst tagfilters = [\n    {\n        type: \"TagFilters\",\n        namespace: \"All\",\n        tags: [\"k3=v3\"],\n    },\n    {\n        type: \"TagFilters\",\n        namespace: \"AWS/Route53\",\n        tags: [\"k1=v1\"],\n    },\n    {\n        type: \"TagFilters\",\n        namespace: \"AWS/S3\",\n        tags: [\"k2=v2\"],\n    },\n];\nconst collector = new sumologic.Collector(\"collector\", {description: \"Just testing this\"});\nconst cloudwatchSource = new sumologic.CloudwatchSource(\"cloudwatchSource\", {\n    description: \"My description\",\n    category: \"aws/cw\",\n    contentType: \"AwsCloudWatch\",\n    scanInterval: 300000,\n    paused: false,\n    collectorId: collector.id,\n    authentication: {\n        type: \"AWSRoleBasedAuthentication\",\n        roleArn: \"arn:aws:iam::01234567890:role/sumo-role\",\n    },\n    path: {\n        type: \"CloudWatchPath\",\n        limitToRegions: [\"us-west-2\"],\n        limitToNamespaces: [\n            \"AWS/Route53\",\n            \"AWS/S3\",\n            \"customNamespace\",\n        ],\n        dynamic: [{\n            forEach: tagfilters,\n            content: [{\n                type: tag_filters.value.type,\n                namespace: tag_filters.value.namespace,\n                tags: tag_filters.value.tags,\n            }],\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfilters = [{\n    \"name\": \"Exclude Comments\",\n    \"filter_type\": \"Exclude\",\n    \"regexp\": \"#.*\",\n}]\ntagfilters = [\n    {\n        \"type\": \"TagFilters\",\n        \"namespace\": \"All\",\n        \"tags\": [\"k3=v3\"],\n    },\n    {\n        \"type\": \"TagFilters\",\n        \"namespace\": \"AWS/Route53\",\n        \"tags\": [\"k1=v1\"],\n    },\n    {\n        \"type\": \"TagFilters\",\n        \"namespace\": \"AWS/S3\",\n        \"tags\": [\"k2=v2\"],\n    },\n]\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudwatch_source = sumologic.CloudwatchSource(\"cloudwatchSource\",\n    description=\"My description\",\n    category=\"aws/cw\",\n    content_type=\"AwsCloudWatch\",\n    scan_interval=300000,\n    paused=False,\n    collector_id=collector.id,\n    authentication=sumologic.CloudwatchSourceAuthenticationArgs(\n        type=\"AWSRoleBasedAuthentication\",\n        role_arn=\"arn:aws:iam::01234567890:role/sumo-role\",\n    ),\n    path=sumologic.CloudwatchSourcePathArgs(\n        type=\"CloudWatchPath\",\n        limit_to_regions=[\"us-west-2\"],\n        limit_to_namespaces=[\n            \"AWS/Route53\",\n            \"AWS/S3\",\n            \"customNamespace\",\n        ],\n        dynamic=[{\n            \"forEach\": tagfilters,\n            \"content\": [{\n                \"type\": tag_filters[\"value\"][\"type\"],\n                \"namespace\": tag_filters[\"value\"][\"namespace\"],\n                \"tags\": tag_filters[\"value\"][\"tags\"],\n            }],\n        }],\n    ))\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var filters = \n        {\n            \n            {\n                { \"name\", \"Exclude Comments\" },\n                { \"filter_type\", \"Exclude\" },\n                { \"regexp\", \"#.*\" },\n            },\n        };\n        var tagfilters = \n        {\n            \n            {\n                { \"type\", \"TagFilters\" },\n                { \"namespace\", \"All\" },\n                { \"tags\", \n                {\n                    \"k3=v3\",\n                } },\n            },\n            \n            {\n                { \"type\", \"TagFilters\" },\n                { \"namespace\", \"AWS/Route53\" },\n                { \"tags\", \n                {\n                    \"k1=v1\",\n                } },\n            },\n            \n            {\n                { \"type\", \"TagFilters\" },\n                { \"namespace\", \"AWS/S3\" },\n                { \"tags\", \n                {\n                    \"k2=v2\",\n                } },\n            },\n        };\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var cloudwatchSource = new SumoLogic.CloudwatchSource(\"cloudwatchSource\", new SumoLogic.CloudwatchSourceArgs\n        {\n            Description = \"My description\",\n            Category = \"aws/cw\",\n            ContentType = \"AwsCloudWatch\",\n            ScanInterval = 300000,\n            Paused = false,\n            CollectorId = collector.Id,\n            Authentication = new SumoLogic.Inputs.CloudwatchSourceAuthenticationArgs\n            {\n                Type = \"AWSRoleBasedAuthentication\",\n                RoleArn = \"arn:aws:iam::01234567890:role/sumo-role\",\n            },\n            Path = new SumoLogic.Inputs.CloudwatchSourcePathArgs\n            {\n                Type = \"CloudWatchPath\",\n                LimitToRegions = \n                {\n                    \"us-west-2\",\n                },\n                LimitToNamespaces = \n                {\n                    \"AWS/Route53\",\n                    \"AWS/S3\",\n                    \"customNamespace\",\n                },\n                Dynamic = \n                {\n                    \n                    {\n                        { \"forEach\", tagfilters },\n                        { \"content\", \n                        {\n                            \n                            {\n                                { \"type\", tag_filters.Value.Type },\n                                { \"namespace\", tag_filters.Value.Namespace },\n                                { \"tags\", tag_filters.Value.Tags },\n                            },\n                        } },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_ := []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"name\":        \"Exclude Comments\",\n\t\t\t\t\"filter_type\": \"Exclude\",\n\t\t\t\t\"regexp\":      \"#.*\",\n\t\t\t},\n\t\t}\n\t\ttagfilters := []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\":      \"TagFilters\",\n\t\t\t\t\"namespace\": \"All\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k3=v3\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\":      \"TagFilters\",\n\t\t\t\t\"namespace\": \"AWS/Route53\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k1=v1\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\":      \"TagFilters\",\n\t\t\t\t\"namespace\": \"AWS/S3\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k2=v2\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudwatchSource(ctx, \"cloudwatchSource\", \u0026sumologic.CloudwatchSourceArgs{\n\t\t\tDescription:  pulumi.String(\"My description\"),\n\t\t\tCategory:     pulumi.String(\"aws/cw\"),\n\t\t\tContentType:  pulumi.String(\"AwsCloudWatch\"),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tCollectorId:  collector.ID(),\n\t\t\tAuthentication: \u0026sumologic.CloudwatchSourceAuthenticationArgs{\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::01234567890:role/sumo-role\"),\n\t\t\t},\n\t\t\tPath: \u0026sumologic.CloudwatchSourcePathArgs{\n\t\t\t\tType: pulumi.String(\"CloudWatchPath\"),\n\t\t\t\tLimitToRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-west-2\"),\n\t\t\t\t},\n\t\t\t\tLimitToNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"AWS/Route53\"),\n\t\t\t\t\tpulumi.String(\"AWS/S3\"),\n\t\t\t\t\tpulumi.String(\"customNamespace\"),\n\t\t\t\t},\n\t\t\t\tDynamic: pulumi.MapArray{\n\t\t\t\t\tpulumi.Map{\n\t\t\t\t\t\t\"forEach\": toPulumiMapArray(tagfilters),\n\t\t\t\t\t\t\"content\": pulumi.AnyMapArray{\n\t\t\t\t\t\t\tpulumi.AnyMap{\n\t\t\t\t\t\t\t\t\"type\":      pulumi.Any(tag_filters.Value.Type),\n\t\t\t\t\t\t\t\t\"namespace\": pulumi.Any(tag_filters.Value.Namespace),\n\t\t\t\t\t\t\t\t\"tags\":      pulumi.Any(tag_filters.Value.Tags),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\nfunc toPulumiMapArray(arr []Map) pulumi.MapArray {\n\tvar pulumiArr pulumi.MapArray\n\tfor _, v := range arr {\n\t\tpulumiArr = append(pulumiArr, pulumi.Map(v))\n\t}\n\treturn pulumiArr\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `CloudWatchPath` for CloudWatch source.\n     + `limit_to_regions` - (Optional) List of Amazon regions. \n     + `limit_to_namespaces` - (Optional) List of namespaces. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace.\n     + `tag_filters` - (Optional) Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)\n          + `type` - This value has to be set to `TagFilters`\n          + `namespace` - Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.\n          + `tags` - List of key-value pairs of tag filters. Eg: `[\"k3=v3\"]`\n\n\n## Import\n\nCloudWatch sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudwatchSource:CloudwatchSource test 123/456\n```\n\n CloudWatch sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudwatchSource:CloudwatchSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudwatchSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/collector:Collector": {
            "description": "Provides a [Sumologic (Hosted) Collector][1].\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n    fields: {\n        environment: \"production\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\",\n    description=\"Just testing this\",\n    fields={\n        \"environment\": \"production\",\n    })\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n            Fields = \n            {\n                { \"environment\", \"production\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t\tFields: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCollectors can be imported using the collector id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/collector:Collector test 1234567890\n```\n\n Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/collector:Collector test my_test_collector\n```\n\n [1]https://help.sumologic.com/Send_Data/Hosted_Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields ",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map containing [key/value pairs][3].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map containing [key/value pairs][3].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Collector resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the collector.\n"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map containing [key/value pairs][3].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment": {
            "properties": {
                "collectorId": {
                    "type": "string"
                },
                "ingestBudgetId": {
                    "type": "string"
                }
            },
            "required": [
                "collectorId",
                "ingestBudgetId"
            ],
            "inputProperties": {
                "collectorId": {
                    "type": "string"
                },
                "ingestBudgetId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "collectorId",
                "ingestBudgetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CollectorIngestBudgetAssignment resources.\n",
                "properties": {
                    "collectorId": {
                        "type": "string"
                    },
                    "ingestBudgetId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/connection:Connection": {
            "description": "Provides the ability to create, read, delete, update connections.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst connection = new sumologic.Connection(\"connection\", {\n    type: \"WebhookConnection\",\n    description: \"My description\",\n    url: \"https://connection-endpoint.com\",\n    headers: {\n        \"X-Header\": \"my-header\",\n    },\n    customHeaders: {\n        \"X-custom\": \"my-custom-header\",\n    },\n    defaultPayload: `{\n  \"client\" : \"Sumo Logic\",\n  \"eventType\" : \"{{Name}}\",\n  \"description\" : \"{{Description}}\",\n  \"search_url\" : \"{{QueryUrl}}\",\n  \"num_records\" : \"{{NumRawResults}}\",\n  \"search_results\" : \"{{AggregateResultsJson}}\"\n}\n`,\n    webhookType: \"Webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nconnection = sumologic.Connection(\"connection\",\n    type=\"WebhookConnection\",\n    description=\"My description\",\n    url=\"https://connection-endpoint.com\",\n    headers={\n        \"X-Header\": \"my-header\",\n    },\n    custom_headers={\n        \"X-custom\": \"my-custom-header\",\n    },\n    default_payload=\"\"\"{\n  \"client\" : \"Sumo Logic\",\n  \"eventType\" : \"{{Name}}\",\n  \"description\" : \"{{Description}}\",\n  \"search_url\" : \"{{QueryUrl}}\",\n  \"num_records\" : \"{{NumRawResults}}\",\n  \"search_results\" : \"{{AggregateResultsJson}}\"\n}\n\"\"\",\n    webhook_type=\"Webhook\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var connection = new SumoLogic.Connection(\"connection\", new SumoLogic.ConnectionArgs\n        {\n            Type = \"WebhookConnection\",\n            Description = \"My description\",\n            Url = \"https://connection-endpoint.com\",\n            Headers = \n            {\n                { \"X-Header\", \"my-header\" },\n            },\n            CustomHeaders = \n            {\n                { \"X-custom\", \"my-custom-header\" },\n            },\n            DefaultPayload = @\"{\n  \"\"client\"\" : \"\"Sumo Logic\"\",\n  \"\"eventType\"\" : \"\"{{Name}}\"\",\n  \"\"description\"\" : \"\"{{Description}}\"\",\n  \"\"search_url\"\" : \"\"{{QueryUrl}}\"\",\n  \"\"num_records\"\" : \"\"{{NumRawResults}}\"\",\n  \"\"search_results\"\" : \"\"{{AggregateResultsJson}}\"\"\n}\n\",\n            WebhookType = \"Webhook\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewConnection(ctx, \"connection\", \u0026sumologic.ConnectionArgs{\n\t\t\tType:        pulumi.String(\"WebhookConnection\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tUrl:         pulumi.String(\"https://connection-endpoint.com\"),\n\t\t\tHeaders: pulumi.StringMap{\n\t\t\t\t\"X-Header\": pulumi.String(\"my-header\"),\n\t\t\t},\n\t\t\tCustomHeaders: pulumi.StringMap{\n\t\t\t\t\"X-custom\": pulumi.String(\"my-custom-header\"),\n\t\t\t},\n\t\t\tDefaultPayload: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"client\\\" : \\\"Sumo Logic\\\",\\n\", \"  \\\"eventType\\\" : \\\"{{Name}}\\\",\\n\", \"  \\\"description\\\" : \\\"{{Description}}\\\",\\n\", \"  \\\"search_url\\\" : \\\"{{QueryUrl}}\\\",\\n\", \"  \\\"num_records\\\" : \\\"{{NumRawResults}}\\\",\\n\", \"  \\\"search_results\\\" : \\\"{{AggregateResultsJson}}\\\"\\n\", \"}\\n\")),\n\t\t\tWebhookType:    pulumi.String(\"Webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `type` - (Required) Type of connection. Only `WebhookDefinition` is implimented right now.\n- `name` - (Required) Name of connection. Name should be a valid alphanumeric value.\n- `description` - (Optional) Description of the connection.\n- `url` - (Required) URL for the webhook connection.\n- `headers` - (Optional) Map of access authorization headers.\n- `custom_headers` - (Optional) Map of custom webhook headers\n- `default_payload` - (Required) Default payload of the webhook.\n- `webhook_type` - (Optional) Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, and `MicrosoftTeams`. Default: `Webhook`\n\nAdditional data provided in state\n\n- `id` - (Computed) The Id for this connection.\n\n\n## Import\n\nConnections can be imported using the connection id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/connection:Connection test 1234567890\n```\n\n ",
            "properties": {
                "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "defaultPayload": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "webhookType": {
                    "type": "string"
                }
            },
            "required": [
                "defaultPayload",
                "name",
                "type",
                "url"
            ],
            "inputProperties": {
                "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "defaultPayload": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "webhookType": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "defaultPayload",
                "type",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "customHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "defaultPayload": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "webhookType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/content:Content": {
            "description": "Provides a way to interact with Sumologic Content.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = sumologic.getPersonalFolder({});\nconst test = new sumologic.Content(\"test\", {\n    parentId: personalFolder.then(personalFolder =\u003e personalFolder.id),\n    config: JSON.stringify({\n        type: \"SavedSearchWithScheduleSyncDefinition\",\n        name: \"test-333\",\n        search: {\n            queryText: \"\\\"warn\\\"\",\n            defaultTimeRange: \"-15m\",\n            byReceiptTime: false,\n            viewName: \"\",\n            viewStartTime: \"1970-01-01T00:00:00Z\",\n            queryParameters: [],\n            parsingMode: \"Manual\",\n        },\n        searchSchedule: {\n            cronExpression: \"0 0 * * * ? *\",\n            displayableTimeRange: \"-10m\",\n            parseableTimeRange: {\n                type: \"BeginBoundedTimeRange\",\n                from: {\n                    type: \"RelativeTimeRangeBoundary\",\n                    relativeTime: \"-50m\",\n                },\n                to: undefined,\n            },\n            timeZone: \"America/Los_Angeles\",\n            threshold: undefined,\n            notification: {\n                taskType: \"EmailSearchNotificationSyncDefinition\",\n                toList: [\"ops@acme.org\"],\n                subjectTemplate: \"Search Results: {{Name}}\",\n                includeQuery: true,\n                includeResultSet: true,\n                includeHistogram: false,\n                includeCsvAttachment: false,\n            },\n            scheduleType: \"1Hour\",\n            muteErrorEmails: false,\n            parameters: [],\n        },\n        description: \"Runs every hour with timerange of 15m and sends email notifications\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\ntest = sumologic.Content(\"test\",\n    parent_id=personal_folder.id,\n    config=json.dumps({\n        \"type\": \"SavedSearchWithScheduleSyncDefinition\",\n        \"name\": \"test-333\",\n        \"search\": {\n            \"queryText\": \"\\\"warn\\\"\",\n            \"defaultTimeRange\": \"-15m\",\n            \"byReceiptTime\": False,\n            \"viewName\": \"\",\n            \"viewStartTime\": \"1970-01-01T00:00:00Z\",\n            \"queryParameters\": [],\n            \"parsingMode\": \"Manual\",\n        },\n        \"searchSchedule\": {\n            \"cronExpression\": \"0 0 * * * ? *\",\n            \"displayableTimeRange\": \"-10m\",\n            \"parseableTimeRange\": {\n                \"type\": \"BeginBoundedTimeRange\",\n                \"from\": {\n                    \"type\": \"RelativeTimeRangeBoundary\",\n                    \"relativeTime\": \"-50m\",\n                },\n                \"to\": None,\n            },\n            \"timeZone\": \"America/Los_Angeles\",\n            \"threshold\": None,\n            \"notification\": {\n                \"taskType\": \"EmailSearchNotificationSyncDefinition\",\n                \"toList\": [\"ops@acme.org\"],\n                \"subjectTemplate\": \"Search Results: {{Name}}\",\n                \"includeQuery\": True,\n                \"includeResultSet\": True,\n                \"includeHistogram\": False,\n                \"includeCsvAttachment\": False,\n            },\n            \"scheduleType\": \"1Hour\",\n            \"muteErrorEmails\": False,\n            \"parameters\": [],\n        },\n        \"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var personalFolder = Output.Create(SumoLogic.GetPersonalFolder.InvokeAsync());\n        var test = new SumoLogic.Content(\"test\", new SumoLogic.ContentArgs\n        {\n            ParentId = personalFolder.Apply(personalFolder =\u003e personalFolder.Id),\n            Config = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"type\", \"SavedSearchWithScheduleSyncDefinition\" },\n                { \"name\", \"test-333\" },\n                { \"search\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"queryText\", \"\\\"warn\\\"\" },\n                    { \"defaultTimeRange\", \"-15m\" },\n                    { \"byReceiptTime\", false },\n                    { \"viewName\", \"\" },\n                    { \"viewStartTime\", \"1970-01-01T00:00:00Z\" },\n                    { \"queryParameters\", new[]\n                        {\n                        }\n                     },\n                    { \"parsingMode\", \"Manual\" },\n                } },\n                { \"searchSchedule\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"cronExpression\", \"0 0 * * * ? *\" },\n                    { \"displayableTimeRange\", \"-10m\" },\n                    { \"parseableTimeRange\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"type\", \"BeginBoundedTimeRange\" },\n                        { \"from\", new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"type\", \"RelativeTimeRangeBoundary\" },\n                            { \"relativeTime\", \"-50m\" },\n                        } },\n                        { \"to\", null },\n                    } },\n                    { \"timeZone\", \"America/Los_Angeles\" },\n                    { \"threshold\", null },\n                    { \"notification\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"taskType\", \"EmailSearchNotificationSyncDefinition\" },\n                        { \"toList\", new[]\n                            {\n                                \"ops@acme.org\",\n                            }\n                         },\n                        { \"subjectTemplate\", \"Search Results: {{Name}}\" },\n                        { \"includeQuery\", true },\n                        { \"includeResultSet\", true },\n                        { \"includeHistogram\", false },\n                        { \"includeCsvAttachment\", false },\n                    } },\n                    { \"scheduleType\", \"1Hour\" },\n                    { \"muteErrorEmails\", false },\n                    { \"parameters\", new[]\n                        {\n                        }\n                     },\n                } },\n                { \"description\", \"Runs every hour with timerange of 15m and sends email notifications\" },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpersonalFolder, err := sumologic.GetPersonalFolder(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\": \"SavedSearchWithScheduleSyncDefinition\",\n\t\t\t\"name\": \"test-333\",\n\t\t\t\"search\": map[string]interface{}{\n\t\t\t\t\"queryText\":        \"\\\"warn\\\"\",\n\t\t\t\t\"defaultTimeRange\": \"-15m\",\n\t\t\t\t\"byReceiptTime\":    false,\n\t\t\t\t\"viewName\":         \"\",\n\t\t\t\t\"viewStartTime\":    \"1970-01-01T00:00:00Z\",\n\t\t\t\t\"queryParameters\":  []interface{}{},\n\t\t\t\t\"parsingMode\":      \"Manual\",\n\t\t\t},\n\t\t\t\"searchSchedule\": map[string]interface{}{\n\t\t\t\t\"cronExpression\":       \"0 0 * * * ? *\",\n\t\t\t\t\"displayableTimeRange\": \"-10m\",\n\t\t\t\t\"parseableTimeRange\": map[string]interface{}{\n\t\t\t\t\t\"type\": \"BeginBoundedTimeRange\",\n\t\t\t\t\t\"from\": map[string]interface{}{\n\t\t\t\t\t\t\"type\":         \"RelativeTimeRangeBoundary\",\n\t\t\t\t\t\t\"relativeTime\": \"-50m\",\n\t\t\t\t\t},\n\t\t\t\t\t\"to\": nil,\n\t\t\t\t},\n\t\t\t\t\"timeZone\":  \"America/Los_Angeles\",\n\t\t\t\t\"threshold\": nil,\n\t\t\t\t\"notification\": map[string]interface{}{\n\t\t\t\t\t\"taskType\": \"EmailSearchNotificationSyncDefinition\",\n\t\t\t\t\t\"toList\": []string{\n\t\t\t\t\t\t\"ops@acme.org\",\n\t\t\t\t\t},\n\t\t\t\t\t\"subjectTemplate\":      \"Search Results: {{Name}}\",\n\t\t\t\t\t\"includeQuery\":         true,\n\t\t\t\t\t\"includeResultSet\":     true,\n\t\t\t\t\t\"includeHistogram\":     false,\n\t\t\t\t\t\"includeCsvAttachment\": false,\n\t\t\t\t},\n\t\t\t\t\"scheduleType\":    \"1Hour\",\n\t\t\t\t\"muteErrorEmails\": false,\n\t\t\t\t\"parameters\":      []interface{}{},\n\t\t\t},\n\t\t\t\"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = sumologic.NewContent(ctx, \"test\", \u0026sumologic.ContentArgs{\n\t\t\tParentId: pulumi.String(personalFolder.Id),\n\t\t\tConfig:   pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `parent_id` - (Required) The identifier of the folder to import into. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this provider. The identifier needs to be in hexadecimal format.\n- `config` - (Required) JSON block for the content to import. NOTE: Updating the name will create a new object and leave a untracked content item (delete the existing content item and create a new content item if you want to update the name).\n\n### Timeouts\n\n`sumologic.Content` provides the following [Timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) configuration options:\n\n- `read` - (Default `1 minute`) Used for waiting for the import job to be successful\n- `create` - (Default `10 minutes`) Used for waiting for the import job to be successful\n- `update` - (Default `10 minutes`) Used for waiting for the import job to be successful\n- `delete` - (Default `1 minute`) Used for waiting for the deletion job to be successful\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the content item.\n\n[1]: https://help.sumologic.com/APIs/Content-Management-API\n",
            "properties": {
                "config": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                }
            },
            "required": [
                "config",
                "parentId"
            ],
            "inputProperties": {
                "config": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "config",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Content resources.\n",
                "properties": {
                    "config": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/dashboard:Dashboard": {
            "description": "Provides a [Sumologic Dashboard (New)][1].\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = sumologic.getPersonalFolder({});\nconst api_dashboard = new sumologic.Dashboard(\"api-dashboard\", {\n    title: \"Api Health Dashboard\",\n    description: \"Demo dashboard description\",\n    folderId: personalFolder.then(personalFolder =\u003e personalFolder.id),\n    refreshInterval: 60,\n    theme: \"Dark\",\n    timeRange: {\n        beginBoundedTimeRange: {\n            from: {\n                literalTimeRange: {\n                    rangeName: \"today\",\n                },\n            },\n        },\n    },\n    topologyLabelMap: {\n        datas: [\n            {\n                label: \"cluster\",\n                values: [\"api-prod\"],\n            },\n            {\n                label: \"namespace\",\n                values: [\"default\"],\n            },\n        ],\n    },\n    panels: [\n        {\n            textPanel: {\n                key: \"text-panel-01\",\n                title: \"Api Health\",\n                visualSettings: JSON.stringify({\n                    text: {\n                        verticalAlignment: \"top\",\n                        horizontalAlignment: \"left\",\n                        fontSize: 12,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                text: `## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n`,\n            },\n        },\n        {\n            sumoSearchPanel: {\n                key: \"search-panel-01\",\n                title: \"Api Errors by Host\",\n                description: \"Errors in api service since last 12 hours\",\n                visualSettings: JSON.stringify({\n                    general: {\n                        mode: \"timeSeries\",\n                        type: \"area\",\n                        displayType: \"stacked\",\n                        markerSize: 5,\n                        lineDashType: \"solid\",\n                        markerType: \"square\",\n                        lineThickness: 1,\n                    },\n                    title: {\n                        fontSize: 14,\n                    },\n                    legend: {\n                        enabled: true,\n                        verticalAlign: \"bottom\",\n                        fontSize: 12,\n                        maxHeight: 50,\n                        showAsTable: false,\n                        wrap: true,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                queries: [{\n                    queryString: \"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\",\n                    queryType: \"Logs\",\n                    queryKey: \"A\",\n                }],\n                timeRange: {\n                    beginBoundedTimeRange: {\n                        from: {\n                            relativeTimeRange: {\n                                relativeTime: \"-12h\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        {\n            sumoSearchPanel: {\n                key: \"metrics-panel-01\",\n                title: \"Api 5xx Response Count\",\n                description: \"Count of 5xx response from api service\",\n                visualSettings: JSON.stringify({\n                    general: {\n                        mode: \"distribution\",\n                        type: \"pie\",\n                        displayType: \"default\",\n                        fillOpacity: 1,\n                        startAngle: 270,\n                        innerRadius: `40%`,\n                        maxNumOfSlices: 10,\n                        aggregationType: \"sum\",\n                    },\n                    title: {\n                        fontSize: 14,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                queries: [{\n                    queryString: \"_sourceCategory=api metric=Api-5xx\",\n                    queryType: \"Metrics\",\n                    queryKey: \"A\",\n                    metricsQueryMode: \"Advanced\",\n                }],\n                timeRange: {\n                    beginBoundedTimeRange: {\n                        from: {\n                            literalTimeRange: {\n                                rangeName: \"today\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        {\n            sumoSearchPanel: {\n                key: \"metrics-panel-02\",\n                title: \"CPU Utilization\",\n                description: \"CPU utilization in api service\",\n                visualSettings: JSON.stringify({\n                    general: {\n                        mode: \"timeSeries\",\n                        type: \"line\",\n                        displayType: \"smooth\",\n                        markerSize: 5,\n                        lineDashType: \"dashDot\",\n                        markerType: \"none\",\n                        lineThickness: 1,\n                    },\n                    title: {\n                        fontSize: 14,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                queries: [\n                    {\n                        queryString: \"metric=Proc_CPU nite-api-1\",\n                        queryType: \"Metrics\",\n                        queryKey: \"A\",\n                        metricsQueryMode: \"Basic\",\n                        metricsQueryData: {\n                            metric: \"Proc_CPU\",\n                            filters: [{\n                                key: \"_sourcehost\",\n                                negation: false,\n                                value: \"nite-api-1\",\n                            }],\n                            aggregationType: \"None\",\n                        },\n                    },\n                    {\n                        queryString: \"metric=Proc_CPU nite-api-2\",\n                        queryType: \"Metrics\",\n                        queryKey: \"B\",\n                        metricsQueryMode: \"Basic\",\n                        metricsQueryData: {\n                            metric: \"Proc_CPU\",\n                            filters: [{\n                                key: \"_sourcehost\",\n                                negation: false,\n                                value: \"nite-api-2\",\n                            }],\n                            aggregationType: \"None\",\n                        },\n                    },\n                ],\n                timeRange: {\n                    beginBoundedTimeRange: {\n                        from: {\n                            relativeTimeRange: {\n                                relativeTime: \"-1h\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    ],\n    layout: {\n        grid: {\n            layoutStructures: [\n                {\n                    key: \"text-panel-01\",\n                    structure: \"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\",\n                },\n                {\n                    key: \"search-panel-01\",\n                    structure: \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\",\n                },\n                {\n                    key: \"metrics-panel-01\",\n                    structure: \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\",\n                },\n                {\n                    key: \"metrics-panel-02\",\n                    structure: \"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\",\n                },\n            ],\n        },\n    },\n    variables: [{\n        name: \"_sourceHost\",\n        displayName: \"Source Host\",\n        defaultValue: \"nite-api-1\",\n        sourceDefinition: {\n            csvVariableSourceDefinition: {\n                values: \"nite-api-1,nite-api-2\",\n            },\n        },\n        allowMultiSelect: true,\n        includeAllOption: true,\n        hideFromUi: false,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\napi_dashboard = sumologic.Dashboard(\"api-dashboard\",\n    title=\"Api Health Dashboard\",\n    description=\"Demo dashboard description\",\n    folder_id=personal_folder.id,\n    refresh_interval=60,\n    theme=\"Dark\",\n    time_range=sumologic.DashboardTimeRangeArgs(\n        begin_bounded_time_range=sumologic.DashboardTimeRangeBeginBoundedTimeRangeArgs(\n            from_=sumologic.DashboardTimeRangeBeginBoundedTimeRangeFromArgs(\n                literal_time_range=sumologic.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs(\n                    range_name=\"today\",\n                ),\n            ),\n        ),\n    ),\n    topology_label_map=sumologic.DashboardTopologyLabelMapArgs(\n        datas=[\n            sumologic.DashboardTopologyLabelMapDataArgs(\n                label=\"cluster\",\n                values=[\"api-prod\"],\n            ),\n            sumologic.DashboardTopologyLabelMapDataArgs(\n                label=\"namespace\",\n                values=[\"default\"],\n            ),\n        ],\n    ),\n    panels=[\n        sumologic.DashboardPanelArgs(\n            text_panel=sumologic.DashboardPanelTextPanelArgs(\n                key=\"text-panel-01\",\n                title=\"Api Health\",\n                visual_settings=json.dumps({\n                    \"text\": {\n                        \"verticalAlignment\": \"top\",\n                        \"horizontalAlignment\": \"left\",\n                        \"fontSize\": 12,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                text=\"\"\"## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n\"\"\",\n            ),\n        ),\n        sumologic.DashboardPanelArgs(\n            sumo_search_panel=sumologic.DashboardPanelSumoSearchPanelArgs(\n                key=\"search-panel-01\",\n                title=\"Api Errors by Host\",\n                description=\"Errors in api service since last 12 hours\",\n                visual_settings=json.dumps({\n                    \"general\": {\n                        \"mode\": \"timeSeries\",\n                        \"type\": \"area\",\n                        \"displayType\": \"stacked\",\n                        \"markerSize\": 5,\n                        \"lineDashType\": \"solid\",\n                        \"markerType\": \"square\",\n                        \"lineThickness\": 1,\n                    },\n                    \"title\": {\n                        \"fontSize\": 14,\n                    },\n                    \"legend\": {\n                        \"enabled\": True,\n                        \"verticalAlign\": \"bottom\",\n                        \"fontSize\": 12,\n                        \"maxHeight\": 50,\n                        \"showAsTable\": False,\n                        \"wrap\": True,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                queries=[sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                    query_string=\"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\",\n                    query_type=\"Logs\",\n                    query_key=\"A\",\n                )],\n                time_range={\n                    \"beginBoundedTimeRange\": {\n                        \"from\": {\n                            \"relativeTimeRange\": {\n                                \"relativeTime\": \"-12h\",\n                            },\n                        },\n                    },\n                },\n            ),\n        ),\n        sumologic.DashboardPanelArgs(\n            sumo_search_panel=sumologic.DashboardPanelSumoSearchPanelArgs(\n                key=\"metrics-panel-01\",\n                title=\"Api 5xx Response Count\",\n                description=\"Count of 5xx response from api service\",\n                visual_settings=json.dumps({\n                    \"general\": {\n                        \"mode\": \"distribution\",\n                        \"type\": \"pie\",\n                        \"displayType\": \"default\",\n                        \"fillOpacity\": 1,\n                        \"startAngle\": 270,\n                        \"innerRadius\": \"40%\",\n                        \"maxNumOfSlices\": 10,\n                        \"aggregationType\": \"sum\",\n                    },\n                    \"title\": {\n                        \"fontSize\": 14,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                queries=[sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                    query_string=\"_sourceCategory=api metric=Api-5xx\",\n                    query_type=\"Metrics\",\n                    query_key=\"A\",\n                    metrics_query_mode=\"Advanced\",\n                )],\n                time_range={\n                    \"beginBoundedTimeRange\": {\n                        \"from\": {\n                            \"literalTimeRange\": {\n                                \"rangeName\": \"today\",\n                            },\n                        },\n                    },\n                },\n            ),\n        ),\n        sumologic.DashboardPanelArgs(\n            sumo_search_panel=sumologic.DashboardPanelSumoSearchPanelArgs(\n                key=\"metrics-panel-02\",\n                title=\"CPU Utilization\",\n                description=\"CPU utilization in api service\",\n                visual_settings=json.dumps({\n                    \"general\": {\n                        \"mode\": \"timeSeries\",\n                        \"type\": \"line\",\n                        \"displayType\": \"smooth\",\n                        \"markerSize\": 5,\n                        \"lineDashType\": \"dashDot\",\n                        \"markerType\": \"none\",\n                        \"lineThickness\": 1,\n                    },\n                    \"title\": {\n                        \"fontSize\": 14,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                queries=[\n                    sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                        query_string=\"metric=Proc_CPU nite-api-1\",\n                        query_type=\"Metrics\",\n                        query_key=\"A\",\n                        metrics_query_mode=\"Basic\",\n                        metrics_query_data=sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs(\n                            metric=\"Proc_CPU\",\n                            filters=[sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs(\n                                key=\"_sourcehost\",\n                                negation=False,\n                                value=\"nite-api-1\",\n                            )],\n                            aggregation_type=\"None\",\n                        ),\n                    ),\n                    sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                        query_string=\"metric=Proc_CPU nite-api-2\",\n                        query_type=\"Metrics\",\n                        query_key=\"B\",\n                        metrics_query_mode=\"Basic\",\n                        metrics_query_data=sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs(\n                            metric=\"Proc_CPU\",\n                            filters=[sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs(\n                                key=\"_sourcehost\",\n                                negation=False,\n                                value=\"nite-api-2\",\n                            )],\n                            aggregation_type=\"None\",\n                        ),\n                    ),\n                ],\n                time_range={\n                    \"beginBoundedTimeRange\": {\n                        \"from\": {\n                            \"relativeTimeRange\": {\n                                \"relativeTime\": \"-1h\",\n                            },\n                        },\n                    },\n                },\n            ),\n        ),\n    ],\n    layout=sumologic.DashboardLayoutArgs(\n        grid=sumologic.DashboardLayoutGridArgs(\n            layout_structures=[\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"text-panel-01\",\n                    structure=\"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\",\n                ),\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"search-panel-01\",\n                    structure=\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\",\n                ),\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"metrics-panel-01\",\n                    structure=\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\",\n                ),\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"metrics-panel-02\",\n                    structure=\"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\",\n                ),\n            ],\n        ),\n    ),\n    variables=[sumologic.DashboardVariableArgs(\n        name=\"_sourceHost\",\n        display_name=\"Source Host\",\n        default_value=\"nite-api-1\",\n        source_definition=sumologic.DashboardVariableSourceDefinitionArgs(\n            csv_variable_source_definition=sumologic.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs(\n                values=\"nite-api-1,nite-api-2\",\n            ),\n        ),\n        allow_multi_select=True,\n        include_all_option=True,\n        hide_from_ui=False,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var personalFolder = Output.Create(SumoLogic.GetPersonalFolder.InvokeAsync());\n        var api_dashboard = new SumoLogic.Dashboard(\"api-dashboard\", new SumoLogic.DashboardArgs\n        {\n            Title = \"Api Health Dashboard\",\n            Description = \"Demo dashboard description\",\n            FolderId = personalFolder.Apply(personalFolder =\u003e personalFolder.Id),\n            RefreshInterval = 60,\n            Theme = \"Dark\",\n            TimeRange = new SumoLogic.Inputs.DashboardTimeRangeArgs\n            {\n                BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeArgs\n                {\n                    From = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeFromArgs\n                    {\n                        LiteralTimeRange = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs\n                        {\n                            RangeName = \"today\",\n                        },\n                    },\n                },\n            },\n            TopologyLabelMap = new SumoLogic.Inputs.DashboardTopologyLabelMapArgs\n            {\n                Datas = \n                {\n                    new SumoLogic.Inputs.DashboardTopologyLabelMapDataArgs\n                    {\n                        Label = \"cluster\",\n                        Values = \n                        {\n                            \"api-prod\",\n                        },\n                    },\n                    new SumoLogic.Inputs.DashboardTopologyLabelMapDataArgs\n                    {\n                        Label = \"namespace\",\n                        Values = \n                        {\n                            \"default\",\n                        },\n                    },\n                },\n            },\n            Panels = \n            {\n                new SumoLogic.Inputs.DashboardPanelArgs\n                {\n                    TextPanel = new SumoLogic.Inputs.DashboardPanelTextPanelArgs\n                    {\n                        Key = \"text-panel-01\",\n                        Title = \"Api Health\",\n                        VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"text\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"verticalAlignment\", \"top\" },\n                                { \"horizontalAlignment\", \"left\" },\n                                { \"fontSize\", 12 },\n                            } },\n                        }),\n                        KeepVisualSettingsConsistentWithParent = true,\n                        Text = @\"## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n\",\n                    },\n                },\n                new SumoLogic.Inputs.DashboardPanelArgs\n                {\n                    SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs\n                    {\n                        Key = \"search-panel-01\",\n                        Title = \"Api Errors by Host\",\n                        Description = \"Errors in api service since last 12 hours\",\n                        VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"general\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"mode\", \"timeSeries\" },\n                                { \"type\", \"area\" },\n                                { \"displayType\", \"stacked\" },\n                                { \"markerSize\", 5 },\n                                { \"lineDashType\", \"solid\" },\n                                { \"markerType\", \"square\" },\n                                { \"lineThickness\", 1 },\n                            } },\n                            { \"title\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"fontSize\", 14 },\n                            } },\n                            { \"legend\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"enabled\", true },\n                                { \"verticalAlign\", \"bottom\" },\n                                { \"fontSize\", 12 },\n                                { \"maxHeight\", 50 },\n                                { \"showAsTable\", false },\n                                { \"wrap\", true },\n                            } },\n                        }),\n                        KeepVisualSettingsConsistentWithParent = true,\n                        Queries = \n                        {\n                            new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                            {\n                                QueryString = \"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\",\n                                QueryType = \"Logs\",\n                                QueryKey = \"A\",\n                            },\n                        },\n                        TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs\n                        {\n                            BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs\n                            {\n                                From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs\n                                {\n                                    RelativeTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs\n                                    {\n                                        RelativeTime = \"-12h\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n                new SumoLogic.Inputs.DashboardPanelArgs\n                {\n                    SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs\n                    {\n                        Key = \"metrics-panel-01\",\n                        Title = \"Api 5xx Response Count\",\n                        Description = \"Count of 5xx response from api service\",\n                        VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"general\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"mode\", \"distribution\" },\n                                { \"type\", \"pie\" },\n                                { \"displayType\", \"default\" },\n                                { \"fillOpacity\", 1 },\n                                { \"startAngle\", 270 },\n                                { \"innerRadius\", \"40%\" },\n                                { \"maxNumOfSlices\", 10 },\n                                { \"aggregationType\", \"sum\" },\n                            } },\n                            { \"title\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"fontSize\", 14 },\n                            } },\n                        }),\n                        KeepVisualSettingsConsistentWithParent = true,\n                        Queries = \n                        {\n                            new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                            {\n                                QueryString = \"_sourceCategory=api metric=Api-5xx\",\n                                QueryType = \"Metrics\",\n                                QueryKey = \"A\",\n                                MetricsQueryMode = \"Advanced\",\n                            },\n                        },\n                        TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs\n                        {\n                            BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs\n                            {\n                                From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs\n                                {\n                                    LiteralTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs\n                                    {\n                                        RangeName = \"today\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n                new SumoLogic.Inputs.DashboardPanelArgs\n                {\n                    SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs\n                    {\n                        Key = \"metrics-panel-02\",\n                        Title = \"CPU Utilization\",\n                        Description = \"CPU utilization in api service\",\n                        VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"general\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"mode\", \"timeSeries\" },\n                                { \"type\", \"line\" },\n                                { \"displayType\", \"smooth\" },\n                                { \"markerSize\", 5 },\n                                { \"lineDashType\", \"dashDot\" },\n                                { \"markerType\", \"none\" },\n                                { \"lineThickness\", 1 },\n                            } },\n                            { \"title\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"fontSize\", 14 },\n                            } },\n                        }),\n                        KeepVisualSettingsConsistentWithParent = true,\n                        Queries = \n                        {\n                            new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                            {\n                                QueryString = \"metric=Proc_CPU nite-api-1\",\n                                QueryType = \"Metrics\",\n                                QueryKey = \"A\",\n                                MetricsQueryMode = \"Basic\",\n                                MetricsQueryData = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs\n                                {\n                                    Metric = \"Proc_CPU\",\n                                    Filters = \n                                    {\n                                        new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs\n                                        {\n                                            Key = \"_sourcehost\",\n                                            Negation = false,\n                                            Value = \"nite-api-1\",\n                                        },\n                                    },\n                                    AggregationType = \"None\",\n                                },\n                            },\n                            new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                            {\n                                QueryString = \"metric=Proc_CPU nite-api-2\",\n                                QueryType = \"Metrics\",\n                                QueryKey = \"B\",\n                                MetricsQueryMode = \"Basic\",\n                                MetricsQueryData = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs\n                                {\n                                    Metric = \"Proc_CPU\",\n                                    Filters = \n                                    {\n                                        new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs\n                                        {\n                                            Key = \"_sourcehost\",\n                                            Negation = false,\n                                            Value = \"nite-api-2\",\n                                        },\n                                    },\n                                    AggregationType = \"None\",\n                                },\n                            },\n                        },\n                        TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs\n                        {\n                            BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs\n                            {\n                                From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs\n                                {\n                                    RelativeTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs\n                                    {\n                                        RelativeTime = \"-1h\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Layout = new SumoLogic.Inputs.DashboardLayoutArgs\n            {\n                Grid = new SumoLogic.Inputs.DashboardLayoutGridArgs\n                {\n                    LayoutStructures = \n                    {\n                        new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                        {\n                            Key = \"text-panel-01\",\n                            Structure = \"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\",\n                        },\n                        new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                        {\n                            Key = \"search-panel-01\",\n                            Structure = \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\",\n                        },\n                        new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                        {\n                            Key = \"metrics-panel-01\",\n                            Structure = \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\",\n                        },\n                        new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                        {\n                            Key = \"metrics-panel-02\",\n                            Structure = \"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\",\n                        },\n                    },\n                },\n            },\n            Variables = \n            {\n                new SumoLogic.Inputs.DashboardVariableArgs\n                {\n                    Name = \"_sourceHost\",\n                    DisplayName = \"Source Host\",\n                    DefaultValue = \"nite-api-1\",\n                    SourceDefinition = new SumoLogic.Inputs.DashboardVariableSourceDefinitionArgs\n                    {\n                        CsvVariableSourceDefinition = new SumoLogic.Inputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs\n                        {\n                            Values = \"nite-api-1,nite-api-2\",\n                        },\n                    },\n                    AllowMultiSelect = true,\n                    IncludeAllOption = true,\n                    HideFromUi = false,\n                },\n            },\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `title` - (Required) Title of the dashboard.\n- `description` - (Optional) Description of the dashboard.\n- `folder_id` - (Optional) The identifier of the folder to save the dashboard in. By default it is saved in your\npersonal folder.\n- `refresh_interval` - (Optional) Interval of time (in seconds) to automatically refresh the dashboard.\n- `theme` - (Optional) Theme of the dashboard.\n- `topology_label_map` - (Block List, Max: 1, Optional) Topology labels for the dashboard. See\ntopology label map schema\nfor details.\n- `time_range` - (Block List, Max: 1, Required) Time range of the dashboard. See time range schema\nfor details.\n- `panel` - (Block List, Optional) A list of panels in the dashboard. See panel schema for details.\n- `layout` - (Block List, Max: 1, Optional) Layout of the dashboard. See layout schema for details.\n- `variable` - (Block List, Optional) A list of variables for the dashboard. See variable schema\nfor details.\n\n## Attributes reference\n\nIn addition to all arguments above, the following attributes are exported:\n\n- `id` - The ID of the dashboard.\n\n### Schema for `topology_label_map`\n- `data` - (Block List, Required) A list of blocks containing label and it's values.\n\t- `label` - (Required) The name of the topology label.\n\t- `values` - (Required) The values for the topology label.\n\n\n### Schema for `time_range`\n- `complete_literal_time_range` - (Block List, Max: 1, Optional) Literal time range. See\ncomplete_literal_time_range schema for details.\n- `begin_bounded_time_range` - (Block List, Max: 1, Optional) Bounded time range. See\nbegin_bounded_time_range schema schema for details.\nschema for details.\n\n### Schema for `complete_literal_time_range`\n- `range_name` - (Required) Name of complete literal time range. One of `today`, `yesterday`, `previous_week`, `previous_month`.\n\n### Schema for `begin_bounded_time_range`\n- `from` - (Block List, Max: 1, Required) Start boundary of bounded time range. See\ntime_range_boundary schema for details.\n- `to` - (Block List, Max: 1, Optional) End boundary of bounded time range. See\ntime_range_boundary schema for details.\n\n### Schema for `time_range_boundary`\n- `epoch_time_range` - (Block List, Optional) Time since the epoch.\n    - `epoch_millis` - (Required) Time as a number of milliseconds since the epoch.\n\n- `iso8601_time_range` - (Block List, Optional) Time in ISO 8601 format.\n    - `iso8601_time` - (Required) Time as a string in ISO 8601 format.\n\n- `relative_time_range` - (Block List, Optional) Time in relative format.\n    - `relative_time` - (Required) Relative time as a string consisting of following elements:\n      1. `-` (optional): minus sign indicates time in the past,\n      2. `\u003cnumber\u003e`: number of time units,\n      3. `\u003ctime_unit\u003e`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).\n\n      Multiple pairs of `\u003cnumber\u003e\u003ctime_unit\u003e` may be provided, and they may be in any order. For example,\n      `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.\n\n- `literal_time_range` - (Block List, Optional) Time in literal format.\n    - `range_name` - (Required) One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.\n\n### Schema for `panel`\n- `text_panel` - (Block List, Max: 1, Optional) A text panel. See text_panel schema for details.\n- `sumo_search_panel` - (Block List, Max: 1, Optional) A search panel. See sumo_search_panel schema\nfor details.\n\n### Schema for `text_panel`\n- `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout\nof the panel in the dashboard.\n- `title` - (Optional) Title of the panel.\n- `visual_settings` - (Optional) Visual settings of the panel.\n- `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent\nwith the settings of the parent panel.\n- `text` - (Required) Text to display in the panel.\n\n### Schema for `sumo_search_panel`\n- `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout\nof the panel in the dashboard.\n- `title` - (Optional) Title of the panel.\n- `visual_settings` - (Optional) Visual settings of the panel.\n- `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent\nwith the settings of the parent panel.\n- `query` - (Block List, Required) A list of queries for the panel. Can be log or metric query. See\nquery schema for details.\n- `description` - (Optional) Description of the panel.\n- `time_range` - (Block List, Max: 1, Optional) Time range of the panel. See time_range schema\nfor details.\n- `coloring_rule` - (Block List, Optional) Coloring rules for the panel. See coloring_rule schema\nfor details.\n- `linked_dashboard` - (Block List, Optional) A list of linked dashboards. See\nlinked_dashboard schema for details.\n\n### Schema for `query`\n- `query_string` - (Required) The metrics or logs query.\n- `query_type` - (Required) The type of the query. One of `Metrics` or `Logs`.\n- `query_key` - (Required) The key for metric or log query. Used as an identifier for queries.\n- `metric_query_mode` - (Optional) _Should only be specified for metric query_. The mode of the metric query.\nOne of `Basic` or `Advanced`.\n- `metric_query_data` - (Optional) _Should only be specified for metric query_. Data format for the metric query. See\nmetric_query_data schema for details.\n\n### Schema for `metric_query_data`\n- `metric` - (Required) The metric of the query.\n- `aggregation_type` - (Optional) The type of aggregation. One of `Count`, `Minimum`, `Maximum`, `Sum`, `Average`, `None`.\n- `group_by` - The field to group the results by.\n- `filter` - (Block List, Required) A list of filters for the metrics query.\n    - `key` - (Required) The key of the metrics filter.\n    - `value` - (Required) The value of the metrics filter.\n    - `negation` - (Optional) Whether or not the metrics filter is negated.\n- `operator` - (Block List, Optional) A list of operator data for the metrics query.\n\n### Schema for `operator`\n- `operator_name` - (Required) The name of the metrics operator.\n- `parameter` - (Block List, Required) A list of operator parameters for the operator data.\n    - `key` - (Required) The key of the operator parameter.\n    - `value` - (Required) The value of the operator parameter.\n\n### Schema for `coloring_rule`\n- `scope` - (Required) Regex string to match queries to apply coloring to.\n- `single_series_aggregate_function` - (Required) Function to aggregate one series into one single value.\n- `multiple_series_aggregate_function` - (Required) Function to aggregate the aggregate values of multiple time series\ninto one single value.\n- `color_threshold` - (Block List, Optional) A list of color threshold object.\n    - `color` - (Required) Color for the threshold.\n    - `min` - (Optional) Absolute inclusive threshold to color by.\n    - `max` - (Optional) Absolute exclusive threshold to color by.\n\n### Schema for `linked_dashboard`\n- `id` - (Required) Identifier of the linked dashboard.\n- `relative_path` - (Optional) Relative path of the linked dashboard to the dashboard of the linking panel.\n- `include_time_range` - (Optional) Include time range from the current dashboard to the linked dashboard. _Defaults to true_.\n- `include_variables` - (Optional) Include variables from the current dashboard to the linked dashboard. _Defaults to true_.\n\n### Schema for `layout`\n- `grid` - (Block List, Max: 1, Optional) Panel layout for the dashboard.\n\n### Schema for `grid`\n- `layout_structure` - (Block List, Required) Layout structure for the panels in the dashboard.\n    - `key` - (Required) The identifier of the panel that this structure applies to. It's same as `panel.key`.\n    - `structure` - (Required) The structure of the panel.\n\n### Schema for `variable`\n- `name` - (Required) Name of the variable. The variable name is case-insensitive.\n- `display_name` - (Optional) Display name of the variable shown in the UI. If this field is empty, the name field will be used.\n- `default_value` - (Optional) Default value of the variable.\n- `source_definition` - (Required) Source definition for variable values. See\nsource_definition schema for details.\n- `allow_multi_select` - (Optional) Allow multiple selections in the values dropdown.\n- `include_all_option` - (Optional) Include an \"All\" option at the top of the variable's values dropdown. _Defaults to true._\n- `hide_from_ui` - (Optional) Hide the variable in the dashboard UI.\n\n### Schema for `source_definition`\n- `log_query_variable_source_definition` - (Optional) Variable values from a log query.\n    - `query` - (Required) A log query.\n    - `field` - (Required) A field in log query to populate the variable values\n- `metadata_variable_source_definition` - (Optional) Variable values from a metric query.\n    - `filter` - (Required) Filter to search the catalog.\n    - `key` - (Required) Return the values for this given key.\n- `csv_variable_source_definition` - (Optional) Variable values in csv format.\n    - `values` - (Required) A comma separated values for the variable.\n\n\n## Import\n\nDashboard can be imported using the dashboard id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/dashboard:Dashboard example-dashboard q0IKwAK5t2qRI4sgiANwnS87k5S4twN2sCpTuZFSsz6ZmbENPsG7PnpqZygc\n```\n\n [1]https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New) ",
            "properties": {
                "coloringRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardColoringRule:DashboardColoringRule"
                    }
                },
                "description": {
                    "type": "string"
                },
                "folderId": {
                    "type": "string"
                },
                "layout": {
                    "$ref": "#/types/sumologic:index/DashboardLayout:DashboardLayout"
                },
                "panels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanel:DashboardPanel"
                    }
                },
                "refreshInterval": {
                    "type": "integer"
                },
                "theme": {
                    "type": "string"
                },
                "timeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRange:DashboardTimeRange"
                },
                "title": {
                    "type": "string"
                },
                "topologyLabelMap": {
                    "$ref": "#/types/sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardVariable:DashboardVariable"
                    }
                }
            },
            "required": [
                "timeRange",
                "title"
            ],
            "inputProperties": {
                "coloringRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardColoringRule:DashboardColoringRule"
                    }
                },
                "description": {
                    "type": "string"
                },
                "folderId": {
                    "type": "string"
                },
                "layout": {
                    "$ref": "#/types/sumologic:index/DashboardLayout:DashboardLayout"
                },
                "panels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanel:DashboardPanel"
                    }
                },
                "refreshInterval": {
                    "type": "integer"
                },
                "theme": {
                    "type": "string"
                },
                "timeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRange:DashboardTimeRange"
                },
                "title": {
                    "type": "string"
                },
                "topologyLabelMap": {
                    "$ref": "#/types/sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardVariable:DashboardVariable"
                    }
                }
            },
            "requiredInputs": [
                "timeRange",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "coloringRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/DashboardColoringRule:DashboardColoringRule"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "layout": {
                        "$ref": "#/types/sumologic:index/DashboardLayout:DashboardLayout"
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/DashboardPanel:DashboardPanel"
                        }
                    },
                    "refreshInterval": {
                        "type": "integer"
                    },
                    "theme": {
                        "type": "string"
                    },
                    "timeRange": {
                        "$ref": "#/types/sumologic:index/DashboardTimeRange:DashboardTimeRange"
                    },
                    "title": {
                        "type": "string"
                    },
                    "topologyLabelMap": {
                        "$ref": "#/types/sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/DashboardVariable:DashboardVariable"
                        }
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/elbSource:ElbSource": {
            "description": "Provides a [Sumologic ELB source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Elastic-Load-Balancing-Source).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst elbSource = new sumologic.ElbSource(\"elb_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/elb\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsElbBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nelb_source = sumologic.ElbSource(\"elbSource\",\n    authentication=sumologic.ElbSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/elb\",\n    collector_id=collector.id,\n    content_type=\"AwsElbBucket\",\n    description=\"My description\",\n    path=sumologic.ElbSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var elbSource = new SumoLogic.ElbSource(\"elbSource\", new SumoLogic.ElbSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.ElbSourceAuthenticationArgs\n            {\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n                Type = \"S3BucketAuthentication\",\n            },\n            Category = \"aws/elb\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsElbBucket\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.ElbSourcePathArgs\n            {\n                BucketName = \"Bucket1\",\n                PathExpression = \"*\",\n                Type = \"S3BucketPathExpression\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewElbSource(ctx, \"elbSource\", \u0026sumologic.ElbSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.ElbSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/elb\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsElbBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.ElbSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`.\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`.\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`.\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`.\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.\n     + `bucket_name` - (Required) The name of the bucket.\n     + `path_expression` - (Required) The path to the data.\n\n\n## Import\n\nELB sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/elbSource:ElbSource test 123/456\n```\n\n ELB sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/elbSource:ElbSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Elastic-Load-Balancing-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceFilter:ElbSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/ElbSourcePath:ElbSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceFilter:ElbSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/ElbSourcePath:ElbSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElbSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/ElbSourceFilter:ElbSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/ElbSourcePath:ElbSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/field:Field": {
            "description": "Provides a [Sumologic Field](https://help.sumologic.com/Manage/Fields).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst field = new sumologic.Field(\"field\", {\n    dataType: \"Int\",\n    fieldName: \"int_field_1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfield = sumologic.Field(\"field\",\n    data_type=\"Int\",\n    field_name=\"int_field_1\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var field = new SumoLogic.Field(\"field\", new SumoLogic.FieldArgs\n        {\n            DataType = \"Int\",\n            FieldName = \"int_field_1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewField(ctx, \"field\", \u0026sumologic.FieldArgs{\n\t\t\tDataType:  pulumi.String(\"Int\"),\n\t\t\tFieldName: pulumi.String(\"int_field_1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `field_name` - (Required)  Name of the field.\n- `field_id` - (Required) Field identifier.\n- `data_type` - (Optional) Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.\n- `state` - (Optional) State of the field (either `Enabled` or `Disabled`).\n\n\n## Import\n\nFields can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/field:Field field 000000000ABC1234\n```\n\n [1]https://help.sumologic.com/Manage/Fields ",
            "properties": {
                "dataType": {
                    "type": "string"
                },
                "fieldId": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "fieldId",
                "fieldName"
            ],
            "inputProperties": {
                "dataType": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "fieldName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Field resources.\n",
                "properties": {
                    "dataType": {
                        "type": "string"
                    },
                    "fieldId": {
                        "type": "string"
                    },
                    "fieldName": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/fieldExtractionRule:FieldExtractionRule": {
            "description": "Provides a [Sumologic Field Extraction Rule](https://help.sumologic.com/Manage/Field-Extractions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst fieldExtractionRule = new sumologic.FieldExtractionRule(\"fieldExtractionRule\", {\n    enabled: true,\n    parseExpression: \"csv _raw extract 1 as f1\",\n    scope: \"_sourceHost=127.0.0.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfield_extraction_rule = sumologic.FieldExtractionRule(\"fieldExtractionRule\",\n    enabled=True,\n    parse_expression=\"csv _raw extract 1 as f1\",\n    scope=\"_sourceHost=127.0.0.1\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fieldExtractionRule = new SumoLogic.FieldExtractionRule(\"fieldExtractionRule\", new SumoLogic.FieldExtractionRuleArgs\n        {\n            Enabled = true,\n            ParseExpression = \"csv _raw extract 1 as f1\",\n            Scope = \"_sourceHost=127.0.0.1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewFieldExtractionRule(ctx, \"fieldExtractionRule\", \u0026sumologic.FieldExtractionRuleArgs{\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tParseExpression: pulumi.String(\"csv _raw extract 1 as f1\"),\n\t\t\tScope:           pulumi.String(\"_sourceHost=127.0.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `name` - (Required) Name of the field extraction rule. Use a name that makes it easy to identify the rule.\n- `scope` - (Required) Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.\n- `parse_expression` - (Required) Describes the fields to be parsed.\n- `enabled` - (Required) Is the field extraction rule enabled.\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the field extraction rule.\n\n\n## Import\n\nExtraction Rules can be imported using the extraction rule id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/fieldExtractionRule:FieldExtractionRule fieldExtractionRule id\n```\n\n [1]https://help.sumologic.com/Manage/Field-Extractions ",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "parseExpression": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                }
            },
            "required": [
                "enabled",
                "name",
                "parseExpression",
                "scope"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "parseExpression": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "enabled",
                "parseExpression",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FieldExtractionRule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parseExpression": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/folder:Folder": {
            "description": "Provides the ability to create, read, delete, update, and manage of folders.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst folder = new sumologic.Folder(\"folder\", {\n    description: \"A test folder\",\n    parentId: \"\u003cpersonal folder id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfolder = sumologic.Folder(\"folder\",\n    description=\"A test folder\",\n    parent_id=\"\u003cpersonal folder id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var folder = new SumoLogic.Folder(\"folder\", new SumoLogic.FolderArgs\n        {\n            Description = \"A test folder\",\n            ParentId = \"\u003cpersonal folder id\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewFolder(ctx, \"folder\", \u0026sumologic.FolderArgs{\n\t\t\tDescription: pulumi.String(\"A test folder\"),\n\t\t\tParentId:    pulumi.String(\"\u003cpersonal folder id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `name` - (Required) The name of the folder. This is required, and has to be unique.\n- `parent_id` - (Required) The ID of the folder in which you want to create the new folder.\n- `description` - (Optional) The description of the folder.\n\n### Timeouts\n\n`sumologic.Folder` provides the following [Timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) configuration options:\n\n- `delete` - (Default `1 minute`) Used for waiting for the deletion job to be successful\n\nAdditional data provided in state\n\n- `created_at` - (Computed) When the folder was created.\n- `created_by` - (Computed) Who created the folder.\n- `modified_at` - (Computed) When was the folder last modified.\n- `modified_by` - (Computed) The ID of the user who modified the folder last.\n- `item_type` - (Computed) What the type of the content item is (will obviously be \"Folder\").\n- `permissions` - (Computed) List of permissions the user has on the content item.\n- `children` - (Computed) A list of all the content items in the created folder (can be folders or other content items).\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                }
            },
            "required": [
                "description",
                "name",
                "parentId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "description",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Folder resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/gcpSource:GcpSource": {
            "description": "Provides a [Sumo Logic Google Cloud Platform Source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Google-Cloud-Platform-Source).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst gcpSource = new sumologic.GcpSource(\"gcp_source\", {\n    authentication: {\n        type: \"NoAuthentication\",\n    },\n    category: \"gcp\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    description: \"My description\",\n    path: {\n        type: \"NoPathExpression\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ngcp_source = sumologic.GcpSource(\"gcpSource\",\n    authentication=sumologic.GcpSourceAuthenticationArgs(\n        type=\"NoAuthentication\",\n    ),\n    category=\"gcp\",\n    collector_id=collector.id,\n    description=\"My description\",\n    path=sumologic.GcpSourcePathArgs(\n        type=\"NoPathExpression\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var gcpSource = new SumoLogic.GcpSource(\"gcpSource\", new SumoLogic.GcpSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.GcpSourceAuthenticationArgs\n            {\n                Type = \"NoAuthentication\",\n            },\n            Category = \"gcp\",\n            CollectorId = collector.Id,\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.GcpSourcePathArgs\n            {\n                Type = \"NoPathExpression\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewGcpSource(ctx, \"gcpSource\", \u0026sumologic.GcpSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.GcpSourceAuthenticationArgs{\n\t\t\t\tType: pulumi.String(\"NoAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"gcp\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.GcpSourcePathArgs{\n\t\t\t\tType: pulumi.String(\"NoPathExpression\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSumo Logic Google Cloud Platform sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/gcpSource:GcpSource test 100000001/100000001\n```\n\n Sumo Logic Google Cloud Platform sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/gcpSource:GcpSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Google-Cloud-Platform-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceFilter:GcpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/GcpSourcePath:GcpSourcePath"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use for sending data to this source.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "name",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceFilter:GcpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/GcpSourcePath:GcpSourcePath"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/GcpSourceFilter:GcpSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/GcpSourcePath:GcpSourcePath"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use for sending data to this source.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/httpSource:HttpSource": {
            "description": "Provides a [Sumologic HTTP source](https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/HTTP_Source) or [Sumologic HTTP Traces source](https://help.sumologic.com/Traces/HTTP_Traces_Source). To start using Traces contact your Sumo account representative to activate.\n\n__IMPORTANT:__ The endpoint is stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst httpSource = new sumologic.HttpSource(\"http_source\", {\n    category: \"my/source/category\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    description: \"My description\",\n    filters: [{\n        filterType: \"Exclude\",\n        name: \"Test Exclude Debug\",\n        regexp: \".*DEBUG.*\",\n    }],\n});\nconst httpTracesSource = new sumologic.HttpSource(\"http_traces_source\", {\n    category: \"my/source/category\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"Zipkin\",\n    description: \"My description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nhttp_source = sumologic.HttpSource(\"httpSource\",\n    category=\"my/source/category\",\n    collector_id=collector.id,\n    description=\"My description\",\n    filters=[sumologic.HttpSourceFilterArgs(\n        filter_type=\"Exclude\",\n        name=\"Test Exclude Debug\",\n        regexp=\".*DEBUG.*\",\n    )])\nhttp_traces_source = sumologic.HttpSource(\"httpTracesSource\",\n    category=\"my/source/category\",\n    collector_id=collector.id,\n    content_type=\"Zipkin\",\n    description=\"My description\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var httpSource = new SumoLogic.HttpSource(\"httpSource\", new SumoLogic.HttpSourceArgs\n        {\n            Category = \"my/source/category\",\n            CollectorId = collector.Id,\n            Description = \"My description\",\n            Filters = \n            {\n                new SumoLogic.Inputs.HttpSourceFilterArgs\n                {\n                    FilterType = \"Exclude\",\n                    Name = \"Test Exclude Debug\",\n                    Regexp = \".*DEBUG.*\",\n                },\n            },\n        });\n        var httpTracesSource = new SumoLogic.HttpSource(\"httpTracesSource\", new SumoLogic.HttpSourceArgs\n        {\n            Category = \"my/source/category\",\n            CollectorId = collector.Id,\n            ContentType = \"Zipkin\",\n            Description = \"My description\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewHttpSource(ctx, \"httpSource\", \u0026sumologic.HttpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tFilters: sumologic.HttpSourceFilterArray{\n\t\t\t\t\u0026sumologic.HttpSourceFilterArgs{\n\t\t\t\t\tFilterType: pulumi.String(\"Exclude\"),\n\t\t\t\t\tName:       pulumi.String(\"Test Exclude Debug\"),\n\t\t\t\t\tRegexp:     pulumi.String(\".*DEBUG.*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewHttpSource(ctx, \"httpTracesSource\", \u0026sumologic.HttpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"Zipkin\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n- `message_per_request` - (Optional) When set to `true`, will create one log message per HTTP request.\n- `content_type`        - (Optional) When configuring a HTTP Traces Source, set this property to `Zipkin`. This should only be used when creating a Traces source.\n\n\n## Import\n\nHTTP sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/httpSource:HttpSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/httpSource:HttpSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/HTTP_Source [2]https://help.sumologic.com/Traces/HTTP_Traces_Source ",
            "properties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceFilter:HttpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use for sending data to this source.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "name",
                "url"
            ],
            "inputProperties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceFilter:HttpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpSource resources.\n",
                "properties": {
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/HttpSourceFilter:HttpSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use for sending data to this source.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/ingestBudget:IngestBudget": {
            "description": "Provides a [Sumologic Ingest Budget](https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets). To assign an Ingest Budget to the Collector use the field `_budget` with the Field Value of the Ingest Budget to assign.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst budget = new sumologic.IngestBudget(\"budget\", {\n    capacityBytes: 30000000000,\n    description: \"For testing purposes\",\n    fieldValue: \"test\",\n});\nconst collector = new sumologic.Collector(\"collector\", {\n    fields: {\n        _budget: budget.fieldValue,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nbudget = sumologic.IngestBudget(\"budget\",\n    capacity_bytes=30000000000,\n    description=\"For testing purposes\",\n    field_value=\"test\")\ncollector = sumologic.Collector(\"collector\", fields={\n    \"_budget\": budget.field_value,\n})\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var budget = new SumoLogic.IngestBudget(\"budget\", new SumoLogic.IngestBudgetArgs\n        {\n            CapacityBytes = 30000000000,\n            Description = \"For testing purposes\",\n            FieldValue = \"test\",\n        });\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Fields = \n            {\n                { \"_budget\", budget.FieldValue },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbudget, err := sumologic.NewIngestBudget(ctx, \"budget\", \u0026sumologic.IngestBudgetArgs{\n\t\t\tCapacityBytes: pulumi.Int(30000000000),\n\t\t\tDescription:   pulumi.String(\"For testing purposes\"),\n\t\t\tFieldValue:    pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tFields: pulumi.StringMap{\n\t\t\t\t\"_budget\": budget.FieldValue,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIngest budgets can be imported using the name, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/ingestBudget:IngestBudget budget budgetName\n```\n\n [1]https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets [2]https://en.wikipedia.org/wiki/Tz_database ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the ingest budget.\n"
                },
                "fieldValue": {
                    "type": "string",
                    "description": "Custom field value that is used to assign Collectors to the ingest budget.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "required": [
                "capacityBytes",
                "fieldValue",
                "name"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the ingest budget.\n"
                },
                "fieldValue": {
                    "type": "string",
                    "description": "Custom field value that is used to assign Collectors to the ingest budget.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "requiredInputs": [
                "capacityBytes",
                "fieldValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IngestBudget resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                    },
                    "capacityBytes": {
                        "type": "integer",
                        "description": "Capacity of the ingest budget, in bytes.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the ingest budget.\n"
                    },
                    "fieldValue": {
                        "type": "string",
                        "description": "Custom field value that is used to assign Collectors to the ingest budget.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                    },
                    "resetTime": {
                        "type": "string",
                        "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/ingestBudgetV2:IngestBudgetV2": {
            "description": "Provides a [Sumologic Ingest Budget v2][1].This API is in private beta and is not available until given access. To participate in the beta program contact your Sumo Logic account representative.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst budget = new sumologic.IngestBudgetV2(\"budget\", {\n    action: \"keepCollecting\",\n    auditThreshold: 85,\n    capacityBytes: 30000000000,\n    description: \"For testing purposes\",\n    resetTime: \"00:00\",\n    scope: \"_sourceCategory=*prod*nginx*\",\n    timezone: \"Etc/UTC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nbudget = sumologic.IngestBudgetV2(\"budget\",\n    action=\"keepCollecting\",\n    audit_threshold=85,\n    capacity_bytes=30000000000,\n    description=\"For testing purposes\",\n    reset_time=\"00:00\",\n    scope=\"_sourceCategory=*prod*nginx*\",\n    timezone=\"Etc/UTC\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var budget = new SumoLogic.IngestBudgetV2(\"budget\", new SumoLogic.IngestBudgetV2Args\n        {\n            Action = \"keepCollecting\",\n            AuditThreshold = 85,\n            CapacityBytes = 30000000000,\n            Description = \"For testing purposes\",\n            ResetTime = \"00:00\",\n            Scope = \"_sourceCategory=*prod*nginx*\",\n            Timezone = \"Etc/UTC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewIngestBudgetV2(ctx, \"budget\", \u0026sumologic.IngestBudgetV2Args{\n\t\t\tAction:         pulumi.String(\"keepCollecting\"),\n\t\t\tAuditThreshold: pulumi.Int(85),\n\t\t\tCapacityBytes:  pulumi.Int(30000000000),\n\t\t\tDescription:    pulumi.String(\"For testing purposes\"),\n\t\t\tResetTime:      pulumi.String(\"00:00\"),\n\t\t\tScope:          pulumi.String(\"_sourceCategory=*prod*nginx*\"),\n\t\t\tTimezone:       pulumi.String(\"Etc/UTC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIngest budgets can be imported using the name, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/ingestBudgetV2:IngestBudgetV2 budget budgetName\n```\n\n [1]https://help.sumologic.com/Beta/Metadata_Ingest_Budgets [2]https://en.wikipedia.org/wiki/Tz_database ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "auditThreshold": {
                    "type": "integer",
                    "description": "The threshold as a percentage of when an ingest budget's capacity usage is logged in the Audit Index.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "required": [
                "action",
                "capacityBytes",
                "name",
                "resetTime",
                "scope",
                "timezone"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "auditThreshold": {
                    "type": "integer",
                    "description": "The threshold as a percentage of when an ingest budget's capacity usage is logged in the Audit Index.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "requiredInputs": [
                "action",
                "capacityBytes",
                "resetTime",
                "scope",
                "timezone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IngestBudgetV2 resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                    },
                    "auditThreshold": {
                        "type": "integer",
                        "description": "The threshold as a percentage of when an ingest budget's capacity usage is logged in the Audit Index.\n"
                    },
                    "capacityBytes": {
                        "type": "integer",
                        "description": "Capacity of the ingest budget, in bytes.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the collector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                    },
                    "resetTime": {
                        "type": "string",
                        "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/kinesisMetricsSource:KinesisMetricsSource": {
            "description": "Provides a Sumologic Kinesis Metrics source. This source is used to ingest data from Cloudwatch Metrics Stream via Kinesis Firehose from AWS.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tagfilters = [\n    {\n        namespace: \"All\",\n        tags: [\"k3=v3\"],\n        type: \"TagFilters\",\n    },\n    {\n        namespace: \"AWS/Route53\",\n        tags: [\"k1=v1\"],\n        type: \"TagFilters\",\n    },\n    {\n        namespace: \"AWS/S3\",\n        tags: [\"k2=v2\"],\n        type: \"TagFilters\",\n    },\n];\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst kinesisMetricsAccessKey = new sumologic.KinesisMetricsSource(\"kinesis_metrics_access_key\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"prod/kinesis/metrics\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"KinesisMetric\",\n    description: \"Description for Kinesis Metrics Source\",\n    path: {\n        tagFilters: [\n            {\n                namespace: \"All\",\n                tags: [\"k3=v3\"],\n                type: \"TagFilters\",\n            },\n            {\n                namespace: \"AWS/Route53\",\n                tags: [\"k1=v1\"],\n                type: \"TagFilters\",\n            },\n        ],\n        type: \"KinesisMetricPath\",\n    },\n});\nconst kinesisMetricsRoleArn = new sumologic.KinesisMetricsSource(\"kinesis_metrics_role_arn\", {\n    authentication: {\n        roleArn: \"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n        type: \"AWSRoleBasedAuthentication\",\n    },\n    category: \"prod/kinesis/metrics\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"KinesisMetric\",\n    description: \"Description for Kinesis Metrics Source\",\n    path: {\n        tagFilters: [\n            {\n                namespace: \"All\",\n                tags: [\"k3=v3\"],\n                type: \"TagFilters\",\n            },\n            {\n                namespace: \"AWS/Route53\",\n                tags: [\"k1=v1\"],\n                type: \"TagFilters\",\n            },\n        ],\n        type: \"KinesisMetricPath\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntagfilters = [\n    {\n        \"namespace\": \"All\",\n        \"tags\": [\"k3=v3\"],\n        \"type\": \"TagFilters\",\n    },\n    {\n        \"namespace\": \"AWS/Route53\",\n        \"tags\": [\"k1=v1\"],\n        \"type\": \"TagFilters\",\n    },\n    {\n        \"namespace\": \"AWS/S3\",\n        \"tags\": [\"k2=v2\"],\n        \"type\": \"TagFilters\",\n    },\n]\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nkinesis_metrics_access_key = sumologic.KinesisMetricsSource(\"kinesisMetricsAccessKey\",\n    authentication=sumologic.KinesisMetricsSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"prod/kinesis/metrics\",\n    collector_id=collector.id,\n    content_type=\"KinesisMetric\",\n    description=\"Description for Kinesis Metrics Source\",\n    path=sumologic.KinesisMetricsSourcePathArgs(\n        tag_filters=[\n            sumologic.KinesisMetricsSourcePathTagFilterArgs(\n                namespace=\"All\",\n                tags=[\"k3=v3\"],\n                type=\"TagFilters\",\n            ),\n            sumologic.KinesisMetricsSourcePathTagFilterArgs(\n                namespace=\"AWS/Route53\",\n                tags=[\"k1=v1\"],\n                type=\"TagFilters\",\n            ),\n        ],\n        type=\"KinesisMetricPath\",\n    ))\nkinesis_metrics_role_arn = sumologic.KinesisMetricsSource(\"kinesisMetricsRoleArn\",\n    authentication=sumologic.KinesisMetricsSourceAuthenticationArgs(\n        role_arn=\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n        type=\"AWSRoleBasedAuthentication\",\n    ),\n    category=\"prod/kinesis/metrics\",\n    collector_id=collector.id,\n    content_type=\"KinesisMetric\",\n    description=\"Description for Kinesis Metrics Source\",\n    path=sumologic.KinesisMetricsSourcePathArgs(\n        tag_filters=[\n            sumologic.KinesisMetricsSourcePathTagFilterArgs(\n                namespace=\"All\",\n                tags=[\"k3=v3\"],\n                type=\"TagFilters\",\n            ),\n            sumologic.KinesisMetricsSourcePathTagFilterArgs(\n                namespace=\"AWS/Route53\",\n                tags=[\"k1=v1\"],\n                type=\"TagFilters\",\n            ),\n        ],\n        type=\"KinesisMetricPath\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tagfilters = \n        {\n            \n            {\n                { \"namespace\", \"All\" },\n                { \"tags\", \n                {\n                    \"k3=v3\",\n                } },\n                { \"type\", \"TagFilters\" },\n            },\n            \n            {\n                { \"namespace\", \"AWS/Route53\" },\n                { \"tags\", \n                {\n                    \"k1=v1\",\n                } },\n                { \"type\", \"TagFilters\" },\n            },\n            \n            {\n                { \"namespace\", \"AWS/S3\" },\n                { \"tags\", \n                {\n                    \"k2=v2\",\n                } },\n                { \"type\", \"TagFilters\" },\n            },\n        };\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var kinesisMetricsAccessKey = new SumoLogic.KinesisMetricsSource(\"kinesisMetricsAccessKey\", new SumoLogic.KinesisMetricsSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.KinesisMetricsSourceAuthenticationArgs\n            {\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n                Type = \"S3BucketAuthentication\",\n            },\n            Category = \"prod/kinesis/metrics\",\n            CollectorId = collector.Id,\n            ContentType = \"KinesisMetric\",\n            Description = \"Description for Kinesis Metrics Source\",\n            Path = new SumoLogic.Inputs.KinesisMetricsSourcePathArgs\n            {\n                TagFilters = \n                {\n                    new SumoLogic.Inputs.KinesisMetricsSourcePathTagFilterArgs\n                    {\n                        Namespace = \"All\",\n                        Tags = \n                        {\n                            \"k3=v3\",\n                        },\n                        Type = \"TagFilters\",\n                    },\n                    new SumoLogic.Inputs.KinesisMetricsSourcePathTagFilterArgs\n                    {\n                        Namespace = \"AWS/Route53\",\n                        Tags = \n                        {\n                            \"k1=v1\",\n                        },\n                        Type = \"TagFilters\",\n                    },\n                },\n                Type = \"KinesisMetricPath\",\n            },\n        });\n        var kinesisMetricsRoleArn = new SumoLogic.KinesisMetricsSource(\"kinesisMetricsRoleArn\", new SumoLogic.KinesisMetricsSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.KinesisMetricsSourceAuthenticationArgs\n            {\n                RoleArn = \"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n                Type = \"AWSRoleBasedAuthentication\",\n            },\n            Category = \"prod/kinesis/metrics\",\n            CollectorId = collector.Id,\n            ContentType = \"KinesisMetric\",\n            Description = \"Description for Kinesis Metrics Source\",\n            Path = new SumoLogic.Inputs.KinesisMetricsSourcePathArgs\n            {\n                TagFilters = \n                {\n                    new SumoLogic.Inputs.KinesisMetricsSourcePathTagFilterArgs\n                    {\n                        Namespace = \"All\",\n                        Tags = \n                        {\n                            \"k3=v3\",\n                        },\n                        Type = \"TagFilters\",\n                    },\n                    new SumoLogic.Inputs.KinesisMetricsSourcePathTagFilterArgs\n                    {\n                        Namespace = \"AWS/Route53\",\n                        Tags = \n                        {\n                            \"k1=v1\",\n                        },\n                        Type = \"TagFilters\",\n                    },\n                },\n                Type = \"KinesisMetricPath\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_ := []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"namespace\": \"All\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k3=v3\",\n\t\t\t\t},\n\t\t\t\t\"type\": \"TagFilters\",\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"namespace\": \"AWS/Route53\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k1=v1\",\n\t\t\t\t},\n\t\t\t\t\"type\": \"TagFilters\",\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"namespace\": \"AWS/S3\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k2=v2\",\n\t\t\t\t},\n\t\t\t\t\"type\": \"TagFilters\",\n\t\t\t},\n\t\t}\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewKinesisMetricsSource(ctx, \"kinesisMetricsAccessKey\", \u0026sumologic.KinesisMetricsSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.KinesisMetricsSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"prod/kinesis/metrics\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"KinesisMetric\"),\n\t\t\tDescription: pulumi.String(\"Description for Kinesis Metrics Source\"),\n\t\t\tPath: \u0026sumologic.KinesisMetricsSourcePathArgs{\n\t\t\t\tTagFilters: sumologic.KinesisMetricsSourcePathTagFilterArray{\n\t\t\t\t\t\u0026sumologic.KinesisMetricsSourcePathTagFilterArgs{\n\t\t\t\t\t\tNamespace: pulumi.String(\"All\"),\n\t\t\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"k3=v3\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"TagFilters\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026sumologic.KinesisMetricsSourcePathTagFilterArgs{\n\t\t\t\t\t\tNamespace: pulumi.String(\"AWS/Route53\"),\n\t\t\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"k1=v1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"TagFilters\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"KinesisMetricPath\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewKinesisMetricsSource(ctx, \"kinesisMetricsRoleArn\", \u0026sumologic.KinesisMetricsSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.KinesisMetricsSourceAuthenticationArgs{\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\"),\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"prod/kinesis/metrics\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"KinesisMetric\"),\n\t\t\tDescription: pulumi.String(\"Description for Kinesis Metrics Source\"),\n\t\t\tPath: \u0026sumologic.KinesisMetricsSourcePathArgs{\n\t\t\t\tTagFilters: sumologic.KinesisMetricsSourcePathTagFilterArray{\n\t\t\t\t\t\u0026sumologic.KinesisMetricsSourcePathTagFilterArgs{\n\t\t\t\t\t\tNamespace: pulumi.String(\"All\"),\n\t\t\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"k3=v3\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"TagFilters\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026sumologic.KinesisMetricsSourcePathTagFilterArgs{\n\t\t\t\t\t\tNamespace: pulumi.String(\"AWS/Route53\"),\n\t\t\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"k1=v1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"TagFilters\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"KinesisMetricPath\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) Must be `KinesisMetricPath`\n     + `tag_filters` - (Optional) Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)\n          + `type` - This value has to be set to `TagFilters`\n          + `namespace` - Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.\n          + `tags` - List of key-value pairs of tag filters. Eg: `[\"k3=v3\"]`\n\n\n## Import\n\nKinesis Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to used while creating Kinesis Firehose on AWS.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KinesisMetricsSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to used while creating Kinesis Firehose on AWS.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/lookupTable:LookupTable": {
            "description": "Provides a [Sumologic Lookup Table](https://help.sumologic.com/05Search/Lookup_Tables).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst lookupTable = new sumologic.LookupTable(\"lookupTable\", {\n    description: \"some description\",\n    fields: [{\n        fieldName: \"FieldName1\",\n        fieldType: \"boolean\",\n    }],\n    parentFolderId: \"\u003cpersonal folder id\u003e\",\n    primaryKeys: [\"FieldName1\"],\n    sizeLimitAction: \"DeleteOldData\",\n    ttl: 100,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nlookup_table = sumologic.LookupTable(\"lookupTable\",\n    description=\"some description\",\n    fields=[sumologic.LookupTableFieldArgs(\n        field_name=\"FieldName1\",\n        field_type=\"boolean\",\n    )],\n    parent_folder_id=\"\u003cpersonal folder id\u003e\",\n    primary_keys=[\"FieldName1\"],\n    size_limit_action=\"DeleteOldData\",\n    ttl=100)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var lookupTable = new SumoLogic.LookupTable(\"lookupTable\", new SumoLogic.LookupTableArgs\n        {\n            Description = \"some description\",\n            Fields = \n            {\n                new SumoLogic.Inputs.LookupTableFieldArgs\n                {\n                    FieldName = \"FieldName1\",\n                    FieldType = \"boolean\",\n                },\n            },\n            ParentFolderId = \"\u003cpersonal folder id\u003e\",\n            PrimaryKeys = \n            {\n                \"FieldName1\",\n            },\n            SizeLimitAction = \"DeleteOldData\",\n            Ttl = 100,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewLookupTable(ctx, \"lookupTable\", \u0026sumologic.LookupTableArgs{\n\t\t\tDescription: pulumi.String(\"some description\"),\n\t\t\tFields: sumologic.LookupTableFieldArray{\n\t\t\t\t\u0026sumologic.LookupTableFieldArgs{\n\t\t\t\t\tFieldName: \"FieldName1\",\n\t\t\t\t\tFieldType: \"boolean\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tParentFolderId: pulumi.String(\"\u003cpersonal folder id\u003e\"),\n\t\t\tPrimaryKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"FieldName1\"),\n\t\t\t},\n\t\t\tSizeLimitAction: pulumi.String(\"DeleteOldData\"),\n\t\t\tTtl:             pulumi.Int(100),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `name` - (Required) The name of the lookup table.\n- `parent_folder_id` - (Required) The parent-folder-path identifier of the lookup table in the Library.\n- `description` - (Required) The description of the lookup table.\n- `fields` - (Required) The list of fields in the lookup table.\n  - `fieldName` - (Required) The name of the field.\n  - `fieldType` - (Required) The data type of the field. Supported types: boolean, int, long, double, string\n- `primaryKeys` - (Required) The names of the fields that make up the primary key for the lookup table. These will be a subset of the fields that the table will contain.\n- `ttl` - (Optional) A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.\n- `sizeLimitAction` - (Optional) The action that needs to be taken when the size limit is reached for the table. The possible values can be StopIncomingMessages or DeleteOldData. DeleteOldData will start deleting old data once size limit is reached whereas StopIncomingMessages will discard all the updates made to the lookup table once size limit is reached.\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the partition.\n\n\n## Import\n\nLookup Tables can be imported using the id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/lookupTable:LookupTable test 1234567890\n```\n\n [1]https://help.sumologic.com/05Search/Lookup_Tables ",
            "properties": {
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/LookupTableField:LookupTableField"
                    },
                    "description": "The list of fields in the lookup table.\n"
                },
                "name": {
                    "type": "string"
                },
                "parentFolderId": {
                    "type": "string"
                },
                "primaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The primary key field names.\n"
                },
                "sizeLimitAction": {
                    "type": "string"
                },
                "ttl": {
                    "type": "integer"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/LookupTableField:LookupTableField"
                    },
                    "description": "The list of fields in the lookup table.\n"
                },
                "name": {
                    "type": "string"
                },
                "parentFolderId": {
                    "type": "string"
                },
                "primaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The primary key field names.\n"
                },
                "sizeLimitAction": {
                    "type": "string"
                },
                "ttl": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LookupTable resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/LookupTableField:LookupTableField"
                        },
                        "description": "The list of fields in the lookup table.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentFolderId": {
                        "type": "string"
                    },
                    "primaryKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The primary key field names.\n"
                    },
                    "sizeLimitAction": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/metadataSource:MetadataSource": {
            "description": "Provides a Sumologic Metadata (Tag) source. This source allows you to collect tags from EC2 instances running on AWS.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. For Metadata source this is `AwsMetadata`. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for AWS access.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. Only allowed value is `AwsMetadataPath`.\n     + `limit_to_regions` - (Optional) List of Amazon regions.\n     + `limit_to_namespaces` - List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`. \n     + `tag_filters` - (Optional) Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]\n\n### See also\n  * [Sumologic \u003e Sources \u003e Sources for Hosted Collectors \u003e AWS \u003e AWS Metadata (Tag) Source][3]\n\n\n## Import\n\nMetadata sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/metadataSource:MetadataSource test 123/456\n```\n\n Metadata sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/metadataSource:MetadataSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]:https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Metadata-(Tag)-Source#Define_EC2_tag_filters [3]:https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Metadata-(Tag)-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceFilter:MetadataSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/MetadataSourcePath:MetadataSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceFilter:MetadataSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/MetadataSourcePath:MetadataSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MetadataSourceFilter:MetadataSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/MetadataSourcePath:MetadataSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/monitor:Monitor": {
            "description": "Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).\n\n## Example Logs Monitor\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfLogsMonitor1 = new sumologic.Monitor(\"tf_logs_monitor_1\", {\n    contentType: \"Monitor\",\n    description: \"tf logs monitor\",\n    isDisabled: false,\n    monitorType: \"Logs\",\n    notifications: [\n        {\n            notification: {\n                connectionType: \"Email\",\n                messageBody: \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                recipients: [\"abc@example.com\"],\n                subject: \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                timeZone: \"PST\",\n            },\n            runForTriggerTypes: [\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        },\n        {\n            notification: {\n                connectionId: \"0000000000ABC123\",\n                connectionType: \"Webhook\",\n            },\n            runForTriggerTypes: [\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        },\n    ],\n    queries: [{\n        query: \"_sourceCategory=event-action info\",\n        rowId: \"A\",\n    }],\n    triggers: [\n        {\n            detectionMethod: \"StaticCondition\",\n            occurrenceType: \"ResultCount\",\n            threshold: 40,\n            thresholdType: \"GreaterThan\",\n            timeRange: \"15m\",\n            triggerSource: \"AllResults\",\n            triggerType: \"Critical\",\n        },\n        {\n            detectionMethod: \"StaticCondition\",\n            occurrenceType: \"ResultCount\",\n            threshold: 40,\n            thresholdType: \"LessThanOrEqual\",\n            timeRange: \"15m\",\n            triggerSource: \"AllResults\",\n            triggerType: \"ResolvedCritical\",\n        },\n    ],\n    type: \"MonitorsLibraryMonitor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_logs_monitor1 = sumologic.Monitor(\"tfLogsMonitor1\",\n    content_type=\"Monitor\",\n    description=\"tf logs monitor\",\n    is_disabled=False,\n    monitor_type=\"Logs\",\n    notifications=[\n        sumologic.MonitorNotificationArgs(\n            notification=sumologic.MonitorNotificationNotificationArgs(\n                connection_type=\"Email\",\n                message_body=\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                recipients=[\"abc@example.com\"],\n                subject=\"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                time_zone=\"PST\",\n            ),\n            run_for_trigger_types=[\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        ),\n        sumologic.MonitorNotificationArgs(\n            notification=sumologic.MonitorNotificationNotificationArgs(\n                connection_id=\"0000000000ABC123\",\n                connection_type=\"Webhook\",\n            ),\n            run_for_trigger_types=[\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        ),\n    ],\n    queries=[sumologic.MonitorQueryArgs(\n        query=\"_sourceCategory=event-action info\",\n        row_id=\"A\",\n    )],\n    triggers=[\n        sumologic.MonitorTriggerArgs(\n            detection_method=\"StaticCondition\",\n            occurrence_type=\"ResultCount\",\n            threshold=40,\n            threshold_type=\"GreaterThan\",\n            time_range=\"15m\",\n            trigger_source=\"AllResults\",\n            trigger_type=\"Critical\",\n        ),\n        sumologic.MonitorTriggerArgs(\n            detection_method=\"StaticCondition\",\n            occurrence_type=\"ResultCount\",\n            threshold=40,\n            threshold_type=\"LessThanOrEqual\",\n            time_range=\"15m\",\n            trigger_source=\"AllResults\",\n            trigger_type=\"ResolvedCritical\",\n        ),\n    ],\n    type=\"MonitorsLibraryMonitor\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tfLogsMonitor1 = new SumoLogic.Monitor(\"tfLogsMonitor1\", new SumoLogic.MonitorArgs\n        {\n            ContentType = \"Monitor\",\n            Description = \"tf logs monitor\",\n            IsDisabled = false,\n            MonitorType = \"Logs\",\n            Notifications = \n            {\n                new SumoLogic.Inputs.MonitorNotificationArgs\n                {\n                    Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                    {\n                        ConnectionType = \"Email\",\n                        MessageBody = \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                        Recipients = \n                        {\n                            \"abc@example.com\",\n                        },\n                        Subject = \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                        TimeZone = \"PST\",\n                    },\n                    RunForTriggerTypes = \n                    {\n                        \"Critical\",\n                        \"ResolvedCritical\",\n                    },\n                },\n                new SumoLogic.Inputs.MonitorNotificationArgs\n                {\n                    Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                    {\n                        ConnectionId = \"0000000000ABC123\",\n                        ConnectionType = \"Webhook\",\n                    },\n                    RunForTriggerTypes = \n                    {\n                        \"Critical\",\n                        \"ResolvedCritical\",\n                    },\n                },\n            },\n            Queries = \n            {\n                new SumoLogic.Inputs.MonitorQueryArgs\n                {\n                    Query = \"_sourceCategory=event-action info\",\n                    RowId = \"A\",\n                },\n            },\n            Triggers = \n            {\n                new SumoLogic.Inputs.MonitorTriggerArgs\n                {\n                    DetectionMethod = \"StaticCondition\",\n                    OccurrenceType = \"ResultCount\",\n                    Threshold = 40,\n                    ThresholdType = \"GreaterThan\",\n                    TimeRange = \"15m\",\n                    TriggerSource = \"AllResults\",\n                    TriggerType = \"Critical\",\n                },\n                new SumoLogic.Inputs.MonitorTriggerArgs\n                {\n                    DetectionMethod = \"StaticCondition\",\n                    OccurrenceType = \"ResultCount\",\n                    Threshold = 40,\n                    ThresholdType = \"LessThanOrEqual\",\n                    TimeRange = \"15m\",\n                    TriggerSource = \"AllResults\",\n                    TriggerType = \"ResolvedCritical\",\n                },\n            },\n            Type = \"MonitorsLibraryMonitor\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitor(ctx, \"tfLogsMonitor1\", \u0026sumologic.MonitorArgs{\n\t\t\tContentType: pulumi.String(\"Monitor\"),\n\t\t\tDescription: pulumi.String(\"tf logs monitor\"),\n\t\t\tIsDisabled:  pulumi.Bool(false),\n\t\t\tMonitorType: pulumi.String(\"Logs\"),\n\t\t\tNotifications: sumologic.MonitorNotificationArray{\n\t\t\t\t\u0026sumologic.MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026sumologic.MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Email\"),\n\t\t\t\t\t\tMessageBody:    pulumi.String(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\"),\n\t\t\t\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"abc@example.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubject:  pulumi.String(\"Monitor Alert: {{TriggerType}} on {{Name}}\"),\n\t\t\t\t\t\tTimeZone: pulumi.String(\"PST\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sumologic.MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026sumologic.MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionId:   pulumi.String(\"0000000000ABC123\"),\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Webhook\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tQueries: sumologic.MonitorQueryArray{\n\t\t\t\t\u0026sumologic.MonitorQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"_sourceCategory=event-action info\"),\n\t\t\t\t\tRowId: pulumi.String(\"A\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTriggers: sumologic.MonitorTriggerArray{\n\t\t\t\t\u0026sumologic.MonitorTriggerArgs{\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"ResultCount\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tThresholdType:   pulumi.String(\"GreaterThan\"),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AllResults\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"Critical\"),\n\t\t\t\t},\n\t\t\t\t\u0026sumologic.MonitorTriggerArgs{\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"ResultCount\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tThresholdType:   pulumi.String(\"LessThanOrEqual\"),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AllResults\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"ResolvedCritical\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"MonitorsLibraryMonitor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Example Metrics Monitor\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfMetricsMonitor1 = new sumologic.Monitor(\"tf_metrics_monitor_1\", {\n    contentType: \"Monitor\",\n    description: \"tf metrics monitor\",\n    isDisabled: false,\n    monitorType: \"Metrics\",\n    notifications: [{\n        notification: {\n            connectionType: \"Email\",\n            messageBody: \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n            recipients: [\"abc@example.com\"],\n            subject: \"Triggered {{TriggerType}} Alert on Monitor {{Name}}\",\n            timeZone: \"PST\",\n        },\n        runForTriggerTypes: [\n            \"Critical\",\n            \"ResolvedCritical\",\n        ],\n    }],\n    queries: [{\n        query: \"metric=CPU_Idle _sourceCategory=event-action\",\n        rowId: \"A\",\n    }],\n    triggers: [\n        {\n            detectionMethod: \"StaticCondition\",\n            occurrenceType: \"AtLeastOnce\",\n            threshold: 40,\n            thresholdType: \"GreaterThanOrEqual\",\n            timeRange: \"15m\",\n            triggerSource: \"AnyTimeSeries\",\n            triggerType: \"Critical\",\n        },\n        {\n            detectionMethod: \"StaticCondition\",\n            occurrenceType: \"Always\",\n            threshold: 40,\n            thresholdType: \"LessThan\",\n            timeRange: \"15m\",\n            triggerSource: \"AnyTimeSeries\",\n            triggerType: \"ResolvedCritical\",\n        },\n    ],\n    type: \"MonitorsLibraryMonitor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_metrics_monitor1 = sumologic.Monitor(\"tfMetricsMonitor1\",\n    content_type=\"Monitor\",\n    description=\"tf metrics monitor\",\n    is_disabled=False,\n    monitor_type=\"Metrics\",\n    notifications=[sumologic.MonitorNotificationArgs(\n        notification=sumologic.MonitorNotificationNotificationArgs(\n            connection_type=\"Email\",\n            message_body=\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n            recipients=[\"abc@example.com\"],\n            subject=\"Triggered {{TriggerType}} Alert on Monitor {{Name}}\",\n            time_zone=\"PST\",\n        ),\n        run_for_trigger_types=[\n            \"Critical\",\n            \"ResolvedCritical\",\n        ],\n    )],\n    queries=[sumologic.MonitorQueryArgs(\n        query=\"metric=CPU_Idle _sourceCategory=event-action\",\n        row_id=\"A\",\n    )],\n    triggers=[\n        sumologic.MonitorTriggerArgs(\n            detection_method=\"StaticCondition\",\n            occurrence_type=\"AtLeastOnce\",\n            threshold=40,\n            threshold_type=\"GreaterThanOrEqual\",\n            time_range=\"15m\",\n            trigger_source=\"AnyTimeSeries\",\n            trigger_type=\"Critical\",\n        ),\n        sumologic.MonitorTriggerArgs(\n            detection_method=\"StaticCondition\",\n            occurrence_type=\"Always\",\n            threshold=40,\n            threshold_type=\"LessThan\",\n            time_range=\"15m\",\n            trigger_source=\"AnyTimeSeries\",\n            trigger_type=\"ResolvedCritical\",\n        ),\n    ],\n    type=\"MonitorsLibraryMonitor\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tfMetricsMonitor1 = new SumoLogic.Monitor(\"tfMetricsMonitor1\", new SumoLogic.MonitorArgs\n        {\n            ContentType = \"Monitor\",\n            Description = \"tf metrics monitor\",\n            IsDisabled = false,\n            MonitorType = \"Metrics\",\n            Notifications = \n            {\n                new SumoLogic.Inputs.MonitorNotificationArgs\n                {\n                    Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                    {\n                        ConnectionType = \"Email\",\n                        MessageBody = \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                        Recipients = \n                        {\n                            \"abc@example.com\",\n                        },\n                        Subject = \"Triggered {{TriggerType}} Alert on Monitor {{Name}}\",\n                        TimeZone = \"PST\",\n                    },\n                    RunForTriggerTypes = \n                    {\n                        \"Critical\",\n                        \"ResolvedCritical\",\n                    },\n                },\n            },\n            Queries = \n            {\n                new SumoLogic.Inputs.MonitorQueryArgs\n                {\n                    Query = \"metric=CPU_Idle _sourceCategory=event-action\",\n                    RowId = \"A\",\n                },\n            },\n            Triggers = \n            {\n                new SumoLogic.Inputs.MonitorTriggerArgs\n                {\n                    DetectionMethod = \"StaticCondition\",\n                    OccurrenceType = \"AtLeastOnce\",\n                    Threshold = 40,\n                    ThresholdType = \"GreaterThanOrEqual\",\n                    TimeRange = \"15m\",\n                    TriggerSource = \"AnyTimeSeries\",\n                    TriggerType = \"Critical\",\n                },\n                new SumoLogic.Inputs.MonitorTriggerArgs\n                {\n                    DetectionMethod = \"StaticCondition\",\n                    OccurrenceType = \"Always\",\n                    Threshold = 40,\n                    ThresholdType = \"LessThan\",\n                    TimeRange = \"15m\",\n                    TriggerSource = \"AnyTimeSeries\",\n                    TriggerType = \"ResolvedCritical\",\n                },\n            },\n            Type = \"MonitorsLibraryMonitor\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitor(ctx, \"tfMetricsMonitor1\", \u0026sumologic.MonitorArgs{\n\t\t\tContentType: pulumi.String(\"Monitor\"),\n\t\t\tDescription: pulumi.String(\"tf metrics monitor\"),\n\t\t\tIsDisabled:  pulumi.Bool(false),\n\t\t\tMonitorType: pulumi.String(\"Metrics\"),\n\t\t\tNotifications: sumologic.MonitorNotificationArray{\n\t\t\t\t\u0026sumologic.MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026sumologic.MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Email\"),\n\t\t\t\t\t\tMessageBody:    pulumi.String(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\"),\n\t\t\t\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"abc@example.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubject:  pulumi.String(\"Triggered {{TriggerType}} Alert on Monitor {{Name}}\"),\n\t\t\t\t\t\tTimeZone: pulumi.String(\"PST\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tQueries: sumologic.MonitorQueryArray{\n\t\t\t\t\u0026sumologic.MonitorQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"metric=CPU_Idle _sourceCategory=event-action\"),\n\t\t\t\t\tRowId: pulumi.String(\"A\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTriggers: sumologic.MonitorTriggerArray{\n\t\t\t\t\u0026sumologic.MonitorTriggerArgs{\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"AtLeastOnce\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tThresholdType:   pulumi.String(\"GreaterThanOrEqual\"),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AnyTimeSeries\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"Critical\"),\n\t\t\t\t},\n\t\t\t\t\u0026sumologic.MonitorTriggerArgs{\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"Always\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tThresholdType:   pulumi.String(\"LessThan\"),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AnyTimeSeries\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"ResolvedCritical\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"MonitorsLibraryMonitor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Example Logs Monitor with Webhook Connection and Folder\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfMonitorFolder1 = new sumologic.MonitorFolder(\"tfMonitorFolder1\", {description: \"A folder for Monitors\"});\nconst examplePagerdutyConnection = new sumologic.Connection(\"examplePagerdutyConnection\", {\n    description: \"PagerDuty connection for notifications from Monitors\",\n    type: \"WebhookConnection\",\n    webhookType: \"PagerDuty\",\n    url: \"https://events.pagerduty.com/\",\n    defaultPayload: `{\n  \"service_key\": \"pagerduty_api_integration_key\",\n  \"event_type\": \"trigger\",\n  \"description\": \"PagerDuty connection for notifications\",\n  \"client\": \"Sumo Logic\",\n  \"client_url\": \"\"\n}\n`,\n});\nconst tfLogsMonitor2 = new sumologic.Monitor(\"tfLogsMonitor2\", {\n    description: \"logs monitor with webhook\",\n    type: \"MonitorsLibraryMonitor\",\n    parentId: tfMonitorFolder1.id,\n    isDisabled: false,\n    contentType: \"Monitor\",\n    monitorType: \"Logs\",\n    queries: [{\n        rowId: \"A\",\n        query: \"_sourceCategory=event-action info\",\n    }],\n    triggers: [\n        {\n            thresholdType: \"GreaterThan\",\n            threshold: 40,\n            timeRange: \"15m\",\n            occurrenceType: \"ResultCount\",\n            triggerSource: \"AllResults\",\n            triggerType: \"Critical\",\n            detectionMethod: \"StaticCondition\",\n        },\n        {\n            thresholdType: \"LessThanOrEqual\",\n            threshold: 40,\n            timeRange: \"15m\",\n            occurrenceType: \"ResultCount\",\n            triggerSource: \"AllResults\",\n            triggerType: \"ResolvedCritical\",\n            detectionMethod: \"StaticCondition\",\n        },\n    ],\n    notifications: [\n        {\n            notification: {\n                connectionType: \"Email\",\n                recipients: [\"abc@example.com\"],\n                subject: \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                timeZone: \"PST\",\n                messageBody: \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n            },\n            runForTriggerTypes: [\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        },\n        {\n            notification: {\n                connectionType: \"PagerDuty\",\n                connectionId: examplePagerdutyConnection.id,\n                payloadOverride: `{\n  \"service_key\": \"your_pagerduty_api_integration_key\",\n  \"event_type\": \"trigger\",\n  \"description\": \"Alert: Triggered {{TriggerType}} for Monitor {{Name}}\",\n  \"client\": \"Sumo Logic\",\n  \"client_url\": \"{{QueryUrl}}\"\n}\n`,\n            },\n            runForTriggerTypes: [\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_monitor_folder1 = sumologic.MonitorFolder(\"tfMonitorFolder1\", description=\"A folder for Monitors\")\nexample_pagerduty_connection = sumologic.Connection(\"examplePagerdutyConnection\",\n    description=\"PagerDuty connection for notifications from Monitors\",\n    type=\"WebhookConnection\",\n    webhook_type=\"PagerDuty\",\n    url=\"https://events.pagerduty.com/\",\n    default_payload=\"\"\"{\n  \"service_key\": \"pagerduty_api_integration_key\",\n  \"event_type\": \"trigger\",\n  \"description\": \"PagerDuty connection for notifications\",\n  \"client\": \"Sumo Logic\",\n  \"client_url\": \"\"\n}\n\"\"\")\ntf_logs_monitor2 = sumologic.Monitor(\"tfLogsMonitor2\",\n    description=\"logs monitor with webhook\",\n    type=\"MonitorsLibraryMonitor\",\n    parent_id=tf_monitor_folder1.id,\n    is_disabled=False,\n    content_type=\"Monitor\",\n    monitor_type=\"Logs\",\n    queries=[sumologic.MonitorQueryArgs(\n        row_id=\"A\",\n        query=\"_sourceCategory=event-action info\",\n    )],\n    triggers=[\n        sumologic.MonitorTriggerArgs(\n            threshold_type=\"GreaterThan\",\n            threshold=40,\n            time_range=\"15m\",\n            occurrence_type=\"ResultCount\",\n            trigger_source=\"AllResults\",\n            trigger_type=\"Critical\",\n            detection_method=\"StaticCondition\",\n        ),\n        sumologic.MonitorTriggerArgs(\n            threshold_type=\"LessThanOrEqual\",\n            threshold=40,\n            time_range=\"15m\",\n            occurrence_type=\"ResultCount\",\n            trigger_source=\"AllResults\",\n            trigger_type=\"ResolvedCritical\",\n            detection_method=\"StaticCondition\",\n        ),\n    ],\n    notifications=[\n        sumologic.MonitorNotificationArgs(\n            notification=sumologic.MonitorNotificationNotificationArgs(\n                connection_type=\"Email\",\n                recipients=[\"abc@example.com\"],\n                subject=\"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                time_zone=\"PST\",\n                message_body=\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n            ),\n            run_for_trigger_types=[\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        ),\n        sumologic.MonitorNotificationArgs(\n            notification=sumologic.MonitorNotificationNotificationArgs(\n                connection_type=\"PagerDuty\",\n                connection_id=example_pagerduty_connection.id,\n                payload_override=\"\"\"{\n  \"service_key\": \"your_pagerduty_api_integration_key\",\n  \"event_type\": \"trigger\",\n  \"description\": \"Alert: Triggered {{TriggerType}} for Monitor {{Name}}\",\n  \"client\": \"Sumo Logic\",\n  \"client_url\": \"{{QueryUrl}}\"\n}\n\"\"\",\n            ),\n            run_for_trigger_types=[\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tfMonitorFolder1 = new SumoLogic.MonitorFolder(\"tfMonitorFolder1\", new SumoLogic.MonitorFolderArgs\n        {\n            Description = \"A folder for Monitors\",\n        });\n        var examplePagerdutyConnection = new SumoLogic.Connection(\"examplePagerdutyConnection\", new SumoLogic.ConnectionArgs\n        {\n            Description = \"PagerDuty connection for notifications from Monitors\",\n            Type = \"WebhookConnection\",\n            WebhookType = \"PagerDuty\",\n            Url = \"https://events.pagerduty.com/\",\n            DefaultPayload = @\"{\n  \"\"service_key\"\": \"\"pagerduty_api_integration_key\"\",\n  \"\"event_type\"\": \"\"trigger\"\",\n  \"\"description\"\": \"\"PagerDuty connection for notifications\"\",\n  \"\"client\"\": \"\"Sumo Logic\"\",\n  \"\"client_url\"\": \"\"\"\"\n}\n\",\n        });\n        var tfLogsMonitor2 = new SumoLogic.Monitor(\"tfLogsMonitor2\", new SumoLogic.MonitorArgs\n        {\n            Description = \"logs monitor with webhook\",\n            Type = \"MonitorsLibraryMonitor\",\n            ParentId = tfMonitorFolder1.Id,\n            IsDisabled = false,\n            ContentType = \"Monitor\",\n            MonitorType = \"Logs\",\n            Queries = \n            {\n                new SumoLogic.Inputs.MonitorQueryArgs\n                {\n                    RowId = \"A\",\n                    Query = \"_sourceCategory=event-action info\",\n                },\n            },\n            Triggers = \n            {\n                new SumoLogic.Inputs.MonitorTriggerArgs\n                {\n                    ThresholdType = \"GreaterThan\",\n                    Threshold = 40,\n                    TimeRange = \"15m\",\n                    OccurrenceType = \"ResultCount\",\n                    TriggerSource = \"AllResults\",\n                    TriggerType = \"Critical\",\n                    DetectionMethod = \"StaticCondition\",\n                },\n                new SumoLogic.Inputs.MonitorTriggerArgs\n                {\n                    ThresholdType = \"LessThanOrEqual\",\n                    Threshold = 40,\n                    TimeRange = \"15m\",\n                    OccurrenceType = \"ResultCount\",\n                    TriggerSource = \"AllResults\",\n                    TriggerType = \"ResolvedCritical\",\n                    DetectionMethod = \"StaticCondition\",\n                },\n            },\n            Notifications = \n            {\n                new SumoLogic.Inputs.MonitorNotificationArgs\n                {\n                    Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                    {\n                        ConnectionType = \"Email\",\n                        Recipients = \n                        {\n                            \"abc@example.com\",\n                        },\n                        Subject = \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                        TimeZone = \"PST\",\n                        MessageBody = \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                    },\n                    RunForTriggerTypes = \n                    {\n                        \"Critical\",\n                        \"ResolvedCritical\",\n                    },\n                },\n                new SumoLogic.Inputs.MonitorNotificationArgs\n                {\n                    Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                    {\n                        ConnectionType = \"PagerDuty\",\n                        ConnectionId = examplePagerdutyConnection.Id,\n                        PayloadOverride = @\"{\n  \"\"service_key\"\": \"\"your_pagerduty_api_integration_key\"\",\n  \"\"event_type\"\": \"\"trigger\"\",\n  \"\"description\"\": \"\"Alert: Triggered {{TriggerType}} for Monitor {{Name}}\"\",\n  \"\"client\"\": \"\"Sumo Logic\"\",\n  \"\"client_url\"\": \"\"{{QueryUrl}}\"\"\n}\n\",\n                    },\n                    RunForTriggerTypes = \n                    {\n                        \"Critical\",\n                        \"ResolvedCritical\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttfMonitorFolder1, err := sumologic.NewMonitorFolder(ctx, \"tfMonitorFolder1\", \u0026sumologic.MonitorFolderArgs{\n\t\t\tDescription: pulumi.String(\"A folder for Monitors\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePagerdutyConnection, err := sumologic.NewConnection(ctx, \"examplePagerdutyConnection\", \u0026sumologic.ConnectionArgs{\n\t\t\tDescription:    pulumi.String(\"PagerDuty connection for notifications from Monitors\"),\n\t\t\tType:           pulumi.String(\"WebhookConnection\"),\n\t\t\tWebhookType:    pulumi.String(\"PagerDuty\"),\n\t\t\tUrl:            pulumi.String(\"https://events.pagerduty.com/\"),\n\t\t\tDefaultPayload: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"service_key\\\": \\\"pagerduty_api_integration_key\\\",\\n\", \"  \\\"event_type\\\": \\\"trigger\\\",\\n\", \"  \\\"description\\\": \\\"PagerDuty connection for notifications\\\",\\n\", \"  \\\"client\\\": \\\"Sumo Logic\\\",\\n\", \"  \\\"client_url\\\": \\\"\\\"\\n\", \"}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewMonitor(ctx, \"tfLogsMonitor2\", \u0026sumologic.MonitorArgs{\n\t\t\tDescription: pulumi.String(\"logs monitor with webhook\"),\n\t\t\tType:        pulumi.String(\"MonitorsLibraryMonitor\"),\n\t\t\tParentId:    tfMonitorFolder1.ID(),\n\t\t\tIsDisabled:  pulumi.Bool(false),\n\t\t\tContentType: pulumi.String(\"Monitor\"),\n\t\t\tMonitorType: pulumi.String(\"Logs\"),\n\t\t\tQueries: sumologic.MonitorQueryArray{\n\t\t\t\t\u0026sumologic.MonitorQueryArgs{\n\t\t\t\t\tRowId: pulumi.String(\"A\"),\n\t\t\t\t\tQuery: pulumi.String(\"_sourceCategory=event-action info\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTriggers: sumologic.MonitorTriggerArray{\n\t\t\t\t\u0026sumologic.MonitorTriggerArgs{\n\t\t\t\t\tThresholdType:   pulumi.String(\"GreaterThan\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"ResultCount\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AllResults\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"Critical\"),\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t},\n\t\t\t\t\u0026sumologic.MonitorTriggerArgs{\n\t\t\t\t\tThresholdType:   pulumi.String(\"LessThanOrEqual\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"ResultCount\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AllResults\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNotifications: sumologic.MonitorNotificationArray{\n\t\t\t\t\u0026sumologic.MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026sumologic.MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Email\"),\n\t\t\t\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"abc@example.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubject:     pulumi.String(\"Monitor Alert: {{TriggerType}} on {{Name}}\"),\n\t\t\t\t\t\tTimeZone:    pulumi.String(\"PST\"),\n\t\t\t\t\t\tMessageBody: pulumi.String(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sumologic.MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026sumologic.MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionType:  pulumi.String(\"PagerDuty\"),\n\t\t\t\t\t\tConnectionId:    examplePagerdutyConnection.ID(),\n\t\t\t\t\t\tPayloadOverride: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"service_key\\\": \\\"your_pagerduty_api_integration_key\\\",\\n\", \"  \\\"event_type\\\": \\\"trigger\\\",\\n\", \"  \\\"description\\\": \\\"Alert: Triggered {{TriggerType}} for Monitor {{Name}}\\\",\\n\", \"  \\\"client\\\": \\\"Sumo Logic\\\",\\n\", \"  \\\"client_url\\\": \\\"{{QueryUrl}}\\\"\\n\", \"}\\n\")),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Example Monitor Folder\n\nNOTE: Monitor folders are considered a different resource from Library content folders.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfMonitorFolder1 = new sumologic.MonitorFolder(\"tf_monitor_folder_1\", {\n    description: \"a folder for monitors\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_monitor_folder1 = sumologic.MonitorFolder(\"tfMonitorFolder1\", description=\"a folder for monitors\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tfMonitorFolder1 = new SumoLogic.MonitorFolder(\"tfMonitorFolder1\", new SumoLogic.MonitorFolderArgs\n        {\n            Description = \"a folder for monitors\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitorFolder(ctx, \"tfMonitorFolder1\", \u0026sumologic.MonitorFolderArgs{\n\t\t\tDescription: pulumi.String(\"a folder for monitors\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Argument reference\n\nThe following arguments are supported:\n\n- `type` - (Optional) The type of object model. Valid value:\n  - `MonitorsLibraryMonitor`\n- `name` - (Required) The name of the monitor. The name must be alphanumeric.\n- `description` - (Required) The description of the monitor.\n- `is_disabled` - (Optional) Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.\n- `parent_id` - (Optional) The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.\n- `content_type` - (Optional) The type of the content object. Valid value:\n  - `Monitor`\n- `monitor_type` - (Required) The type of monitor. Valid values:\n  - `Logs`: A logs query monitor.\n  - `Metrics`: A metrics query monitor.\n- `queries` - (Required) All queries from the monitor.\n- `triggers` - (Required) Defines the conditions of when to send notifications.\n- `notifications` - (Optional) The notifications the monitor will send when the respective trigger condition is met.\n- `group_notifications` - (Optional) Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.\n\nAdditional data provided in state:\n\n- `id` - (Computed) The ID for this monitor.\n- `status` - (Computed) The current status for this monitor. Values are:\n  - `Critical`\n  - `Warning`\n  - `MissingData`\n  - `Normal`\n  - `Disabled`\n\n\n## Import\n\nMonitors can be imported using the monitor ID, such ashcl\n\n```sh\n $ pulumi import sumologic:index/monitor:Monitor test 1234567890\n```\n\n [1]https://help.sumologic.com/?cid=10020 ",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "groupNotifications": {
                    "type": "boolean"
                },
                "isDisabled": {
                    "type": "boolean"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "monitorType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorNotification:MonitorNotification"
                    }
                },
                "parentId": {
                    "type": "string"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorQuery:MonitorQuery"
                    }
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorTrigger:MonitorTrigger"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "isLocked",
                "isMutable",
                "isSystem",
                "modifiedAt",
                "modifiedBy",
                "monitorType",
                "name",
                "parentId",
                "statuses",
                "version"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "groupNotifications": {
                    "type": "boolean"
                },
                "isDisabled": {
                    "type": "boolean"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "monitorType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorNotification:MonitorNotification"
                    }
                },
                "parentId": {
                    "type": "string"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorQuery:MonitorQuery"
                    }
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorTrigger:MonitorTrigger"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "monitorType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Monitor resources.\n",
                "properties": {
                    "contentType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "groupNotifications": {
                        "type": "boolean"
                    },
                    "isDisabled": {
                        "type": "boolean"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "isMutable": {
                        "type": "boolean"
                    },
                    "isSystem": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "monitorType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorNotification:MonitorNotification"
                        }
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "postRequestMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorQuery:MonitorQuery"
                        }
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorTrigger:MonitorTrigger"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/monitorFolder:MonitorFolder": {
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "description",
                "isMutable",
                "isSystem",
                "modifiedAt",
                "modifiedBy",
                "name",
                "parentId",
                "version"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitorFolder resources.\n",
                "properties": {
                    "contentType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "isMutable": {
                        "type": "boolean"
                    },
                    "isSystem": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "postRequestMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/partition:Partition": {
            "description": "Provides a [Sumologic Partition](https://help.sumologic.com/Manage/Partitions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst examplePartition = new sumologic.Partition(\"examplePartition\", {\n    analyticsTier: \"continuous\",\n    isCompliant: false,\n    routingExpression: \"_sourcecategory=*/IAC\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `name` - (Required, Forces new resource) The name of the partition.\n- `routing_expression` - (Required) The query that defines the data to be included in the partition.\n- `analytics_tier` - (Required) The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`\n- `retention_period` - (Optional) The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.\n- `is_compliant` - (Optional) Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.\n- `reduce_retention_period_immediately` - (Optional) This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the partition.\n\n\n## Import\n\nPartitions can can be imported using the id. The list of partitions and their ids can be obtained using the Sumologic [partions api][2]. hcl\n\n```sh\n $ pulumi import sumologic:index/partition:Partition partition 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Partitions [2]https://api.sumologic.com/docs/#operation/listPartitions ",
            "properties": {
                "analyticsTier": {
                    "type": "string"
                },
                "dataForwardingId": {
                    "type": "string"
                },
                "indexType": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isCompliant": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "routingExpression": {
                    "type": "string"
                },
                "totalBytes": {
                    "type": "integer"
                }
            },
            "required": [
                "dataForwardingId",
                "indexType",
                "isActive",
                "name",
                "totalBytes"
            ],
            "inputProperties": {
                "analyticsTier": {
                    "type": "string"
                },
                "isCompliant": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "routingExpression": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Partition resources.\n",
                "properties": {
                    "analyticsTier": {
                        "type": "string"
                    },
                    "dataForwardingId": {
                        "type": "string"
                    },
                    "indexType": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isCompliant": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reduceRetentionPeriodImmediately": {
                        "type": "boolean"
                    },
                    "retentionPeriod": {
                        "type": "integer"
                    },
                    "routingExpression": {
                        "type": "string"
                    },
                    "totalBytes": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/passwordPolicy:PasswordPolicy": {
            "description": "Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,\nplease ensure that only a single instance of such resource is defined.\nThe behavior for defining more than one password policy resources is undefined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst examplePasswordPolicy = new sumologic.PasswordPolicy(\"examplePasswordPolicy\", {\n    accountLockoutDurationInMins: 30,\n    accountLockoutThreshold: 6,\n    failedLoginResetDurationInMins: 10,\n    maxLength: 128,\n    maxPasswordAgeInDays: 365,\n    minLength: 8,\n    minUniquePasswords: 10,\n    mustContainDigits: true,\n    mustContainLowercase: true,\n    mustContainSpecialChars: true,\n    mustContainUppercase: true,\n    rememberMfa: true,\n    requireMfa: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_password_policy = sumologic.PasswordPolicy(\"examplePasswordPolicy\",\n    account_lockout_duration_in_mins=30,\n    account_lockout_threshold=6,\n    failed_login_reset_duration_in_mins=10,\n    max_length=128,\n    max_password_age_in_days=365,\n    min_length=8,\n    min_unique_passwords=10,\n    must_contain_digits=True,\n    must_contain_lowercase=True,\n    must_contain_special_chars=True,\n    must_contain_uppercase=True,\n    remember_mfa=True,\n    require_mfa=False)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var examplePasswordPolicy = new SumoLogic.PasswordPolicy(\"examplePasswordPolicy\", new SumoLogic.PasswordPolicyArgs\n        {\n            AccountLockoutDurationInMins = 30,\n            AccountLockoutThreshold = 6,\n            FailedLoginResetDurationInMins = 10,\n            MaxLength = 128,\n            MaxPasswordAgeInDays = 365,\n            MinLength = 8,\n            MinUniquePasswords = 10,\n            MustContainDigits = true,\n            MustContainLowercase = true,\n            MustContainSpecialChars = true,\n            MustContainUppercase = true,\n            RememberMfa = true,\n            RequireMfa = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewPasswordPolicy(ctx, \"examplePasswordPolicy\", \u0026sumologic.PasswordPolicyArgs{\n\t\t\tAccountLockoutDurationInMins:   pulumi.Int(30),\n\t\t\tAccountLockoutThreshold:        pulumi.Int(6),\n\t\t\tFailedLoginResetDurationInMins: pulumi.Int(10),\n\t\t\tMaxLength:                      pulumi.Int(128),\n\t\t\tMaxPasswordAgeInDays:           pulumi.Int(365),\n\t\t\tMinLength:                      pulumi.Int(8),\n\t\t\tMinUniquePasswords:             pulumi.Int(10),\n\t\t\tMustContainDigits:              pulumi.Bool(true),\n\t\t\tMustContainLowercase:           pulumi.Bool(true),\n\t\t\tMustContainSpecialChars:        pulumi.Bool(true),\n\t\t\tMustContainUppercase:           pulumi.Bool(true),\n\t\t\tRememberMfa:                    pulumi.Bool(true),\n\t\t\tRequireMfa:                     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `min_length` - (Optional) The minimum length of the password. Defaults to 8.\n- `max_length` - (Optional) The maximum length of the password. Defaults to 128.\n- `must_contain_lowercase` - (Optional) If the password must contain lower case characters. Defaults to true.\n- `must_contain_uppercase` - (Optional) If the password must contain upper case characters. Defaults to true.\n- `must_contain_digits` - (Optional) If the password must contain digits. Defaults to true.\n- `must_contain_special_chars` - (Optional) If the password must contain special characters. Defaults to true.\n- `max_password_age_in_days` - (Optional) Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.\n- `min_unique_passwords` - (Optional) The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.\n- `account_lockout_threshold` - (Optional) Number of failed login attempts allowed before account is locked-out. Defaults to 6.\n- `failed_login_reset_duration_in_mins` - (Optional) The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.\n- `account_lockout_duration_in_mins` - (Optional) The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.\n- `require_mfa` - (Optional) If MFA should be required to log in. Defaults to false.\n- `remember_mfa` - (Optional) If MFA should be remembered on the browser. Defaults to true.\n\n[1]: https://help.sumologic.com/Manage/Security/Set-the-Password-Policy\n",
            "properties": {
                "accountLockoutDurationInMins": {
                    "type": "integer"
                },
                "accountLockoutThreshold": {
                    "type": "integer"
                },
                "failedLoginResetDurationInMins": {
                    "type": "integer"
                },
                "maxLength": {
                    "type": "integer"
                },
                "maxPasswordAgeInDays": {
                    "type": "integer"
                },
                "minLength": {
                    "type": "integer"
                },
                "minUniquePasswords": {
                    "type": "integer"
                },
                "mustContainDigits": {
                    "type": "boolean"
                },
                "mustContainLowercase": {
                    "type": "boolean"
                },
                "mustContainSpecialChars": {
                    "type": "boolean"
                },
                "mustContainUppercase": {
                    "type": "boolean"
                },
                "rememberMfa": {
                    "type": "boolean"
                },
                "requireMfa": {
                    "type": "boolean"
                }
            },
            "inputProperties": {
                "accountLockoutDurationInMins": {
                    "type": "integer"
                },
                "accountLockoutThreshold": {
                    "type": "integer"
                },
                "failedLoginResetDurationInMins": {
                    "type": "integer"
                },
                "maxLength": {
                    "type": "integer"
                },
                "maxPasswordAgeInDays": {
                    "type": "integer"
                },
                "minLength": {
                    "type": "integer"
                },
                "minUniquePasswords": {
                    "type": "integer"
                },
                "mustContainDigits": {
                    "type": "boolean"
                },
                "mustContainLowercase": {
                    "type": "boolean"
                },
                "mustContainSpecialChars": {
                    "type": "boolean"
                },
                "mustContainUppercase": {
                    "type": "boolean"
                },
                "rememberMfa": {
                    "type": "boolean"
                },
                "requireMfa": {
                    "type": "boolean"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PasswordPolicy resources.\n",
                "properties": {
                    "accountLockoutDurationInMins": {
                        "type": "integer"
                    },
                    "accountLockoutThreshold": {
                        "type": "integer"
                    },
                    "failedLoginResetDurationInMins": {
                        "type": "integer"
                    },
                    "maxLength": {
                        "type": "integer"
                    },
                    "maxPasswordAgeInDays": {
                        "type": "integer"
                    },
                    "minLength": {
                        "type": "integer"
                    },
                    "minUniquePasswords": {
                        "type": "integer"
                    },
                    "mustContainDigits": {
                        "type": "boolean"
                    },
                    "mustContainLowercase": {
                        "type": "boolean"
                    },
                    "mustContainSpecialChars": {
                        "type": "boolean"
                    },
                    "mustContainUppercase": {
                        "type": "boolean"
                    },
                    "rememberMfa": {
                        "type": "boolean"
                    },
                    "requireMfa": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/pollingSource:PollingSource": {
            "description": "!\u003e **WARNING:** This data source is deprecated and will be removed in the next major version.\n\nProvides a Sumologic Polling source. This source is used to import data from various AWS products, eg. AWS S3 buckets, Cloudwatch Metrics etc.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tagfilters = [\n    {\n        type: \"TagFilters\",\n        namespace: \"All\",\n        tags: [\"k3=v3\"],\n    },\n    {\n        type: \"TagFilters\",\n        namespace: \"AWS/Route53\",\n        tags: [\"k1=v1\"],\n    },\n    {\n        type: \"TagFilters\",\n        namespace: \"AWS/S3\",\n        tags: [\"k2=v2\"],\n    },\n];\nconst collector = new sumologic.Collector(\"collector\", {description: \"Just testing this\"});\nconst s3Audit = new sumologic.PollingSource(\"s3Audit\", {\n    description: \"My description\",\n    category: \"aws/s3audit\",\n    contentType: \"AwsS3AuditBucket\",\n    scanInterval: 300000,\n    paused: false,\n    collectorId: collector.id,\n    filters: [{\n        name: \"Exclude Comments\",\n        filterType: \"Exclude\",\n        regexp: \"#.*\",\n    }],\n    authentication: {\n        type: \"S3BucketAuthentication\",\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n    },\n    path: {\n        type: \"S3BucketPathExpression\",\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n    },\n});\nconst cwMetrics = new sumologic.PollingSource(\"cwMetrics\", {\n    description: \"My description\",\n    category: \"aws/cw\",\n    contentType: \"AwsCloudWatch\",\n    scanInterval: 300000,\n    paused: false,\n    collectorId: collector.id,\n    authentication: {\n        type: \"AWSRoleBasedAuthentication\",\n        roleArn: \"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n    },\n    path: {\n        type: \"CloudWatchPath\",\n        limitToRegions: [\"us-west-2\"],\n        limitToNamespaces: [\n            \"AWS/Route53\",\n            \"AWS/S3\",\n            \"customNamespace\",\n        ],\n        dynamic: [{\n            forEach: tagfilters,\n            content: [{\n                type: tag_filters.value.type,\n                namespace: tag_filters.value.namespace,\n                tags: tag_filters.value.tags,\n            }],\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntagfilters = [\n    {\n        \"type\": \"TagFilters\",\n        \"namespace\": \"All\",\n        \"tags\": [\"k3=v3\"],\n    },\n    {\n        \"type\": \"TagFilters\",\n        \"namespace\": \"AWS/Route53\",\n        \"tags\": [\"k1=v1\"],\n    },\n    {\n        \"type\": \"TagFilters\",\n        \"namespace\": \"AWS/S3\",\n        \"tags\": [\"k2=v2\"],\n    },\n]\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ns3_audit = sumologic.PollingSource(\"s3Audit\",\n    description=\"My description\",\n    category=\"aws/s3audit\",\n    content_type=\"AwsS3AuditBucket\",\n    scan_interval=300000,\n    paused=False,\n    collector_id=collector.id,\n    filters=[sumologic.PollingSourceFilterArgs(\n        name=\"Exclude Comments\",\n        filter_type=\"Exclude\",\n        regexp=\"#.*\",\n    )],\n    authentication=sumologic.PollingSourceAuthenticationArgs(\n        type=\"S3BucketAuthentication\",\n        access_key=\"someKey\",\n        secret_key=\"******\",\n    ),\n    path=sumologic.PollingSourcePathArgs(\n        type=\"S3BucketPathExpression\",\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n    ))\ncw_metrics = sumologic.PollingSource(\"cwMetrics\",\n    description=\"My description\",\n    category=\"aws/cw\",\n    content_type=\"AwsCloudWatch\",\n    scan_interval=300000,\n    paused=False,\n    collector_id=collector.id,\n    authentication=sumologic.PollingSourceAuthenticationArgs(\n        type=\"AWSRoleBasedAuthentication\",\n        role_arn=\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n    ),\n    path=sumologic.PollingSourcePathArgs(\n        type=\"CloudWatchPath\",\n        limit_to_regions=[\"us-west-2\"],\n        limit_to_namespaces=[\n            \"AWS/Route53\",\n            \"AWS/S3\",\n            \"customNamespace\",\n        ],\n        dynamic=[{\n            \"forEach\": tagfilters,\n            \"content\": [{\n                \"type\": tag_filters[\"value\"][\"type\"],\n                \"namespace\": tag_filters[\"value\"][\"namespace\"],\n                \"tags\": tag_filters[\"value\"][\"tags\"],\n            }],\n        }],\n    ))\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tagfilters = \n        {\n            \n            {\n                { \"type\", \"TagFilters\" },\n                { \"namespace\", \"All\" },\n                { \"tags\", \n                {\n                    \"k3=v3\",\n                } },\n            },\n            \n            {\n                { \"type\", \"TagFilters\" },\n                { \"namespace\", \"AWS/Route53\" },\n                { \"tags\", \n                {\n                    \"k1=v1\",\n                } },\n            },\n            \n            {\n                { \"type\", \"TagFilters\" },\n                { \"namespace\", \"AWS/S3\" },\n                { \"tags\", \n                {\n                    \"k2=v2\",\n                } },\n            },\n        };\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var s3Audit = new SumoLogic.PollingSource(\"s3Audit\", new SumoLogic.PollingSourceArgs\n        {\n            Description = \"My description\",\n            Category = \"aws/s3audit\",\n            ContentType = \"AwsS3AuditBucket\",\n            ScanInterval = 300000,\n            Paused = false,\n            CollectorId = collector.Id,\n            Filters = \n            {\n                new SumoLogic.Inputs.PollingSourceFilterArgs\n                {\n                    Name = \"Exclude Comments\",\n                    FilterType = \"Exclude\",\n                    Regexp = \"#.*\",\n                },\n            },\n            Authentication = new SumoLogic.Inputs.PollingSourceAuthenticationArgs\n            {\n                Type = \"S3BucketAuthentication\",\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n            },\n            Path = new SumoLogic.Inputs.PollingSourcePathArgs\n            {\n                Type = \"S3BucketPathExpression\",\n                BucketName = \"Bucket1\",\n                PathExpression = \"*\",\n            },\n        });\n        var cwMetrics = new SumoLogic.PollingSource(\"cwMetrics\", new SumoLogic.PollingSourceArgs\n        {\n            Description = \"My description\",\n            Category = \"aws/cw\",\n            ContentType = \"AwsCloudWatch\",\n            ScanInterval = 300000,\n            Paused = false,\n            CollectorId = collector.Id,\n            Authentication = new SumoLogic.Inputs.PollingSourceAuthenticationArgs\n            {\n                Type = \"AWSRoleBasedAuthentication\",\n                RoleArn = \"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n            },\n            Path = new SumoLogic.Inputs.PollingSourcePathArgs\n            {\n                Type = \"CloudWatchPath\",\n                LimitToRegions = \n                {\n                    \"us-west-2\",\n                },\n                LimitToNamespaces = \n                {\n                    \"AWS/Route53\",\n                    \"AWS/S3\",\n                    \"customNamespace\",\n                },\n                Dynamic = \n                {\n                    \n                    {\n                        { \"forEach\", tagfilters },\n                        { \"content\", \n                        {\n                            \n                            {\n                                { \"type\", tag_filters.Value.Type },\n                                { \"namespace\", tag_filters.Value.Namespace },\n                                { \"tags\", tag_filters.Value.Tags },\n                            },\n                        } },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttagfilters := []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\":      \"TagFilters\",\n\t\t\t\t\"namespace\": \"All\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k3=v3\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\":      \"TagFilters\",\n\t\t\t\t\"namespace\": \"AWS/Route53\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k1=v1\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\":      \"TagFilters\",\n\t\t\t\t\"namespace\": \"AWS/S3\",\n\t\t\t\t\"tags\": []string{\n\t\t\t\t\t\"k2=v2\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewPollingSource(ctx, \"s3Audit\", \u0026sumologic.PollingSourceArgs{\n\t\t\tDescription:  pulumi.String(\"My description\"),\n\t\t\tCategory:     pulumi.String(\"aws/s3audit\"),\n\t\t\tContentType:  pulumi.String(\"AwsS3AuditBucket\"),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tCollectorId:  collector.ID(),\n\t\t\tFilters: sumologic.PollingSourceFilterArray{\n\t\t\t\t\u0026sumologic.PollingSourceFilterArgs{\n\t\t\t\t\tName:       pulumi.String(\"Exclude Comments\"),\n\t\t\t\t\tFilterType: pulumi.String(\"Exclude\"),\n\t\t\t\t\tRegexp:     pulumi.String(\"#.*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAuthentication: \u0026sumologic.PollingSourceAuthenticationArgs{\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t},\n\t\t\tPath: \u0026sumologic.PollingSourcePathArgs{\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewPollingSource(ctx, \"cwMetrics\", \u0026sumologic.PollingSourceArgs{\n\t\t\tDescription:  pulumi.String(\"My description\"),\n\t\t\tCategory:     pulumi.String(\"aws/cw\"),\n\t\t\tContentType:  pulumi.String(\"AwsCloudWatch\"),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tCollectorId:  collector.ID(),\n\t\t\tAuthentication: \u0026sumologic.PollingSourceAuthenticationArgs{\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\"),\n\t\t\t},\n\t\t\tPath: \u0026sumologic.PollingSourcePathArgs{\n\t\t\t\tType: pulumi.String(\"CloudWatchPath\"),\n\t\t\t\tLimitToRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-west-2\"),\n\t\t\t\t},\n\t\t\t\tLimitToNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"AWS/Route53\"),\n\t\t\t\t\tpulumi.String(\"AWS/S3\"),\n\t\t\t\t\tpulumi.String(\"customNamespace\"),\n\t\t\t\t},\n\t\t\t\tDynamic: pulumi.MapArray{\n\t\t\t\t\tpulumi.Map{\n\t\t\t\t\t\t\"forEach\": toPulumiMapArray(tagfilters),\n\t\t\t\t\t\t\"content\": pulumi.AnyMapArray{\n\t\t\t\t\t\t\tpulumi.AnyMap{\n\t\t\t\t\t\t\t\t\"type\":      pulumi.Any(tag_filters.Value.Type),\n\t\t\t\t\t\t\t\t\"namespace\": pulumi.Any(tag_filters.Value.Namespace),\n\t\t\t\t\t\t\t\t\"tags\":      pulumi.Any(tag_filters.Value.Tags),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\nfunc toPulumiMapArray(arr []Map) pulumi.MapArray {\n\tvar pulumiArr pulumi.MapArray\n\tfor _, v := range arr {\n\t\tpulumiArr = append(pulumiArr, pulumi.Map(v))\n\t}\n\treturn pulumiArr\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. Can be one of `S3BucketPathExpression` or  `CloudWatchPath`\n     + `bucket_name` - (Optional) The name of the bucket. This is needed if using type `S3BucketPathExpression`. \n     + `path_expression` - (Optional) The path to the data. This is needed if using type `S3BucketPathExpression`.\n     + `limit_to_regions` - (Optional) List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.\n     + `limit_to_namespaces` - (Optional) List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.\n     + `tag_filters` - (Optional) Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)\n          + `type` - This value has to be set to `TagFilters`\n          + `namespace` - Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.\n          + `tags` - List of key-value pairs of tag filters. Eg: `[\"k3=v3\"]`\n\n\n## Import\n\nPolling sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/pollingSource:PollingSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/pollingSource:PollingSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceFilter:PollingSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/PollingSourcePath:PollingSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceFilter:PollingSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/PollingSourcePath:PollingSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PollingSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/PollingSourceFilter:PollingSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/PollingSourcePath:PollingSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/role:Role": {
            "description": "Provides a [Sumologic Role](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleRole = new sumologic.Role(\"example_role\", {\n    capabilities: [\"manageCollectors\"],\n    description: \"Testing resource sumologic_role\",\n    filterPredicate: \"_sourceCategory=Test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_role = sumologic.Role(\"exampleRole\",\n    capabilities=[\"manageCollectors\"],\n    description=\"Testing resource sumologic_role\",\n    filter_predicate=\"_sourceCategory=Test\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRole = new SumoLogic.Role(\"exampleRole\", new SumoLogic.RoleArgs\n        {\n            Capabilities = \n            {\n                \"manageCollectors\",\n            },\n            Description = \"Testing resource sumologic_role\",\n            FilterPredicate = \"_sourceCategory=Test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewRole(ctx, \"exampleRole\", \u0026sumologic.RoleArgs{\n\t\t\tCapabilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"manageCollectors\"),\n\t\t\t},\n\t\t\tDescription:     pulumi.String(\"Testing resource sumologic_role\"),\n\t\t\tFilterPredicate: pulumi.String(\"_sourceCategory=Test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `name` - (Required) The name of the role.\n- `description` - (Optional) The description of the role.\n- `filter_predicate` - (Optional) A search filter to restrict access to specific logs.\n- `capabilities` - (Optional) List of capabilities associated with this role.\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the role.\n\n\n## Import\n\nRoles can be imported using the role id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/role:Role role 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles ",
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "filterPredicate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "filterPredicate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "filterPredicate": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/s3AuditSource:S3AuditSource": {
            "description": "Provides a [AWS S3 Audit Source][2].\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst s3Audit = new sumologic.S3AuditSource(\"s3_audit\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/s3audit\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsS3AuditBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ns3_audit = sumologic.S3AuditSource(\"s3Audit\",\n    authentication=sumologic.S3AuditSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/s3audit\",\n    collector_id=collector.id,\n    content_type=\"AwsS3AuditBucket\",\n    description=\"My description\",\n    path=sumologic.S3AuditSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var s3Audit = new SumoLogic.S3AuditSource(\"s3Audit\", new SumoLogic.S3AuditSourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.S3AuditSourceAuthenticationArgs\n            {\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n                Type = \"S3BucketAuthentication\",\n            },\n            Category = \"aws/s3audit\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsS3AuditBucket\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.S3AuditSourcePathArgs\n            {\n                BucketName = \"Bucket1\",\n                PathExpression = \"*\",\n                Type = \"S3BucketPathExpression\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewS3AuditSource(ctx, \"s3Audit\", \u0026sumologic.S3AuditSourceArgs{\n\t\t\tAuthentication: \u0026sumologic.S3AuditSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/s3audit\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsS3AuditBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.S3AuditSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`.\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`.\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`.\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`.\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.\n     + `bucket_name` - (Required) The name of the bucket. \n     + `path_expression` - (Required) The path to the data.\n\n\n## Import\n\nS3 Audit sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3AuditSource:S3AuditSource test 123/456\n```\n\n S3 Audit sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3AuditSource:S3AuditSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-S3-Audit-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3AuditSourcePath:S3AuditSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3AuditSourcePath:S3AuditSourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3AuditSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/S3AuditSourcePath:S3AuditSourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/s3Source:S3Source": {
            "description": "Provides a [Sumologic AWS S3 Source][2].\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst s3Source = new sumologic.S3Source(\"s3_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/s3\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsS3Bucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ns3_source = sumologic.S3Source(\"s3Source\",\n    authentication=sumologic.S3SourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/s3\",\n    collector_id=collector.id,\n    content_type=\"AwsS3Bucket\",\n    description=\"My description\",\n    path=sumologic.S3SourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var collector = new SumoLogic.Collector(\"collector\", new SumoLogic.CollectorArgs\n        {\n            Description = \"Just testing this\",\n        });\n        var s3Source = new SumoLogic.S3Source(\"s3Source\", new SumoLogic.S3SourceArgs\n        {\n            Authentication = new SumoLogic.Inputs.S3SourceAuthenticationArgs\n            {\n                AccessKey = \"someKey\",\n                SecretKey = \"******\",\n                Type = \"S3BucketAuthentication\",\n            },\n            Category = \"aws/s3\",\n            CollectorId = collector.Id,\n            ContentType = \"AwsS3Bucket\",\n            Description = \"My description\",\n            Path = new SumoLogic.Inputs.S3SourcePathArgs\n            {\n                BucketName = \"Bucket1\",\n                PathExpression = \"*\",\n                Type = \"S3BucketPathExpression\",\n            },\n            Paused = false,\n            ScanInterval = 300000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewS3Source(ctx, \"s3Source\", \u0026sumologic.S3SourceArgs{\n\t\t\tAuthentication: \u0026sumologic.S3SourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/s3\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsS3Bucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026sumologic.S3SourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nIn addition to the common properties, the following arguments are supported:\n\n - `content_type` - (Required) The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n - `scan_interval` - (Required) Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n - `paused` - (Required) When set to true, the scanner is paused. To disable, set to false.\n - `authentication` - (Required) Authentication details for connecting to the S3 bucket.\n     + `type` - (Required) Must be either `S3BucketAuthentication` or `AWSRoleBasedAuthentication`.\n     + `access_key` - (Required) Your AWS access key if using type `S3BucketAuthentication`.\n     + `secret_key` - (Required) Your AWS secret key if using type `S3BucketAuthentication`.\n     + `role_arn` - (Required) Your AWS role ARN if using type `AWSRoleBasedAuthentication`.\n - `path` - (Required) The location to scan for new data.\n     + `type` - (Required) type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.\n     + `bucket_name` - (Required) The name of the bucket. \n     + `path_expression` - (Required) The path to the data.\n\n### See also\n  * [Common Source Properties](https://github.com/SumoLogic/tree/master/website#common-source-properties)\n\n\n## Import\n\nS3 sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3Source:S3Source test 123/456\n```\n\n S3 sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3Source:S3Source test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3SourceAuthentication:S3SourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceFilter:S3SourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3SourcePath:S3SourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3SourceAuthentication:S3SourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceFilter:S3SourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3SourcePath:S3SourcePath"
                },
                "paused": {
                    "type": "boolean"
                },
                "scanInterval": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Source resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/S3SourceAuthentication:S3SourceAuthentication"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3SourceFilter:S3SourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/S3SourcePath:S3SourcePath"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "scanInterval": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/samlConfiguration:SamlConfiguration": {
            "description": "Provides a [Sumologic SAML Configuration](https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleSamlConfiguration = new sumologic.SamlConfiguration(\"exampleSamlConfiguration\", {\n    authnRequestUrl: \"\",\n    configurationName: \"SumoLogic\",\n    debugMode: false,\n    disableRequestedAuthnContext: false,\n    emailAttribute: \"\",\n    isRedirectBinding: false,\n    issuer: \"http://www.okta.com/abxcseyuiwelflkdjh\",\n    logoutEnabled: false,\n    logoutUrl: \"\",\n    onDemandProvisioningEnabled: {\n        firstNameAttribute: \"firstName\",\n        lastNameAttribute: \"lastName\",\n        onDemandProvisioningRoles: [\"Administrator\"],\n    },\n    rolesAttribute: \"Administrator\",\n    signAuthnRequest: false,\n    spInitiatedLoginEnabled: false,\n    spInitiatedLoginPath: \"\",\n    x509cert1: \"string\",\n    x509cert2: \"\",\n    x509cert3: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_saml_configuration = sumologic.SamlConfiguration(\"exampleSamlConfiguration\",\n    authn_request_url=\"\",\n    configuration_name=\"SumoLogic\",\n    debug_mode=False,\n    disable_requested_authn_context=False,\n    email_attribute=\"\",\n    is_redirect_binding=False,\n    issuer=\"http://www.okta.com/abxcseyuiwelflkdjh\",\n    logout_enabled=False,\n    logout_url=\"\",\n    on_demand_provisioning_enabled=sumologic.SamlConfigurationOnDemandProvisioningEnabledArgs(\n        first_name_attribute=\"firstName\",\n        last_name_attribute=\"lastName\",\n        on_demand_provisioning_roles=[\"Administrator\"],\n    ),\n    roles_attribute=\"Administrator\",\n    sign_authn_request=False,\n    sp_initiated_login_enabled=False,\n    sp_initiated_login_path=\"\",\n    x509cert1=\"string\",\n    x509cert2=\"\",\n    x509cert3=\"\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleSamlConfiguration = new SumoLogic.SamlConfiguration(\"exampleSamlConfiguration\", new SumoLogic.SamlConfigurationArgs\n        {\n            AuthnRequestUrl = \"\",\n            ConfigurationName = \"SumoLogic\",\n            DebugMode = false,\n            DisableRequestedAuthnContext = false,\n            EmailAttribute = \"\",\n            IsRedirectBinding = false,\n            Issuer = \"http://www.okta.com/abxcseyuiwelflkdjh\",\n            LogoutEnabled = false,\n            LogoutUrl = \"\",\n            OnDemandProvisioningEnabled = new SumoLogic.Inputs.SamlConfigurationOnDemandProvisioningEnabledArgs\n            {\n                FirstNameAttribute = \"firstName\",\n                LastNameAttribute = \"lastName\",\n                OnDemandProvisioningRoles = \n                {\n                    \"Administrator\",\n                },\n            },\n            RolesAttribute = \"Administrator\",\n            SignAuthnRequest = false,\n            SpInitiatedLoginEnabled = false,\n            SpInitiatedLoginPath = \"\",\n            X509cert1 = \"string\",\n            X509cert2 = \"\",\n            X509cert3 = \"\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewSamlConfiguration(ctx, \"exampleSamlConfiguration\", \u0026sumologic.SamlConfigurationArgs{\n\t\t\tAuthnRequestUrl:              pulumi.String(\"\"),\n\t\t\tConfigurationName:            pulumi.String(\"SumoLogic\"),\n\t\t\tDebugMode:                    pulumi.Bool(false),\n\t\t\tDisableRequestedAuthnContext: pulumi.Bool(false),\n\t\t\tEmailAttribute:               pulumi.String(\"\"),\n\t\t\tIsRedirectBinding:            pulumi.Bool(false),\n\t\t\tIssuer:                       pulumi.String(\"http://www.okta.com/abxcseyuiwelflkdjh\"),\n\t\t\tLogoutEnabled:                pulumi.Bool(false),\n\t\t\tLogoutUrl:                    pulumi.String(\"\"),\n\t\t\tOnDemandProvisioningEnabled: \u0026sumologic.SamlConfigurationOnDemandProvisioningEnabledArgs{\n\t\t\t\tFirstNameAttribute: pulumi.String(\"firstName\"),\n\t\t\t\tLastNameAttribute:  pulumi.String(\"lastName\"),\n\t\t\t\tOnDemandProvisioningRoles: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"Administrator\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRolesAttribute:          pulumi.String(\"Administrator\"),\n\t\t\tSignAuthnRequest:        pulumi.Bool(false),\n\t\t\tSpInitiatedLoginEnabled: pulumi.Bool(false),\n\t\t\tSpInitiatedLoginPath:    pulumi.String(\"\"),\n\t\t\tX509cert1:               pulumi.String(\"string\"),\n\t\t\tX509cert2:               pulumi.String(\"\"),\n\t\t\tX509cert3:               pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `sp_initiated_login_path` - (Optional) The identifier used to generate a unique URL for user login. Defaults to \"\".\n- `configuration_name` - (Required) Name of the SSO policy or another name used to describe the policy internally.\n- `issuer` - (Required) The unique URL assigned to the organization by the SAML Identity Provider.\n- `sp_initiated_login_enabled` - (Optional) True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.\n- `authn_request_url` - (Optional) The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to \"\".\n- `x509cert1` - (Required) The certificate is used to verify the signature in SAML assertions.\n- `x509cert2` - (Optional) The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to \"\".\n- `x509cert3` - (Optional) The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to \"\".\n- `on_demand_provisioning_enabled` - (Block List, Max: 1, Optional) The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.\n- `roles_attribute` - (Optional) The role that Sumo Logic will assign to users when they sign in. Defaults to \"\".\n- `logout_enabled` - (Optional) True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.\n- `logout_url` - (Optional) The URL that users will be redirected to after signing out of Sumo Logic. Defaults to \"\".\n- `email_attribute` - (Optional) The email address of the new user account. Defaults to \"\".\n- `debug_mode` - (Optional) True if additional details are included when a user fails to sign in. Defaults to false.\n- `sign_authn_request` - (Optional) True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.\n- `disable_requested_authn_context` - (Optional) True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.\n- `is_redirect_binding` - (Optional) True if the SAML binding is of HTTP Redirect type. Defaults to false.\n\n### Schema for `on_demand_provisioning_enabled`\n- `first_name_attribute` - (Optional) First name attribute of the new user account. Defaults to \"\".\n- `last_name_attribute` - (Optional) Last name attribute of the new user account. Defaults to \"\".\n- `on_demand_provisioning_roles` - (Required) List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the SAML Configuration.\n- `certificate` - Authentication Request Signing Certificate for the user.\n\n\n## Import\n\nSAML Configuration can be imported using the SAML configuration id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/samlConfiguration:SamlConfiguration example 00000000454A5979\n```\n\n [1]https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On ",
            "properties": {
                "authnRequestUrl": {
                    "type": "string"
                },
                "certificate": {
                    "type": "string"
                },
                "configurationName": {
                    "type": "string"
                },
                "debugMode": {
                    "type": "boolean"
                },
                "disableRequestedAuthnContext": {
                    "type": "boolean"
                },
                "emailAttribute": {
                    "type": "string"
                },
                "isRedirectBinding": {
                    "type": "boolean"
                },
                "issuer": {
                    "type": "string"
                },
                "logoutEnabled": {
                    "type": "boolean"
                },
                "logoutUrl": {
                    "type": "string"
                },
                "onDemandProvisioningEnabled": {
                    "$ref": "#/types/sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled"
                },
                "rolesAttribute": {
                    "type": "string"
                },
                "signAuthnRequest": {
                    "type": "boolean"
                },
                "spInitiatedLoginEnabled": {
                    "type": "boolean"
                },
                "spInitiatedLoginPath": {
                    "type": "string"
                },
                "x509cert1": {
                    "type": "string"
                },
                "x509cert2": {
                    "type": "string"
                },
                "x509cert3": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "configurationName",
                "issuer",
                "x509cert1"
            ],
            "inputProperties": {
                "authnRequestUrl": {
                    "type": "string"
                },
                "configurationName": {
                    "type": "string"
                },
                "debugMode": {
                    "type": "boolean"
                },
                "disableRequestedAuthnContext": {
                    "type": "boolean"
                },
                "emailAttribute": {
                    "type": "string"
                },
                "isRedirectBinding": {
                    "type": "boolean"
                },
                "issuer": {
                    "type": "string"
                },
                "logoutEnabled": {
                    "type": "boolean"
                },
                "logoutUrl": {
                    "type": "string"
                },
                "onDemandProvisioningEnabled": {
                    "$ref": "#/types/sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled"
                },
                "rolesAttribute": {
                    "type": "string"
                },
                "signAuthnRequest": {
                    "type": "boolean"
                },
                "spInitiatedLoginEnabled": {
                    "type": "boolean"
                },
                "spInitiatedLoginPath": {
                    "type": "string"
                },
                "x509cert1": {
                    "type": "string"
                },
                "x509cert2": {
                    "type": "string"
                },
                "x509cert3": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configurationName",
                "issuer",
                "x509cert1"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SamlConfiguration resources.\n",
                "properties": {
                    "authnRequestUrl": {
                        "type": "string"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "configurationName": {
                        "type": "string"
                    },
                    "debugMode": {
                        "type": "boolean"
                    },
                    "disableRequestedAuthnContext": {
                        "type": "boolean"
                    },
                    "emailAttribute": {
                        "type": "string"
                    },
                    "isRedirectBinding": {
                        "type": "boolean"
                    },
                    "issuer": {
                        "type": "string"
                    },
                    "logoutEnabled": {
                        "type": "boolean"
                    },
                    "logoutUrl": {
                        "type": "string"
                    },
                    "onDemandProvisioningEnabled": {
                        "$ref": "#/types/sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled"
                    },
                    "rolesAttribute": {
                        "type": "string"
                    },
                    "signAuthnRequest": {
                        "type": "boolean"
                    },
                    "spInitiatedLoginEnabled": {
                        "type": "boolean"
                    },
                    "spInitiatedLoginPath": {
                        "type": "string"
                    },
                    "x509cert1": {
                        "type": "string"
                    },
                    "x509cert2": {
                        "type": "string"
                    },
                    "x509cert3": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/scheduledView:ScheduledView": {
            "description": "Provides a [Sumologic Scheduled View](https://help.sumologic.com/Manage/Scheduled-Views).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst failedConnections = new sumologic.ScheduledView(\"failed_connections\", {\n    indexName: \"failed_connections\",\n    query: `_view=connections connectionStats\n| parse \"connectionStats.CS *\" as body\n| json field=body \"exitCode\", \"isHttp2\"\n| lookup org_name from shared/partners on partner_id=partnerid\n| timeslice 10m\n`,\n    retentionPeriod: 365,\n    startTime: \"2019-09-01T00:00:00Z\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n\u003e For attributes that force a new resource, if the value is updated, it will destroy the resource and recreate it which may incur significant costs. We advise customers to set the `lifecycle` attribute `prevent_destroy` to `true` to avoid accidentally destroying and recreating expensive resources.\n\n- `index_name` - (Required, Forces new resource) Name of the index (scheduled view).\n- `query` - (Required, Forces new resource) Log query defining the scheduled view.\n- `start_time` - (Required, Forces new resource) Start timestamp in UTC in RFC3339 format.\n- `retention_period` - (Optional) The number of days to retain data in the scheduled view, or -1 to use the default value for your account. Only relevant if your account has multi-retention. enabled.\n- `data_forwarding_id` - (Optional) An optional ID of a data forwarding configuration to be used by the scheduled view.\n- `parsing_mode` - (Optional, Forces new resource) Default to `Manual`. Define the parsing mode to scan the JSON format log messages. Possible values are: `AutoParse` - In AutoParse mode, the system automatically figures out fields to parse based on the search query. `Manual` - While in the Manual mode, no fields are parsed out automatically. For more information see Dynamic Parsing.\n- `reduce_retention_period_immediately` - (Optional) This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the scheduled view.\n\n\n## Import\n\nScheduled Views can can be imported using the id. The list of scheduled views and their ids can be obtained using the Sumologic [scheduled views api][2]. hcl\n\n```sh\n $ pulumi import sumologic:index/scheduledView:ScheduledView failed_connections 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Scheduled-Views [2]https://api.sumologic.com/docs/#operation/listScheduledViews ",
            "properties": {
                "dataForwardingId": {
                    "type": "string"
                },
                "indexName": {
                    "type": "string"
                },
                "parsingMode": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "required": [
                "indexName",
                "query",
                "startTime"
            ],
            "inputProperties": {
                "dataForwardingId": {
                    "type": "string"
                },
                "indexName": {
                    "type": "string"
                },
                "parsingMode": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "indexName",
                "query",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScheduledView resources.\n",
                "properties": {
                    "dataForwardingId": {
                        "type": "string"
                    },
                    "indexName": {
                        "type": "string"
                    },
                    "parsingMode": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "reduceRetentionPeriodImmediately": {
                        "type": "boolean"
                    },
                    "retentionPeriod": {
                        "type": "integer"
                    },
                    "startTime": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/subdomain:Subdomain": {
            "description": "Provides a [Sumologic Subdomain](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization#change-account-subdomain).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleSubdomain = new sumologic.Subdomain(\"exampleSubdomain\", {\n    subdomain: \"my-company\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_subdomain = sumologic.Subdomain(\"exampleSubdomain\", subdomain=\"my-company\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleSubdomain = new SumoLogic.Subdomain(\"exampleSubdomain\", new SumoLogic.SubdomainArgs\n        {\n            Subdomain = \"my-company\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewSubdomain(ctx, \"exampleSubdomain\", \u0026sumologic.SubdomainArgs{\n\t\t\tSubdomain: pulumi.String(\"my-company\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `subdomain` - (Required) The subdomain.\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the subdomain.\n\n[1]: https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization#change-account-subdomain\n",
            "properties": {
                "subdomain": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "SubdomainName"
                        }
                    }
                }
            },
            "required": [
                "subdomain"
            ],
            "inputProperties": {
                "subdomain": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "SubdomainName"
                        }
                    }
                }
            },
            "requiredInputs": [
                "subdomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subdomain resources.\n",
                "properties": {
                    "subdomain": {
                        "type": "string",
                        "language": {
                            "csharp": {
                                "name": "SubdomainName"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/user:User": {
            "description": "Provides a [Sumologic User](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleRole = new sumologic.Role(\"exampleRole\", {description: \"Testing resource sumologic_role\"});\nconst exampleUser1 = new sumologic.User(\"exampleUser1\", {\n    firstName: \"Jon\",\n    lastName: \"Doe\",\n    email: \"jon.doe@gmail.com\",\n    isActive: true,\n    roleIds: [exampleRole.id],\n    transferTo: \"\",\n});\nconst exampleUser2 = new sumologic.User(\"exampleUser2\", {\n    firstName: \"Jane\",\n    lastName: \"Smith\",\n    email: \"jane.smith@gmail.com\",\n    roleIds: [exampleRole.id],\n    transferTo: exampleUser1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_role = sumologic.Role(\"exampleRole\", description=\"Testing resource sumologic_role\")\nexample_user1 = sumologic.User(\"exampleUser1\",\n    first_name=\"Jon\",\n    last_name=\"Doe\",\n    email=\"jon.doe@gmail.com\",\n    is_active=True,\n    role_ids=[example_role.id],\n    transfer_to=\"\")\nexample_user2 = sumologic.User(\"exampleUser2\",\n    first_name=\"Jane\",\n    last_name=\"Smith\",\n    email=\"jane.smith@gmail.com\",\n    role_ids=[example_role.id],\n    transfer_to=example_user1.id)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRole = new SumoLogic.Role(\"exampleRole\", new SumoLogic.RoleArgs\n        {\n            Description = \"Testing resource sumologic_role\",\n        });\n        var exampleUser1 = new SumoLogic.User(\"exampleUser1\", new SumoLogic.UserArgs\n        {\n            FirstName = \"Jon\",\n            LastName = \"Doe\",\n            Email = \"jon.doe@gmail.com\",\n            IsActive = true,\n            RoleIds = \n            {\n                exampleRole.Id,\n            },\n            TransferTo = \"\",\n        });\n        var exampleUser2 = new SumoLogic.User(\"exampleUser2\", new SumoLogic.UserArgs\n        {\n            FirstName = \"Jane\",\n            LastName = \"Smith\",\n            Email = \"jane.smith@gmail.com\",\n            RoleIds = \n            {\n                exampleRole.Id,\n            },\n            TransferTo = exampleUser1.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRole, err := sumologic.NewRole(ctx, \"exampleRole\", \u0026sumologic.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Testing resource sumologic_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser1, err := sumologic.NewUser(ctx, \"exampleUser1\", \u0026sumologic.UserArgs{\n\t\t\tFirstName: pulumi.String(\"Jon\"),\n\t\t\tLastName:  pulumi.String(\"Doe\"),\n\t\t\tEmail:     pulumi.String(\"jon.doe@gmail.com\"),\n\t\t\tIsActive:  pulumi.Bool(true),\n\t\t\tRoleIds: pulumi.StringArray{\n\t\t\t\texampleRole.ID(),\n\t\t\t},\n\t\t\tTransferTo: pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewUser(ctx, \"exampleUser2\", \u0026sumologic.UserArgs{\n\t\t\tFirstName: pulumi.String(\"Jane\"),\n\t\t\tLastName:  pulumi.String(\"Smith\"),\n\t\t\tEmail:     pulumi.String(\"jane.smith@gmail.com\"),\n\t\t\tRoleIds: pulumi.StringArray{\n\t\t\t\texampleRole.ID(),\n\t\t\t},\n\t\t\tTransferTo: exampleUser1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\nThe following arguments are supported:\n\n- `first_name` - (Required) First name of the user.\n- `last_name` - (Required) Last name of the user.\n- `email` - (Required) Last name of the user.\n- `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated..\n- `role_ids` - (Required) List of roleIds associated with the user.\n- `transfer_to` - (Required) UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the user.\n\n\n## Import\n\nUsers can be imported using the user id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/user:User user 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users ",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "transferTo": {
                    "type": "string"
                }
            },
            "required": [
                "email",
                "firstName",
                "isActive",
                "lastName",
                "roleIds",
                "transferTo"
            ],
            "inputProperties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "transferTo": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "email",
                "firstName",
                "isActive",
                "lastName",
                "roleIds",
                "transferTo"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "roleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "transferTo": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sumologic:index/getCallerIdentity:getCallerIdentity": {
            "description": "Provides an easy way to retrieve Sumo Logic auth details.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst current = pulumi.output(sumologic.getCallerIdentity({ async: true }));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncurrent = sumologic.get_caller_identity()\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var current = Output.Create(SumoLogic.GetCallerIdentity.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.GetCallerIdentity(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `access_id` - Sumo Logic access ID.\n- `environment` - API endpoint environment.\n",
            "outputs": {
                "description": "A collection of values returned by getCallerIdentity.\n",
                "properties": {
                    "accessId": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessId",
                    "environment",
                    "id"
                ]
            }
        },
        "sumologic:index/getCollector:getCollector": {
            "description": "Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thisCollector = pulumi.output(sumologic.getCollector({\n    name: \"MyCollector\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthis = sumologic.get_collector(name=\"MyCollector\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @this = Output.Create(SumoLogic.GetCollector.InvokeAsync(new SumoLogic.GetCollectorArgs\n        {\n            Name = \"MyCollector\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"MyCollector\"\n\t\t_, err := sumologic.LookupCollector(ctx, \u0026sumologic.LookupCollectorArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst that = pulumi.output(sumologic.getCollector({\n    id: \"1234567890\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthat = sumologic.get_collector(id=1234567890)\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var that = Output.Create(SumoLogic.GetCollector.InvokeAsync(new SumoLogic.GetCollectorArgs\n        {\n            Id = 1234567890,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := 1234567890\n\t\t_, err := sumologic.LookupCollector(ctx, \u0026sumologic.LookupCollectorArgs{\n\t\t\tId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nA collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.\n\nIf both `id` and `name` have been specified, `id` takes precedence.\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the collector. This can be used to attach sources to the collector.\n- `name` - The name of the collector.\n- `description` - The description of the collector.\n- `category` - The default source category for any source attached to this collector.\n- `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCollector.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCollector.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "description",
                    "fields",
                    "id",
                    "name",
                    "timezone"
                ]
            }
        },
        "sumologic:index/getHttpSource:getHttpSource": {
            "inputs": {
                "description": "A collection of arguments for invoking getHttpSource.\n",
                "properties": {
                    "collectorId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHttpSource.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "multiline": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "description",
                    "id",
                    "multiline",
                    "timezone",
                    "url"
                ]
            }
        },
        "sumologic:index/getMyUserId:getMyUserId": {
            "inputs": {
                "description": "A collection of arguments for invoking getMyUserId.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMyUserId.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "sumologic:index/getPersonalFolder:getPersonalFolder": {
            "description": "Provides an easy way to retrieve the Personal Folder.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = pulumi.output(sumologic.getPersonalFolder({ async: true }));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var personalFolder = Output.Create(SumoLogic.GetPersonalFolder.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.GetPersonalFolder(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The ID of the Personal Folder.\n- `name` - The name of the Personal Folder.\n- `description` - The description of the Personal Folder.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPersonalFolder.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPersonalFolder.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name"
                ]
            }
        },
        "sumologic:index/getRole:getRole": {
            "description": "Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thisRole = pulumi.output(sumologic.getRole({\n    name: \"MyRole\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthis = sumologic.get_role(name=\"MyRole\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @this = Output.Create(SumoLogic.GetRole.InvokeAsync(new SumoLogic.GetRoleArgs\n        {\n            Name = \"MyRole\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"MyRole\"\n\t\t_, err := sumologic.LookupRole(ctx, \u0026sumologic.LookupRoleArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst that = pulumi.output(sumologic.getRole({\n    id: \"1234567890\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthat = sumologic.get_role(id=\"1234567890\")\n```\n```csharp\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var that = Output.Create(SumoLogic.GetRole.InvokeAsync(new SumoLogic.GetRoleArgs\n        {\n            Id = \"1234567890\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"1234567890\"\n\t\t_, err := sumologic.LookupRole(ctx, \u0026sumologic.LookupRoleArgs{\n\t\t\tId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nA role can be looked up by either `id` or `name`. One of those attributes needs to be specified.\n\nIf both `id` and `name` have been specified, `id` takes precedence.\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the role. This can be used to create users having that role.\n- `name` - The name of the role.\n- `description` - The description of the role.\n- `filter_predicate` - The search filter to restrict access to specific logs.\n- `capabilities` - The list of capabilities associated with the role.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "filterPredicate": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "capabilities",
                    "description",
                    "filterPredicate",
                    "id",
                    "name"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "sumologic": "SumoLogic"
            },
            "packageReferences": {
                "Pulumi": "3.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing sumologic cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/SumoLogic/terraform-provider-sumologic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-sumologic` repo](https://github.com/pulumi/pulumi-sumologic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`SumoLogic/terraform-provider-sumologic` repo](https://github.com/SumoLogic/terraform-provider-sumologic/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/SumoLogic/terraform-provider-sumologic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-sumologic` repo](https://github.com/pulumi/pulumi-sumologic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`SumoLogic/terraform-provider-sumologic` repo](https://github.com/SumoLogic/terraform-provider-sumologic/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}